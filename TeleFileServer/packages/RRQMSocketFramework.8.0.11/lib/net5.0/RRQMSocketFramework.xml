<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RRQMSocketFramework</name>
    </assembly>
    <members>
        <member name="T:RRQMCore.EnterpriseEditionAttribute">
            <summary>
            标识为企业版功能
            </summary>
        </member>
        <member name="P:RRQMCore.EnterpriseEditionAttribute.LicenceInfo">
            <summary>
            许可证信息
            </summary>
        </member>
        <member name="P:RRQMCore.EnterpriseEditionAttribute.LicenceOwner">
            <summary>
            密钥归属
            </summary>
        </member>
        <member name="P:RRQMCore.EnterpriseEditionAttribute.u32u4234u234u5u88ds8sd8hjjrs8djhc">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="M:RRQMCore.EnterpriseEditionAttribute.Inspection">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="T:RRQMCore.ByteManager.ByteBlock">
            <summary>
            字节块流
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.#ctor(System.Int32,System.Boolean)">
            <summary>
             构造函数
            </summary>
            <param name="byteSize"></param>
            <param name="equalSize"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.#ctor(System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Ratio">
            <summary>
            扩容增长比，默认为1.5，
            min：1.5
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Buffer">
            <summary>
            字节实例
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.CanRead">
            <summary>
            仅当内存块可用，且<see cref="P:RRQMCore.ByteManager.ByteBlock.CanReadLen"/>>0时为True。
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.CanReadLen">
            <summary>
            还能读取的长度，计算为<see cref="P:RRQMCore.ByteManager.ByteBlock.Len"/>与<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>的差值。
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.CanReadLength">
            <summary>
            还能读取的长度，计算为<see cref="P:RRQMCore.ByteManager.ByteBlock.Len"/>与<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>的差值。
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.CanSeek">
            <summary>
            支持查找
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.CanWrite">
            <summary>
            可写入
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Capacity">
            <summary>
            容量
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Holding">
            <summary>
            表示持续性持有，为True时，Dispose将调用无效。
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Len">
            <summary>
            Int真实长度
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Length">
            <summary>
            真实长度
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Pos">
            <summary>
            int型流位置
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Position">
            <summary>
            流位置
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.ByteBlock.Using">
            <summary>
            使用状态
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.AbsoluteDispose">
            <summary>
            直接完全释放，游离该对象，然后等待GC
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Clear">
            <summary>
            清空所有内存数据
            </summary>
            <exception cref="T:System.ObjectDisposedException">内存块已释放</exception>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Reset">
            <summary>
            将内存块初始化到刚申请的状态。
            <para>仅仅重置<see cref="P:RRQMCore.ByteManager.ByteBlock.Position"/>和<see cref="P:RRQMCore.ByteManager.ByteBlock.Length"/>属性。</para>
            </summary>
            <exception cref="T:System.ObjectDisposedException">内存块已释放</exception>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Flush">
            <summary>
            无实际效果
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取数据，然后递增Pos
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Read(System.Byte[])">
            <summary>
            读取数据，然后递增Pos
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Read(System.Byte[]@,System.Int32)">
            <summary>
            读取数据，然后递增Pos
            </summary>
            <param name="buffer"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            设置流位置
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.SetCapacity(System.Int32,System.Boolean)">
            <summary>
            重新设置容量
            </summary>
            <param name="size">新尺寸</param>
            <param name="retainedData">是否保留元数据</param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.SetHolding(System.Boolean)">
            <summary>
            设置持续持有属性，当为True时，调用Dispose会失效，表示该对象将长期持有，直至设置为False。
            当为False时，会自动调用Dispose。
            </summary>
            <param name="holding"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.SetLength(System.Int64)">
            <summary>
            设置实际长度
            </summary>
            <param name="value"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ToArray">
            <summary>
            转换为有效内存
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ToArray(System.Int32)">
            <summary>
            从指定位置转化到有效内存
            </summary>
            <param name="offset"></param>
            <returns></returns>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ToArray(System.Int32,System.Int32)">
            <summary>
            从指定位置转化到指定长度的有效内存
            </summary>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ToString">
            <summary>
            转换为UTF-8字符
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ToString(System.Int32,System.Int32)">
            <summary>
            转换为UTF-8字符
            </summary>
            <param name="offset">偏移量</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ToString(System.Int32)">
            <summary>
            转换为UTF-8字符
            </summary>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Byte[])">
            <summary>
            写入
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadBytesPackage">
            <summary>
            从当前流位置读取一个独立的<see cref="T:System.Byte"/>数组包
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.TryReadBytesPackageInfo(System.Int32@,System.Int32@)">
            <summary>
            尝试获取数据包信息，方便从Buffer操作数据
            </summary>
            <param name="pos"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.WriteBytesPackage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入一个独立的<see cref="T:System.Byte"/>数组包
            </summary>
            <param name="value"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.WriteBytesPackage(System.Byte[])">
            <summary>
            写入一个独立的<see cref="T:System.Byte"/>数组包
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadInt32">
            <summary>
            从当前流位置读取一个<see cref="T:System.Int32"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Int32)">
            <summary>
            写入<see cref="T:System.Int32"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadInt16">
            <summary>
            从当前流位置读取一个<see cref="T:System.Int16"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Int16)">
            <summary>
            写入<see cref="T:System.Int16"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadInt64">
            <summary>
            从当前流位置读取一个<see cref="T:System.Int64"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Int64)">
            <summary>
            写入<see cref="T:System.Int64"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadBoolean">
            <summary>
            从当前流位置读取一个<see cref="T:System.Boolean"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Boolean)">
            <summary>
            写入<see cref="T:System.Boolean"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadByte">
            <summary>
            从当前流位置读取一个<see cref="T:System.Byte"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Byte)">
            <summary>
            写入<see cref="T:System.Byte"/>值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadString">
            <summary>
            从当前流位置读取一个<see cref="T:System.String"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.String)">
            <summary>
            写入<see cref="T:System.String"/>值。
            <para>读取时必须使用ReadString</para>
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadChar">
            <summary>
            从当前流位置读取一个<see cref="T:System.Char"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Char)">
            <summary>
            写入<see cref="T:System.Char"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadDouble">
            <summary>
            从当前流位置读取一个<see cref="T:System.Double"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Double)">
            <summary>
            写入<see cref="T:System.Double"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadFloat">
            <summary>
            从当前流位置读取一个<see cref="T:System.Single"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.Single)">
            <summary>
            写入<see cref="T:System.Single"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadUInt16">
            <summary>
            从当前流位置读取一个<see cref="T:System.UInt16"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.UInt16)">
            <summary>
            写入<see cref="T:System.UInt16"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadUInt32">
            <summary>
            从当前流位置读取一个<see cref="T:System.UInt32"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.UInt32)">
            <summary>
            写入<see cref="T:System.UInt32"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadUInt64">
            <summary>
            从当前流位置读取一个<see cref="T:System.UInt64"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.UInt64)">
            <summary>
            写入<see cref="T:System.UInt64"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadDateTime">
            <summary>
            从当前流位置读取一个<see cref="T:System.DateTime"/>值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.Write(System.DateTime)">
            <summary>
            写入<see cref="T:System.DateTime"/>值
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.ReadObject``1(RRQMCore.Serialization.SerializationType)">
            <summary>
             从当前流位置读取一个泛型值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serializationType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.ByteBlock.WriteObject(System.Object,RRQMCore.Serialization.SerializationType)">
            <summary>
            写入<see cref="T:System.Object"/>值
            </summary>
            <param name="value"></param>
            <param name="serializationType"></param>
        </member>
        <member name="T:RRQMCore.ByteManager.BytePool">
            <summary>
            字节池
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.AutoZero">
            <summary>
            回收内存时，自动归零
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.KeyCapacity">
            <summary>
            键容量
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.MaxBlockSize">
            <summary>
            单个块最大值
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.MaxSize">
            <summary>
            允许的内存池最大值
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytePool.MinBlockSize">
            <summary>
            单个块最小值
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.AddSizeKey(System.Int32)">
            <summary>
            添加尺寸键
            </summary>
            <param name="byteSize"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.Clear">
            <summary>
            清理
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.ContainsSizeKey(System.Int32)">
            <summary>
            确定是否包含指定尺寸键
            </summary>
            <param name="byteSize"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.GetAllSizeKeys">
            <summary>
            获取所以内存键
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.GetByteBlock(System.Int32,System.Boolean)">
            <summary>
            获取ByteBlock
            </summary>
            <param name="byteSize">长度</param>
            <param name="equalSize">要求长度相同</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.GetByteBlock(System.Int32)">
            <summary>
            获取ByteBlock
            </summary>
            <param name="byteSize"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.GetByteBlock">
            <summary>
            获取最大长度的ByteBlock
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.GetPoolSize">
            <summary>
            获取内存池容量
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.RemoveSizeKey(System.Int32)">
            <summary>
            移除尺寸键
            </summary>
            <param name="byteSize"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.SetBlockSize(System.Int32,System.Int32)">
            <summary>
            设置内存块参数
            </summary>
            <param name="minBlockSize"></param>
            <param name="maxBlockSize"></param>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.GetByteCore(System.Int32,System.Boolean)">
            <summary>
            获取内存核心
            </summary>
            <param name="byteSize"></param>
            <param name="equalSize"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytePool.Recycle(System.Byte[])">
            <summary>
            回收内存核心
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="T:RRQMCore.ByteManager.BytesQueue">
            <summary>
            字节块集合
            </summary>
        </member>
        <member name="P:RRQMCore.ByteManager.BytesQueue.FullSize">
            <summary>
            占用空间
            </summary>
        </member>
        <member name="M:RRQMCore.ByteManager.BytesQueue.TryGet(System.Byte[]@)">
            <summary>
            获取当前实例中的空闲的Block
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.ByteManager.BytesQueue.Add(System.Byte[])">
            <summary>
            向当前集合添加Block
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="T:RRQMCore.Collections.Concurrent.ConcurrentDoublyDictionary`2">
            <summary>
            安全双向字典
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentDoublyDictionary`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.ConcurrentDoublyDictionary`2.KeyToValue">
            <summary>
            由键指向值得集合
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.ConcurrentDoublyDictionary`2.ValueToKey">
            <summary>
            由值指向键的集合
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentDoublyDictionary`2.TryAdd(`0,`1)">
            <summary>
             尝试将指定的键和值添加到字典中。
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentDoublyDictionary`2.TryRemoveFromKey(`0,`1@)">
            <summary>
            由键尝试移除
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentDoublyDictionary`2.TryRemoveFromValue(`1,`0@)">
            <summary>
            由值尝试移除
            </summary>
            <param name="value"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentDoublyDictionary`2.TryGetFromKey(`0,`1@)">
            <summary>
            由键获取到值
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentDoublyDictionary`2.TryGetFromValue(`1,`0@)">
            <summary>
            由值获取到键
            </summary>
            <param name="value"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Collections.Concurrent.ConcurrentList`1">
            <summary>
            线程安全的List，其基本操作和List一致。
            <para>该集合虽然是线程安全，但是不支持在foreach时修改集合，仅可以遍历成员。</para>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            构造函数
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.ConcurrentList`1.Count">
            <summary>
            元素数量
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.ConcurrentList`1.IsReadOnly">
            <summary>
            是否为只读
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.ConcurrentList`1.Item(System.Int32)">
            <summary>
            获取索引元素
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Add(`0)">
            <summary>
            添加元素
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Clear">
            <summary>
            清空所有元素
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Contains(`0)">
            <summary>
            是否包含某个元素
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.CopyTo(`0[],System.Int32)">
            <summary>
            复制到
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.GetEnumerator">
            <summary>
            返回迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回迭代器组合
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.IndexOf(`0)">
            <summary>
            索引
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Insert(System.Int32,`0)">
            <summary>
            插入
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Remove(`0)">
            <summary>
            移除元素
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.RemoveAt(System.Int32)">
            <summary>
            按索引移除
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.ConcurrentList`1.Capacity">
            <summary>
            获取或设置容量
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.BinarySearch(`0)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(`0)"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})"/>
            </summary>
            <param name="item"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})"/>
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="item"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})"/>
            </summary>
            <typeparam name="TOutput"></typeparam>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Find(System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.FindAll(System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})"/>
            </summary>
            <param name="startIndex"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.FindIndex(System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.FindLast(System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})"/>
            </summary>
            <param name="startIndex"></param>
            <param name="count"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})"/>
            </summary>
            <param name="startIndex"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.ForEach(System.Action{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})"/>
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)"/>
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.IndexOf(`0,System.Int32)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)"/>
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)"/>
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>
            </summary>
            <param name="index"></param>
            <param name="collection"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.LastIndexOf(`0)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0)"/>
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)"/>
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)"/>
            </summary>
            <param name="item"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})"/>
            </summary>
            <param name="match"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)"/>
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Reverse">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.Reverse"/>
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)"/>
            </summary>
            <param name="index"></param>
            <param name="count"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Sort">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort"/>
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Sort(System.Comparison{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})"/>
            </summary>
            <param name="comparison"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})"/>
            </summary>
            <param name="comparer"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})"/>
            </summary>
            <param name="index"></param>
            <param name="count"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.ToArray">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.ToArray"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.TrimExcess">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.TrimExcess"/>
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.ConcurrentList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            <inheritdoc cref="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})"/>
            </summary>
            <param name="match"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Collections.Concurrent.IntelligentConcurrentQueue`1">
            <summary>
            智能安全队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.IntelligentConcurrentQueue`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="maxCount"></param>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.IntelligentConcurrentQueue`1.MaxCount">
            <summary>
            允许的最大长度
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.IntelligentConcurrentQueue`1.Count">
            <summary>
            长度
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.IntelligentConcurrentQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.IntelligentConcurrentQueue`1.TryDequeue(`0@)">
            <summary>
            出队
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1">
            <summary>
            智能数据安全队列
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.OverflowWait">
            <summary>
            溢出等待
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.OnQueueChanged">
            <summary>
            在队列修改时
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.Free">
            <summary>
            是否有空位允许入队
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.#ctor(System.Int64)">
            <summary>
            构造函数
            </summary>
            <param name="maxSize"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.MaxSize">
            <summary>
            允许的最大长度
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.ActualSize">
            <summary>
            实际尺寸
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.Clear(System.Action{`0})">
            <summary>
            清空队列
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.Enqueue(`0)">
            <summary>
            入队
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.IntelligentDataQueue`1.TryDequeue(`0@)">
            <summary>
            出队
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Collections.Concurrent.IQueueData">
            <summary>
            队列数据
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.IQueueData.Size">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="T:RRQMCore.Collections.Concurrent.QueueDataBytes">
            <summary>
            传输字节
            </summary>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.QueueDataBytes.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMCore.Collections.Concurrent.QueueDataBytes.#ctor(System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.QueueDataBytes.Buffer">
            <summary>
            数据内存
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.QueueDataBytes.Offset">
            <summary>
            偏移
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.QueueDataBytes.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="P:RRQMCore.Collections.Concurrent.QueueDataBytes.Size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="T:RRQMCore.AppConfigBase">
            <summary>
            运行配置类
            </summary>
        </member>
        <member name="M:RRQMCore.AppConfigBase.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fullPath"></param>
        </member>
        <member name="M:RRQMCore.AppConfigBase.Save(System.Boolean,System.String@)">
            <summary>
            保存配置
            </summary>
            <param name="overwrite"></param>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.AppConfigBase.Load(System.String@)">
            <summary>
            加载配置
            </summary>
            <param name="msg"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.AppConfigBase.GetDefault``1">
            <summary>
            获取默认配置。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.AppConfigBase.GetNewDefault``1">
            <summary>
            获取默认配置，每次调用该方法时，都会重新加载配置。
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Enterprise">
            <summary>
            企业版
            </summary>
        </member>
        <member name="F:RRQMCore.Enterprise.LicenceKeyProperty">
            <summary>
            许可密钥
            </summary>
        </member>
        <member name="P:RRQMCore.Enterprise.Default">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="P:RRQMCore.Enterprise.LicenceKey">
            <summary>
            许可密钥
            </summary>
        </member>
        <member name="M:RRQMCore.Enterprise.ForTest">
            <summary>
            请求测试企业版功能。
            <para>该方法在被调用后，会抛出可控异常，如果坚持使用企业版，请Try拦截即可。</para>
            <para>企业版功能将在1小时以内可用。</para>
            <para>如果想再次使用，请结束进程，重新启动即可。</para>
            </summary>
        </member>
        <member name="T:RRQMCore.EndianType">
            <summary>
            大小端类型
            </summary>
        </member>
        <member name="F:RRQMCore.EndianType.Little">
            <summary>
            小端模式
            </summary>
        </member>
        <member name="F:RRQMCore.EndianType.Big">
            <summary>
            大端模式
            </summary>
        </member>
        <member name="T:RRQMCore.ResType">
            <summary>
            RRQM资源枚举
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.UnknownError">
            <summary>
            未知错误
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.ArgumentNull">
            <summary>
            参数为空
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.RemoteRefuse">
            <summary>
            远程终端拒绝该操作
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.RemoteNotSupported">
            <summary>
            远程终端不响应该操作
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.RemoteException">
            <summary>
            远程终端异常
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.SetChannelFail">
            <summary>
            通道设置失败
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.PathInvalid">
            <summary>
            路径无效
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.FileExists">
            <summary>
            文件已存在
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.RemoteFileNotExists">
            <summary>
            远程文件不存在
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.CreateWriteStreamFail">
            <summary>
            创建写入流失败
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.StreamNotFind">
            <summary>
            没有找到流文件
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.ClientNotFind">
            <summary>
            没有找到客户端
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.StreamReferencing">
            <summary>
            流文件正在被应用
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.StreamBucketNull">
            <summary>
            接收流容器为空
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.LoadStreamFail">
            <summary>
            加载流异常。
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.GetEventArgsFail">
            <summary>
            事件操作器异常
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.NoResponse">
            <summary>
            长时间没有响应。
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.TokenExist">
            <summary>
            该Token消息已注册
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.MessageNotFound">
            <summary>
            信息未找到
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.NullDataAdapter">
            <summary>
            数据处理适配器为空
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.Overtime">
            <summary>
            操作超时
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.EventExisted">
            <summary>
            名称为“{0}”的事件已存在
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.EventNotExist">
            <summary>
            名称为“{0}”的事件不存在
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.NotConnected">
            <summary>
            客户端没有连接
            </summary>
        </member>
        <member name="F:RRQMCore.ResType.LicenceKeyInvalid">
            <summary>
            授权密钥无效
            </summary>
        </member>
        <member name="T:RRQMCore.ResultCode">
            <summary>
            结果类型
            </summary>
        </member>
        <member name="F:RRQMCore.ResultCode.Default">
            <summary>
            未执行的
            </summary>
        </member>
        <member name="F:RRQMCore.ResultCode.Error">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:RRQMCore.ResultCode.Success">
            <summary>
            成功
            </summary>
        </member>
        <member name="F:RRQMCore.ResultCode.Overtime">
            <summary>
            操作超时
            </summary>
        </member>
        <member name="F:RRQMCore.ResultCode.Canceled">
            <summary>
            操作取消
            </summary>
        </member>
        <member name="T:RRQMCore.IResult">
            <summary>
            返回通知接口
            </summary>
        </member>
        <member name="P:RRQMCore.IResult.ResultCode">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:RRQMCore.IResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:RRQMCore.ReadLock">
            <summary>
            读取锁
            </summary>
        </member>
        <member name="M:RRQMCore.ReadLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            构造函数
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:RRQMCore.ReadLock.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:RRQMCore.WriteLock">
            <summary>
            写入锁
            </summary>
        </member>
        <member name="M:RRQMCore.WriteLock.#ctor(System.Threading.ReaderWriterLockSlim)">
            <summary>
            构造函数
            </summary>
            <param name="locks"></param>
        </member>
        <member name="M:RRQMCore.WriteLock.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:RRQMCore.Metadata">
            <summary>
            可传输的元数据
            </summary>
        </member>
        <member name="M:RRQMCore.Metadata.AddOrUpdate(System.String,System.String)">
            <summary>
            添加或更新
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="T:RRQMCore.Result">
            <summary>
            结果返回
            </summary>
        </member>
        <member name="M:RRQMCore.Result.#ctor(RRQMCore.ResultCode,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="resultCode"></param>
            <param name="message"></param>
        </member>
        <member name="M:RRQMCore.Result.#ctor(RRQMCore.ResultCode)">
            <summary>
            构造函数
            </summary>
            <param name="resultCode"></param>
        </member>
        <member name="P:RRQMCore.Result.ResultCode">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMCore.Result.Message">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMCore.Result.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.RRQMBitConverter">
            <summary>
            将基数据类型转换为指定端的一个字节数组，
            或将一个字节数组转换为指定端基数据类型。
            </summary>
        </member>
        <member name="F:RRQMCore.RRQMBitConverter.BigEndian">
            <summary>
            以大端
            </summary>
        </member>
        <member name="F:RRQMCore.RRQMBitConverter.LittleEndian">
            <summary>
            以小端
            </summary>
        </member>
        <member name="P:RRQMCore.RRQMBitConverter.Default">
            <summary>
            以默认小端，可通过<see cref="P:RRQMCore.RRQMBitConverter.DefaultEndianType"/>重新指定默认端。
            </summary>
        </member>
        <member name="P:RRQMCore.RRQMBitConverter.DefaultEndianType">
            <summary>
            默认大小端切换。
            </summary>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.#ctor(RRQMCore.EndianType)">
            <summary>
            构造函数
            </summary>
            <param name="endianType"></param>
        </member>
        <member name="P:RRQMCore.RRQMBitConverter.EndianType">
            <summary>
            指定大小端。
            </summary>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.IsSameOfSet">
            <summary>
            判断当前系统是否为设置的大小端
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.UInt16)">
            <summary>
            转换为指定端2字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            转换为指定端模式的2字节转换为UInt16数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.UInt64)">
            <summary>
            转换为指定端8字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
             转换为指定端模式的Ulong数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.Boolean)">
            <summary>
            转换为指定端1字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
             转换为指定端模式的bool数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.Char)">
            <summary>
            转换为指定端2字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
             转换为指定端模式的Char数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.Int16)">
            <summary>
            转换为指定端2字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
             转换为指定端模式的Short数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.Int32)">
            <summary>
            转换为指定端4字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
             转换为指定端模式的int数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.Int64)">
            <summary>
            转换为指定端8字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
             转换为指定端模式的long数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.UInt32)">
            <summary>
            转换为指定端4字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
             转换为指定端模式的Uint数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.Single)">
            <summary>
            转换为指定端4字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
             转换为指定端模式的float数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.GetBytes(System.Double)">
            <summary>
            转换为指定端8字节
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.RRQMBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
             转换为指定端模式的double数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.RRQMCoreUtility">
            <summary>
            常量
            </summary>
        </member>
        <member name="T:RRQMCore.SnowflakeIDGenerator">
            <summary>
            雪花ID生成器(该代码来自网络)
            </summary>
        </member>
        <member name="F:RRQMCore.SnowflakeIDGenerator.maxWorkerId">
            <summary>
            最大机器ID
            </summary>
        </member>
        <member name="F:RRQMCore.SnowflakeIDGenerator.sequenceMask">
            <summary>
            一微秒内可以产生计数，如果达到该值则等到下一微妙在进行生成
            </summary>
        </member>
        <member name="M:RRQMCore.SnowflakeIDGenerator.#ctor(System.Int64)">
            <summary>
            机器码
            </summary>
            <param name="workerId"></param>
        </member>
        <member name="M:RRQMCore.SnowflakeIDGenerator.NextID">
            <summary>
            获取ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.SnowflakeIDGenerator.tillNextMillis(System.Int64)">
            <summary>
            获取下一微秒时间戳
            </summary>
            <param name="lastTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.SnowflakeIDGenerator.timeGen">
            <summary>
            生成当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.StringResStore">
            <summary>
            字符串资源字典
            </summary>
        </member>
        <member name="M:RRQMCore.StringResStore.GetResString(System.Enum,System.Object[])">
            <summary>
            获取资源字符
            </summary>
            <param name="enum"></param>
            <param name="objs"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Converter.IConverter`1">
            <summary>
            转换器接口
            </summary>
        </member>
        <member name="P:RRQMCore.Converter.IConverter`1.Order">
            <summary>
            转换器执行顺序
            <para>该属性值越小，越靠前执行。值相等时，按添加先后顺序</para>
            <para>该属性效果，仅在<see cref="M:RRQMCore.Converter.RRQMConverter`1.Add(RRQMCore.Converter.IConverter{`0})"/>之前设置有效。</para>
            </summary>
        </member>
        <member name="M:RRQMCore.Converter.IConverter`1.TryConvertFrom(`0,System.Type,System.Object@)">
            <summary>
            尝试将源数据转换目标类型对象
            </summary>
            <param name="source"></param>
            <param name="targetType"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Converter.IConverter`1.TryConvertTo(System.Object,`0@)">
            <summary>
            尝试将目标类型对象转换源数据
            </summary>
            <param name="target"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Converter.RRQMConverter`1">
            <summary>
            转换器
            </summary>
        </member>
        <member name="M:RRQMCore.Converter.RRQMConverter`1.Add(RRQMCore.Converter.IConverter{`0})">
            <summary>
            添加插件
            </summary>
            <param name="converter">插件</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMCore.Converter.RRQMConverter`1.Clear">
            <summary>
            清除所有插件
            </summary>
        </member>
        <member name="M:RRQMCore.Converter.RRQMConverter`1.ConvertFrom(`0,System.Type)">
            <summary>
            将源数据转换目标类型对象
            </summary>
            <param name="source"></param>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Converter.RRQMConverter`1.ConvertTo(System.Object)">
            <summary>
            将目标类型对象转换源数据
            </summary>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Converter.RRQMConverter`1.Remove(RRQMCore.Converter.IConverter{`0})">
            <summary>
            移除插件
            </summary>
            <param name="converter"></param>
        </member>
        <member name="M:RRQMCore.Converter.RRQMConverter`1.Remove(System.Type)">
            <summary>
            移除插件
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:RRQMCore.Converter.StringConverter">
            <summary>
            String类型数据转换器
            </summary>
        </member>
        <member name="M:RRQMCore.Converter.StringConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:RRQMCore.Converter.StringToPrimitiveConverter">
            <summary>
            String值转换为基础类型。
            </summary>
        </member>
        <member name="P:RRQMCore.Converter.StringToPrimitiveConverter.Order">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMCore.Converter.StringToPrimitiveConverter.TryConvertFrom(System.String,System.Type,System.Object@)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="source"></param>
            <param name="targetType"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Converter.StringToPrimitiveConverter.TryConvertTo(System.Object,System.String@)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="target"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Converter.JsonStringToClassConverter">
            <summary>
            Json字符串转到对应类
            </summary>
        </member>
        <member name="P:RRQMCore.Converter.JsonStringToClassConverter.Order">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMCore.Converter.JsonStringToClassConverter.TryConvertFrom(System.String,System.Type,System.Object@)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="source"></param>
            <param name="targetType"></param>
            <param name="target"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Converter.JsonStringToClassConverter.TryConvertTo(System.Object,System.String@)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="target"></param>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Data.Crc">
            <summary>
            Crc相关。
            <para>该代码来源于网络</para>
            </summary>
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc1(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-4/ITU    x4+x+1
             Poly: 0x03
             Init: 0x00
             Refin: true
             Refout: true
             Xorout: 0x00
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc2(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-5/EPC    x5+x3+1
             Poly: 0x09
             Init: 0x09
             Refin: false
             Refout: false
             Xorout: 0x00
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc3(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-5/ITU    x5+x4+x2+1
             Poly: 0x15
             Init: 0x00
             Refin: true
             Refout: true
             Xorout: 0x00
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc4(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-5/USB    x5+x2+1
             Poly: 0x05
             Init: 0x1F
             Refin: true
             Refout: true
             Xorout: 0x1F
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc5(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-6/ITU    x6+x+1
             Poly: 0x03
             Init: 0x00
             Refin: true
             Refout: true
             Xorout: 0x00
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc6(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-7/MMC    x7+x3+1
             Poly: 0x09
             Init: 0x00
             Refin: false
             Refout: false
             Xorout: 0x00
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc7(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC8    x8+x2+x+1
             Poly: 0x07
             Init: 0x00
             Refin: false
             Refout: false
             Xorout: 0x00
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc8(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-8/ITU    x8+x2+x+1
             Poly: 0x07
             Init: 0x00
             Refin: false
             Refout: false
             Xorout: 0x55
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc9(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-8/MAXIM    x8+x5+x4+1
             Poly: 0x31
             Init: 0x00
             Refin: true
             Refout: true
             Xorout: 0x00
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc10(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-8/ROHC    x8+x2+x+1
             Poly: 0x07
             Init: 0xFF
             Refin: true
             Refout: true
             Xorout: 0x00
            *************************************************************************
        </member>
        <member name="F:RRQMCore.Data.Crc.table">
            Z1协议校验码计算
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc11(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Crc11
            </summary>
            <param name="buffer"></param>
            <param name="start"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc12(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-12    x16+x12+x5+1
             Poly: 0x80
             Init: 0x0000
             Refin: true
             Refout: true
             Xorout: 0x0000
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc13(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-16/CCITT    x16+x12+x5+1
             Poly: 0x1021
             Init: 0x0000
             Refin: true
             Refout: true
             Xorout: 0x0000
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc14(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-16/CCITT FALSE    x16+x12+x5+1
             Poly: 0x1021
             Init: 0xFFFF
             Refin: false
             Refout: false
             Xorout: 0x0000
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc15(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-16/DNP    x16+x13+x12+x11+x10+x8+x6+x5+x2+1
             Poly: 0x3D65
             Init: 0x0000
             Refin: true
             Refout: true
             Xorout: 0xFFFF
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc16(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-16/IBM    x16+x15+x2+1
             Poly: 0x8005
             Init: 0x0000
             Refin: true
             Refout: true
             Xorout: 0x0000
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc17(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-16/MAXIM    x16+x15+x2+1
             Poly: 0x8005
             Init: 0x0000
             Refin: true
             Refout: true
             Xorout: 0xFFFF
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc18(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-16/MODBUS    x16+x15+x2+1
             Poly: 0x8005
             Init: 0xFFFF
             Refin: true
             Refout: true
             Xorout: 0x0000
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc19(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-16/USB    x16+x15+x2+1
             Poly: 0x8005
             Init: 0xFFFF
             Refin: true
             Refout: true
             Xorout: 0xFFFF
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc20(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-16/X25    x16+x12+x5+1
             Poly: 0x1021
             Init: 0xFFFF
             Refin: true
             Refout: true
             Xorout: 0xFFFF
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc21(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC-16/XMODEM    x16+x12+x5+1
             Poly: 0x1021
             Init: 0x0000
             Refin: false
             Refout: false
             Xorout: 0x0000
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc22(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC32    x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1
             Poly: 0x04C11DB7
             Init: 0xFFFFFFFF
             Refin: true
             Refout: true
             Xorout: 0xFFFFFFFF
            *************************************************************************
        </member>
        <member name="M:RRQMCore.Data.Crc.Crc23(System.Byte[],System.Int32,System.Int32)">
             **********************************************************************
             Name: CRC32/MPEG-2    x32+x26+x23+x22+x16+x12+x11+x10+x8+x7+x5+x4+x2+x+1
             Poly: 0x04C11DB7
             Init: 0xFFFFFFFF
             Refin: false
             Refout: false
             Xorout: 0x00000000
            *************************************************************************
        </member>
        <member name="T:RRQMCore.Data.Security.AuthorizedHelper">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="M:RRQMCore.Data.Security.AuthorizedHelper.u32u4234u234u5u88ds8sd8hjjrs8djhc(RRQMCore.Data.Security.CNMD)">
            <summary>
            09jsz9j213j1j9sj92j9sosj9sj
            </summary>
        </member>
        <member name="T:RRQMCore.Data.Security.DataLock">
            <summary>
            数据锁,用于加密或解密
            </summary>
        </member>
        <member name="M:RRQMCore.Data.Security.DataLock.EncryptDES(System.Byte[],System.String)">
            <summary>
            使用3DES加密
            </summary>
            <param name="data">待加密字节</param>
            <param name="encryptKey">加密口令（长度为8）</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Data.Security.DataLock.DecryptDES(System.Byte[],System.String)">
            <summary>
            使用3DES解密
            </summary>
            <param name="data">待解密字节</param>
            <param name="decryptionKey">解密口令（长度为8）</param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Data.Security.T32u4234u234u5u88ds8sd8hjjrs8djhc">
            <summary>
            此u32u4234u234u5u88ds8sd8hjjrs8djhc
            </summary>
        </member>
        <member name="T:RRQMCore.Data.XML.XmlTool">
            <summary>
            xml主类
            </summary>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path">文件路径，包含文件名</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.AttributeStorage(System.String,System.String,System.String)">
            <summary>
            单节点，单属性储存
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性名</param>
            <param name="Attribute_value">属性值</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.AttributeStorage(System.String,System.String[],System.String[])">
            <summary>
            单节点，多属性存储
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性集合</param>
            <param name="Attribute_value">属性值集合</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.AttributeStorage(System.String[],System.String[],System.String[])">
            <summary>
            单节点，单属性多集合存储
            </summary>
            <param name="NodeName">节点集合</param>
            <param name="Attribute_name">属性名集合</param>
            <param name="Attribute_value">属性值集合</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.AttributeStorage(System.String[],System.String[],System.Int32,System.String[][])">
            <summary>
            多节点，多属性，多集合存储
            </summary>
            <param name="NodeName">节点集合</param>
            <param name="Attribute_name">属性集合</param>
            <param name="AttributeNumber">每个节点的属性数量</param>
            <param name="Attribute_value">属性值集合</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.NodeStorage(System.String,System.String)">
            <summary>
            节点值存储
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Text">文本</param>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchNode(System.String)">
            <summary>
            通过节点取值
            </summary>
            <param name="NodeName">节点名</param>
            <returns>取值失败返回null</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchNumber(System.String,System.String)">
            <summary>
            查找数字
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性名</param>
            <returns>取值失败返回0</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchWords(System.String,System.String)">
            <summary>
            查找属性值
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性名</param>
            <returns>取值失败返回null</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchBoolean(System.String,System.String)">
            <summary>
            查找布尔值
            </summary>
            <param name="NodeName">节点名</param>
            <param name="Attribute_name">属性值</param>
            <returns>返回查找结果，查询失败返回false</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchWords(System.String[],System.String[])">
            <summary>
            查找属性值集合
            </summary>
            <param name="NodeName">节点名集合</param>
            <param name="Attribute_name">属性名集合</param>
            <returns>文件不在返回null，单个属性不在返回“空”</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchWords(System.String,System.String,System.String)">
            <summary>
            通过确切属性值，属性名，查找其他属性值
            </summary>
            <param name="Attribute_name1">已知属性名</param>
            <param name="Attribute_value">已知属性值</param>
            <param name="Attribute_name2">待查属性名</param>
            <returns>待查属性值</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchAllAttributes(System.String)">
            <summary>
            查找节点的所有属性值
            </summary>
            <param name="NodeName">节点 名</param>
            <returns>返回查找键值对，查询失败返回null</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.SearchBoolean(System.String,System.String,System.String)">
            <summary>
            通过确切属性值，属性名，查找其他属性的布尔值
            </summary>
            <param name="Attribute_name1">已知属性名</param>
            <param name="Attribute_value">已知属性值</param>
            <param name="Attribute_name2">待查属性名</param>
            <returns>待查布尔值，失败返回false</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.RemoveNode(System.String)">
            <summary>
            按节点名移除节点
            </summary>
            <param name="NodeName">节点名</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.RemoveNode(System.String,System.String)">
            <summary>
            按确切的属性名，属性值删除节点
            </summary>
            <param name="Attribute_name">属性名</param>
            <param name="Attribute_value">属性值</param>
            <returns>是否移除成功</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.RemoveNode(System.String,System.DateTime)">
            <summary>
            如果节点中有日期属性，把日期之前的节点都删除
            </summary>
            <param name="Attribute_name">属性名</param>
            <param name="dateTime">截止时间</param>
            <returns>是否删除成功</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.NodeExist(System.String)">
            <summary>
            判断节点是否存在
            </summary>
            <param name="NodeName">节点名</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RRQMCore.Data.XML.XmlTool.RemoveAllNode">
            <summary>
            删除所有节点，不包含子节点
            </summary>
            <returns>返回删除是否成功</returns>
        </member>
        <member name="T:RRQMCore.Dependency.DataValidationAttribute">
            <summary>
            依赖属性数据验证
            </summary>
        </member>
        <member name="T:RRQMCore.Dependency.IContainer">
            <summary>
            注入容器接口
            </summary>
        </member>
        <member name="M:RRQMCore.Dependency.IContainer.RegisterTransient``2">
            <summary>
            注册临时映射
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:RRQMCore.Dependency.IContainer.RegisterSingleton``2(``1)">
            <summary>
            注册单例
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <param name="singleton"></param>
        </member>
        <member name="M:RRQMCore.Dependency.IContainer.RegisterSingleton``2">
            <summary>
            注册单例
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:RRQMCore.Dependency.IContainer.Resolve``1">
            <summary>
            创建类型对应的实例
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Dependency.IContainer.Resolve(System.Type)">
            <summary>
            创建类型对应的实例
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Dependency.Container">
            <summary>
            IOC容器
            </summary>
        </member>
        <member name="M:RRQMCore.Dependency.Container.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.Dependency.Container.RegisterTransient``2">
            <summary>
            <inheritdoc/>
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:RRQMCore.Dependency.Container.RegisterSingleton``2(``1)">
            <summary>
            <inheritdoc/>
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <param name="singleton"></param>
        </member>
        <member name="M:RRQMCore.Dependency.Container.RegisterSingleton``2">
            <summary>
            <inheritdoc/>
            </summary>
            <typeparam name="TInterface"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:RRQMCore.Dependency.Container.Create(System.Type)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="interfaceType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Dependency.Container.Resolve``1">
            <summary>
            <inheritdoc/>
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Dependency.Container.Resolve(System.Type)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Dependency.DependencyProperty">
            <summary>
            依赖项属性
            </summary>
        </member>
        <member name="P:RRQMCore.Dependency.DependencyProperty.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:RRQMCore.Dependency.DependencyProperty.Owner">
            <summary>
            所属类型
            </summary>
        </member>
        <member name="P:RRQMCore.Dependency.DependencyProperty.ValueType">
            <summary>
            值类型
            </summary>
        </member>
        <member name="P:RRQMCore.Dependency.DependencyProperty.DefauleValue">
            <summary>
            默认值
            </summary>
        </member>
        <member name="M:RRQMCore.Dependency.DependencyProperty.Register(System.String,System.Type,System.Type,System.Object)">
            <summary>
            注册依赖项属性
            </summary>
            <param name="propertyName"></param>
            <param name="valueType"></param>
            <param name="owner"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Dependency.IRRQMDependencyObject">
            <summary>
            依赖对象接口
            </summary>
        </member>
        <member name="M:RRQMCore.Dependency.IRRQMDependencyObject.GetValue(RRQMCore.Dependency.DependencyProperty)">
            <summary>
            获取依赖注入的值
            </summary>
            <param name="dependencyProperty"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Dependency.IRRQMDependencyObject.GetValue``1(RRQMCore.Dependency.DependencyProperty)">
            <summary>
            获取依赖注入的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dependencyProperty"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Dependency.IRRQMDependencyObject.SetValue(RRQMCore.Dependency.DependencyProperty,System.Object)">
            <summary>
            设置依赖注入的值
            </summary>
            <param name="dependencyProperty"></param>
            <param name="value"></param>
        </member>
        <member name="T:RRQMCore.Dependency.RRQMDependencyObject">
            <summary>
            依赖项对象
            </summary>
        </member>
        <member name="M:RRQMCore.Dependency.RRQMDependencyObject.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:RRQMCore.Dependency.RRQMDependencyObject.disposedValue">
            <summary>
            判断是否已释放。
            </summary>
        </member>
        <member name="M:RRQMCore.Dependency.RRQMDependencyObject.GetValue(RRQMCore.Dependency.DependencyProperty)">
            <summary>
            获取依赖注入的值
            </summary>
            <param name="dependencyProperty"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Dependency.RRQMDependencyObject.GetValue``1(RRQMCore.Dependency.DependencyProperty)">
            <summary>
            获取依赖注入的值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dependencyProperty"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Dependency.RRQMDependencyObject.SetValue(RRQMCore.Dependency.DependencyProperty,System.Object)">
            <summary>
            设置依赖注入的值
            </summary>
            <param name="dependencyProperty"></param>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.Dependency.RRQMDependencyObject.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMCore.Dependency.RRQMDependencyObject.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:RRQMCore.Diagnostics.TimeMeasurer">
            <summary>
            时间测量器
            </summary>
        </member>
        <member name="M:RRQMCore.Diagnostics.TimeMeasurer.Run(System.Action)">
            <summary>
            开始运行
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Diagnostics.TimeMeasurer.RunAsync(System.Action)">
            <summary>
            异步执行
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Operation">
            <summary>
            操作
            </summary>
        </member>
        <member name="F:RRQMCore.Operation.None">
            <summary>
            无任何状态
            </summary>
        </member>
        <member name="F:RRQMCore.Operation.Handled">
            <summary>
            已处理
            </summary>
        </member>
        <member name="F:RRQMCore.Operation.Permit">
            <summary>
            允许该操作
            </summary>
        </member>
        <member name="T:RRQMCore.RRQMEventArgs">
            <summary>
            若汝棋茗所有事件基类
            </summary>
        </member>
        <member name="P:RRQMCore.RRQMEventArgs.IsPermitOperation">
            <summary>
            是否允许操作
            </summary>
        </member>
        <member name="P:RRQMCore.RRQMEventArgs.Handled">
            <summary>
            是否已处理
            </summary>
        </member>
        <member name="P:RRQMCore.RRQMEventArgs.Operation">
            <summary>
            操作类型。
            </summary>
        </member>
        <member name="M:RRQMCore.RRQMEventArgs.AddOperation(RRQMCore.Operation)">
            <summary>
            添加操作
            </summary>
            <param name="operation"></param>
        </member>
        <member name="M:RRQMCore.RRQMEventArgs.RemoveOperation(RRQMCore.Operation)">
            <summary>
            移除操作
            </summary>
            <param name="operation"></param>
        </member>
        <member name="T:RRQMCore.RRQMException">
            <summary>
            若汝棋茗程序集异常类基类
            </summary>
        </member>
        <member name="M:RRQMCore.RRQMException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.RRQMException.#ctor(RRQMCore.ResType,System.Object[])">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.RRQMException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMCore.RRQMException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMCore.RRQMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMCore.MessageRegisteredException">
            <summary>
            消息已注册
            </summary>
        </member>
        <member name="M:RRQMCore.MessageRegisteredException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="mes"></param>
        </member>
        <member name="T:RRQMCore.MessageNotFoundException">
            <summary>
            未找到消息异常类
            </summary>
        </member>
        <member name="M:RRQMCore.MessageNotFoundException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="mes"></param>
        </member>
        <member name="T:RRQMCore.LicenceKeyInvalidException">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:RRQMCore.LicenceKeyInvalidException.i">
            <summary>
            7ashd7ashd7ashdahsd77
            </summary>
        </member>
        <member name="M:RRQMCore.LicenceKeyInvalidException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.LicenceKeyInvalidException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMCore.LicenceKeyInvalidException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMCore.LicenceKeyInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMCore.Exceptions.ThrowHelper">
            <summary>
            异常助手
            </summary>
        </member>
        <member name="P:RRQMCore.Exceptions.ThrowHelper.Default">
            <summary>
            默认实例
            </summary>
        </member>
        <member name="T:RRQMCore.Extensions.RRQMCoreExtensions">
            <summary>
            辅助扩展类
            </summary>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Message(RRQMCore.Log.ILog,System.String)">
            <summary>
            输出消息日志
            </summary>
            <param name="logger"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Warning(RRQMCore.Log.ILog,System.String)">
            <summary>
            输出警示日志
            </summary>
            <param name="logger"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Error(RRQMCore.Log.ILog,System.String)">
            <summary>
            输出错误日志
            </summary>
            <param name="logger"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Exception(RRQMCore.Log.ILog,System.Exception)">
            <summary>
            输出异常日志
            </summary>
            <param name="logger"></param>
            <param name="ex"></param>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Message(RRQMCore.Log.ILog,System.Object,System.String)">
            <summary>
            输出消息日志
            </summary>
            <param name="logger"></param>
            <param name="source"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Warning(RRQMCore.Log.ILog,System.Object,System.String)">
            <summary>
            输出警示日志
            </summary>
            <param name="logger"></param>
            <param name="source"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Error(RRQMCore.Log.ILog,System.Object,System.String)">
            <summary>
            输出错误日志
            </summary>
            <param name="logger"></param>
            <param name="source"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Exception(RRQMCore.Log.ILog,System.Object,System.Exception)">
            <summary>
            输出异常日志
            </summary>
            <param name="logger"></param>
            <param name="source"></param>
            <param name="ex"></param>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToJsonBytes(System.Object)">
            <summary>
            序列化成Json数据
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToJsonString(System.Object)">
            <summary>
            转换为json字符串。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToJsonObject``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
             反序列化成Json数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="len"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToJsonObject``1(System.Byte[])">
            <summary>
             反序列化成Json数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToJsonObject``1(System.String)">
            <summary>
             反序列化成Json数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToJsonObject(System.String,System.Type)">
            <summary>
            反序列化成Json数据
            </summary>
            <param name="jsonString"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.HitStringCount(System.String,System.String)">
            <summary>
            判断字符串compare 在 input字符串中出现的次数
            </summary>
            <param name="input">源字符串</param>
            <param name="compare">用于比较的字符串</param>
            <returns>字符串compare 在 input字符串中出现的次数</returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ParseToType(System.String,System.Type)">
            <summary>
            将字符转换为对应类型。
            </summary>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.SplitFirst(System.String,System.Char)">
            <summary>
            只按第一个匹配项分割
            </summary>
            <param name="str"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Split(System.String,System.String)">
            <summary>
            按字符串分割
            </summary>
            <param name="str"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.SplitLast(System.String,System.Char)">
            <summary>
            只按最后一个匹配项分割
            </summary>
            <param name="str"></param>
            <param name="split"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Format(System.String,System.Object[])">
            <summary>
            按格式填充
            </summary>
            <param name="str"></param>
            <param name="ps"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToSha1(System.String,System.Text.Encoding)">
            <summary>
            转换为SHA1。
            </summary>
            <param name="value"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToUTF8Bytes(System.String)">
            <summary>
            转换为UTF-8数据，效果等于<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ByHexStringToBytes(System.String,System.String)">
            <summary>
            将16进制的字符转换为数组。
            </summary>
            <param name="hexString"></param>
            <param name="splite"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ByHexStringToInt32(System.String)">
            <summary>
            将16进制的字符转换为int32。
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ByBase64ToBytes(System.String)">
            <summary>
            从Base64转到数组。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToBase64(System.Byte[])">
            <summary>
            转Base64。
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.IndexOfInclude(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            索引包含数组
            </summary>
            <param name="srcByteArray"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="subByteArray"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.IndexOfFirst(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            索引第一个包含数组的索引位置，例如：在{0,1,2,3,1,2,3}中索引{2,3}，则返回3。
            </summary>
            <param name="srcByteArray"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="subByteArray"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ByBytesToHexString(System.Byte[],System.Int32,System.Int32,System.String)">
            <summary>
            字节数组转16进制字符
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="splite"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.GetAttribute``1(System.Enum)">
            <summary>
            获取自定义attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumObj"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.ToGMTString(System.DateTime,System.String)">
            <summary>
            格林尼治标准时间
            </summary>
            <param name="dt"></param>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.Clear``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>
            清除所有成员
            </summary>
            <typeparam name="T"></typeparam>
            <param name="queue"></param>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.GetBit(System.Byte,System.Int16)">
            <summary>
            获取字节中的指定Bit的值
            </summary>
            <param name="this">字节</param>
            <param name="index">Bit的索引值(0-7)</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.SetBit(System.Byte,System.Int16,System.Int32)">
            <summary>
            设置字节中的指定Bit的值
            </summary>
            <param name="this">字节</param>
            <param name="index">Bit的索引值(0-7)</param>
            <param name="bitvalue">Bit值(0,1)</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.GetRefOutType(System.Type)">
            <summary>
            获取类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.GetDefault(System.Type)">
            <summary>
            获取默认值
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.IsStruct(System.Type)">
            <summary>
            判断为结构体
            </summary>
            <param name="targetType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.IsNullableType(System.Type)">
            <summary>
            判断该类型是否为可空类型
            </summary>
            <param name="theType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Extensions.RRQMCoreExtensions.TryParseToType(System.String,System.Type,System.Object@,System.Char[])">
            <summary> 
              将字符串格式化成指定的数据类型
            </summary> 
            <param name="str"></param> 
            <param name="type"></param>
             <param name="value"></param>
             <param name="splits"></param> 
               <returns></returns> 
        </member>
        <member name="T:RRQMCore.IO.BlockReadStream">
            <summary>
            阻塞式单项读取流。
            </summary>
        </member>
        <member name="M:RRQMCore.IO.BlockReadStream.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMCore.IO.BlockReadStream.CanRead">
            <summary>
            可读
            </summary>
        </member>
        <member name="P:RRQMCore.IO.BlockReadStream.CanSeek">
            <summary>
            不可使用
            </summary>
        </member>
        <member name="P:RRQMCore.IO.BlockReadStream.Length">
            <summary>
            不可使用
            </summary>
        </member>
        <member name="P:RRQMCore.IO.BlockReadStream.Position">
            <summary>
             不可使用
            </summary>
        </member>
        <member name="P:RRQMCore.IO.BlockReadStream.ReadTimeout">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMCore.IO.BlockReadStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            阻塞读取。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.IO.BlockReadStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            不可使用
            </summary>
            <param name="offset"></param>
            <param name="origin"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.IO.BlockReadStream.SetLength(System.Int64)">
            <summary>
            不可使用
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:RRQMCore.IO.BlockReadStream.Input(System.Byte[],System.Int32,System.Int32)">
            <summary>
            传输输入.
            必须以length为0结束。读取端会超时。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.IO.BlockReadStream.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:RRQMCore.IO.ConsoleAction">
            <summary>
            控制台行为
            </summary>
        </member>
        <member name="M:RRQMCore.IO.ConsoleAction.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="helpOrder">帮助信息指令，如："h|help|?"</param>
        </member>
        <member name="M:RRQMCore.IO.ConsoleAction.ShowAll">
            <summary>
            显示所有注册指令
            </summary>
        </member>
        <member name="P:RRQMCore.IO.ConsoleAction.HelpOrder">
            <summary>
            帮助信息指令
            </summary>
        </member>
        <member name="M:RRQMCore.IO.ConsoleAction.Add(System.String,System.String,System.Action)">
            <summary>
            添加
            </summary>
            <param name="order">指令，多个指令用“|”分割</param>
            <param name="description">描述</param>
            <param name="action"></param>
        </member>
        <member name="E:RRQMCore.IO.ConsoleAction.OnException">
            <summary>
            执行异常
            </summary>
        </member>
        <member name="M:RRQMCore.IO.ConsoleAction.Run(System.String)">
            <summary>
            执行，返回值仅表示是否有这个指令，异常获取请使用<see cref="E:RRQMCore.IO.ConsoleAction.OnException"/>
            </summary>
            <param name="order"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.IO.VAction.#ctor(System.String,System.String,System.Action)">
            <summary>
            构造函数
            </summary>
            <param name="action"></param>
            <param name="description"></param>
            <param name="fullOrder"></param>
        </member>
        <member name="T:RRQMCore.IO.FileControler">
            <summary>
            文件操作
            </summary>
        </member>
        <member name="M:RRQMCore.IO.FileControler.GetFileHash(System.String)">
            <summary>
            获得文件Hash值
            </summary>
            <param name="filePath">文件路径</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.IO.FileControler.GetStreamHash(System.IO.Stream)">
            <summary>
            获得流Hash值
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.IO.FileControler.GetFileHash(System.String,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            获得文件Hash值
            </summary>
            <param name="filePath">文件路径</param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.IO.FileControler.GetStreamHash(System.IO.Stream,System.Security.Cryptography.HashAlgorithm)">
            <summary>
            获得流Hash值
            </summary>
            <param name="stream"></param>
            <param name="hash"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Log.ConsoleLogger">
            <summary>
            控制台日志记录器
            </summary>
        </member>
        <member name="M:RRQMCore.Log.ConsoleLogger.Debug(RRQMCore.Log.LogType,System.Object,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
        </member>
        <member name="M:RRQMCore.Log.ConsoleLogger.Debug(RRQMCore.Log.LogType,System.Object,System.String,System.Exception)">
            <summary>
            记录日志
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:RRQMCore.Log.FileLogger">
            <summary>
            文件日志记录器
            <para>会在指定目录下，生成logs文件夹，然后按[yyyy-MM-dd].log的形式，每日生成日志</para>
            </summary>
        </member>
        <member name="M:RRQMCore.Log.FileLogger.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="rootPath">日志根目录</param>
        </member>
        <member name="M:RRQMCore.Log.FileLogger.Debug(RRQMCore.Log.LogType,System.Object,System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
        </member>
        <member name="M:RRQMCore.Log.FileLogger.Debug(RRQMCore.Log.LogType,System.Object,System.String,System.Exception)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="T:RRQMCore.Log.ILog">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="M:RRQMCore.Log.ILog.Debug(RRQMCore.Log.LogType,System.Object,System.String,System.Exception)">
            <summary>
            日志记录
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:RRQMCore.Log.ILog.Debug(RRQMCore.Log.LogType,System.Object,System.String)">
            <summary>
            日志记录
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
        </member>
        <member name="T:RRQMCore.Log.LoggerGroup">
            <summary>
            一组日志记录器
            </summary>
        </member>
        <member name="M:RRQMCore.Log.LoggerGroup.#ctor(RRQMCore.Log.ILog[])">
            <summary>
            构造函数
            </summary>
            <param name="logs"></param>
        </member>
        <member name="M:RRQMCore.Log.LoggerGroup.Debug(RRQMCore.Log.LogType,System.Object,System.String,System.Exception)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:RRQMCore.Log.LoggerGroup.Debug(RRQMCore.Log.LogType,System.Object,System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
        </member>
        <member name="M:RRQMCore.Log.LoggerGroup.Debug``1(RRQMCore.Log.LogType,System.Object,System.String,System.Exception)">
            <summary>
            使用指定类型的记录器输出
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:RRQMCore.Log.LoggerGroup.Debug``1(RRQMCore.Log.LogType,System.Object,System.String)">
            <summary>
            使用指定类型的记录器输出
            </summary>
            <param name="logType"></param>
            <param name="source"></param>
            <param name="message"></param>
        </member>
        <member name="T:RRQMCore.Log.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:RRQMCore.Log.LogType.Message">
            <summary>
            一般消息
            </summary>
        </member>
        <member name="F:RRQMCore.Log.LogType.Warning">
            <summary>
            警示消息
            </summary>
        </member>
        <member name="F:RRQMCore.Log.LogType.Error">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="T:RRQMCore.Pool.IObjectPool">
            <summary>
            对象池接口
            </summary>
        </member>
        <member name="P:RRQMCore.Pool.IObjectPool.FreeSize">
            <summary>
            可使用数量
            </summary>
        </member>
        <member name="M:RRQMCore.Pool.IObjectPool.Clear">
            <summary>
            清空池中对象
            </summary>
        </member>
        <member name="T:RRQMCore.Pool.IPoolObject">
            <summary>
            对象池单位接口
            </summary>
        </member>
        <member name="P:RRQMCore.Pool.IPoolObject.NewCreate">
            <summary>
            是否为新建对象
            </summary>
        </member>
        <member name="M:RRQMCore.Pool.IPoolObject.Create">
            <summary>
            初创建对象
            </summary>
        </member>
        <member name="M:RRQMCore.Pool.IPoolObject.Recreate">
            <summary>
            重新创建对象
            </summary>
        </member>
        <member name="M:RRQMCore.Pool.IPoolObject.Destroy">
            <summary>
            销毁对象
            </summary>
        </member>
        <member name="T:RRQMCore.Pool.ObjectPool`1">
            <summary>
            对象池
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMCore.Pool.ObjectPool`1.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="capacity"></param>
        </member>
        <member name="M:RRQMCore.Pool.ObjectPool`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMCore.Pool.ObjectPool`1.AutoCreate">
            <summary>
            是否自动生成
            </summary>
        </member>
        <member name="P:RRQMCore.Pool.ObjectPool`1.Capacity">
            <summary>
            对象池容量
            </summary>
        </member>
        <member name="P:RRQMCore.Pool.ObjectPool`1.FreeSize">
            <summary>
            可使用（创建）数量
            </summary>
        </member>
        <member name="M:RRQMCore.Pool.ObjectPool`1.Clear">
            <summary>
            清除池中所有对象
            </summary>
        </member>
        <member name="M:RRQMCore.Pool.ObjectPool`1.GetObject">
            <summary>
            获取对象T
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Pool.ObjectPool`1.GetAllObject">
            <summary>
            获取所有对象
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Pool.ObjectPool`1.PreviewGetObject">
            <summary>
            预获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Pool.ObjectPool`1.DestroyObject(`0)">
            <summary>
            注销对象
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:RRQMCore.Pool.ObjectPool`1.Dispose">
            <summary>
            释放对象
            </summary>
        </member>
        <member name="T:RRQMCore.Reflection.ExpressionMapper">
            <summary>
            表达式复制
            </summary>
        </member>
        <member name="M:RRQMCore.Reflection.ExpressionMapper.Trans``2(``0)">
            <summary>
            字典缓存表达式树
            </summary>
        </member>
        <member name="T:RRQMCore.Reflection.Method">
            <summary>
            表示方法
            </summary>
        </member>
        <member name="P:RRQMCore.Reflection.Method.ReturnType">
            <summary>
            返回值类型。
            <para>当方法为void或task时，为null</para>
            <para>当方法为task泛型时，为泛型元素类型</para>
            </summary>
        </member>
        <member name="P:RRQMCore.Reflection.Method.HasReturn">
            <summary>
            是否具有返回值
            </summary>
        </member>
        <member name="F:RRQMCore.Reflection.Method.invoker">
            <summary>
            方法执行委托
            </summary>
        </member>
        <member name="P:RRQMCore.Reflection.Method.Name">
            <summary>
            获取方法名
            </summary>
        </member>
        <member name="P:RRQMCore.Reflection.Method.Info">
            <summary>
            方法信息
            </summary>
        </member>
        <member name="P:RRQMCore.Reflection.Method.IsByRef">
            <summary>
            是否有引用类型
            </summary>
        </member>
        <member name="M:RRQMCore.Reflection.Method.#ctor(System.Reflection.MethodInfo)">
            <summary>
            方法
            </summary>
            <param name="method">方法信息</param>
        </member>
        <member name="M:RRQMCore.Reflection.Method.Invoke(System.Object,System.Object[])">
            <summary>
            执行方法。
            <para>当方法为void或task时，会返回null</para>
            <para>当方法为task泛型时，会wait后的值</para>
            </summary>
            <param name="instance">实例</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Reflection.Method.CreateInvoker(System.Reflection.MethodInfo)">
            <summary>
            生成方法的调用委托
            </summary>
            <param name="method">方法成员信息</param>
            <exception cref="T:System.ArgumentException"></exception>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Reflection.Property">
            <summary>
            表示属性
            </summary>
        </member>
        <member name="F:RRQMCore.Reflection.Property.geter">
            <summary>
            获取器
            </summary>
        </member>
        <member name="F:RRQMCore.Reflection.Property.seter">
            <summary>
            设置器
            </summary>
        </member>
        <member name="P:RRQMCore.Reflection.Property.Name">
            <summary>
            获取属性名称
            </summary>
        </member>
        <member name="P:RRQMCore.Reflection.Property.Info">
            <summary>
            获取属性信息
            </summary>
        </member>
        <member name="M:RRQMCore.Reflection.Property.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            属性
            </summary>
            <param name="property">属性信息</param>
        </member>
        <member name="M:RRQMCore.Reflection.Property.GetValue(System.Object)">
            <summary>
            获取属性的值
            </summary>
            <param name="instance">实例</param>
            <exception cref="T:System.NotSupportedException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Reflection.Property.SetValue(System.Object,System.Object)">
            <summary>
            设置属性的值
            </summary>
            <param name="instance">实例</param>
            <param name="value">值</param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="F:RRQMCore.Reflection.Property.cached">
            <summary>
            类型属性的Setter缓存
            </summary>
        </member>
        <member name="M:RRQMCore.Reflection.Property.GetProperties(System.Type)">
            <summary>
            从类型的属性获取属性
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Reflection.PropertyGetter">
            <summary>
            表示属性的Getter
            </summary>
        </member>
        <member name="F:RRQMCore.Reflection.PropertyGetter.getFunc">
            <summary>
            get方法委托
            </summary>
        </member>
        <member name="M:RRQMCore.Reflection.PropertyGetter.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            表示属性的Getter
            </summary>
            <param name="property">属性</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMCore.Reflection.PropertyGetter.#ctor(System.Type,System.String)">
            <summary>
            表示类型字段或属性的Getter
            </summary>
            <param name="declaringType">声名属性的类型</param>
            <param name="propertyName">属性的名称</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMCore.Reflection.PropertyGetter.Invoke(System.Object)">
            <summary>
            获取属性的值
            </summary>
            <param name="instance">实例</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Reflection.PropertyGetter.CreateGetterDelegate(System.Type,System.String)">
            <summary>
            创建declaringType类型获取property值的委托
            </summary>
            <param name="declaringType">实例的类型</param>
            <param name="propertyName">属性的名称</param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Reflection.PropertySetter">
            <summary>
            表示属性的设置器
            </summary>
        </member>
        <member name="F:RRQMCore.Reflection.PropertySetter.setFunc">
            <summary>
            set方法委托
            </summary>
        </member>
        <member name="M:RRQMCore.Reflection.PropertySetter.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            表示属性的Getter
            </summary>
            <param name="property">属性</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMCore.Reflection.PropertySetter.Invoke(System.Object,System.Object)">
            <summary>
            设置属性的值
            </summary>
            <param name="instance">实例</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Reflection.PropertySetter.CreateSetterDelegate(System.Reflection.PropertyInfo)">
            <summary>
            创建属性的Set委托
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Run.EasyAction">
            <summary>
            易用组件
            </summary>
        </member>
        <member name="M:RRQMCore.Run.EasyAction.DelayRun(System.TimeSpan,System.Action)">
            <summary>
            延迟执行
            </summary>
            <param name="action"></param>
            <param name="delayTimeSpan"></param>
        </member>
        <member name="M:RRQMCore.Run.EasyAction.DelayRun(System.Int32,System.Action)">
            <summary>
            延迟执行
            </summary>
            <param name="action"></param>
            <param name="delay"></param>
        </member>
        <member name="M:RRQMCore.Run.EasyAction.TaskRun``1(``0,System.Action{``0})">
            <summary>
            Task异步
            </summary>
            <typeparam name="T"></typeparam>
            <param name="statu"></param>
            <param name="action"></param>
        </member>
        <member name="T:RRQMCore.Run.LoopAction">
            <summary>
            循环动作
            </summary>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.CreateLoopAction(System.Int32,System.TimeSpan,System.Action{RRQMCore.Run.LoopAction})">
            <summary>
            创建可循环操作体
            </summary>
            <param name="count">循环次数，设为-1时一直循环</param>
            <param name="interval">每次循环间隔</param>
            <param name="action">执行委托</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.CreateLoopAction(System.Int32,System.Int32,System.Action{RRQMCore.Run.LoopAction})">
            <summary>
            创建可循环操作体
            </summary>
            <param name="count">循环次数，设为-1时一直循环</param>
            <param name="intervalMS">每次循环间隔，毫秒</param>
            <param name="action">执行委托</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.CreateLoopAction(System.Int32,System.Action{RRQMCore.Run.LoopAction})">
            <summary>
            创建可循环操作体
            </summary>
            <param name="count">循环次数，设为-1时一直循环</param>
            <param name="action">执行委托</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.CreateLoopAction(System.TimeSpan,System.Action{RRQMCore.Run.LoopAction})">
            <summary>
            创建可循环操作体
            </summary>
            <param name="interval">每次循环间隔</param>
            <param name="action">执行委托</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.CreateLoopAction(System.Action{RRQMCore.Run.LoopAction})">
            <summary>
            创建可循环操作体
            </summary>
            <param name="action">执行委托</param>
            <returns></returns>
        </member>
        <member name="P:RRQMCore.Run.LoopAction.ExecutedCount">
            <summary>
            已执行次数
            </summary>
        </member>
        <member name="P:RRQMCore.Run.LoopAction.Interval">
            <summary>
            执行间隔
            </summary>
        </member>
        <member name="P:RRQMCore.Run.LoopAction.LoopCount">
            <summary>
            循环次数
            </summary>
        </member>
        <member name="P:RRQMCore.Run.LoopAction.ExecuteAction">
            <summary>
            执行委托
            </summary>
        </member>
        <member name="P:RRQMCore.Run.LoopAction.RunStatus">
            <summary>
            是否在运行
            </summary>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.Run">
            <summary>
            运行
            </summary>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.Rerun">
            <summary>
            重新运行
            </summary>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.RerunAsync">
            <summary>
            以异步重新运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.RunAsync">
            <summary>
            以异步运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.Pause">
            <summary>
            暂停
            </summary>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.Resume">
            <summary>
            回复
            </summary>
        </member>
        <member name="M:RRQMCore.Run.LoopAction.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:RRQMCore.Run.RunStatus">
            <summary>
            运行状态
            </summary>
        </member>
        <member name="F:RRQMCore.Run.RunStatus.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:RRQMCore.Run.RunStatus.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:RRQMCore.Run.RunStatus.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="F:RRQMCore.Run.RunStatus.Paused">
            <summary>
            Pause
            </summary>
        </member>
        <member name="F:RRQMCore.Run.RunStatus.Disposed">
            <summary>
            Disposed
            </summary>
        </member>
        <member name="T:RRQMCore.Run.AppMessageAttribute">
            <summary>
            注册为消息
            </summary>
        </member>
        <member name="M:RRQMCore.Run.AppMessageAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.Run.AppMessageAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="token"></param>
        </member>
        <member name="P:RRQMCore.Run.AppMessageAttribute.Token">
            <summary>
            标识
            </summary>
        </member>
        <member name="T:RRQMCore.Run.AppMessenger`1">
            <summary>
            消息通知类
            </summary>
        </member>
        <member name="P:RRQMCore.Run.AppMessenger`1.AllowMultiple">
            <summary>
            允许多广播注册
            </summary>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.CanSendMessage(System.String)">
            <summary>
            判断能否触发该消息，意味着该消息是否已经注册。
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Clear">
            <summary>
            清除所有消息
            </summary>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.GetAllMessage">
            <summary>
            获取所有消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.RegistAll">
            <summary>
            注册已加载程序集中直接或间接继承自IMassage接口的所有类，并创建新实例
            </summary>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Register(`0,System.Action)">
            <summary>
            注册消息
            </summary>
            <param name="messageObject"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Register``1">
            <summary>
            注册消息
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Register(`0,System.String,System.Action)">
            <summary>
            注册消息
            </summary>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="action"></param>
            <exception cref="T:RRQMCore.MessageRegisteredException"></exception>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Register(`0)">
            <summary>
            注册消息
            </summary>
            <param name="messageObject"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Register(`0,System.String,System.Reflection.MethodInfo)">
            <summary>
            注册消息
            </summary>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="methodInfo"></param>
            <exception cref="T:RRQMCore.MessageRegisteredException"></exception>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Register``1(`0,System.Action{``0})">
            <summary>
            注册消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="messageObject"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Register``1(`0,System.String,System.Action{``0})">
            <summary>
            注册消息
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="action"></param>
            <exception cref="T:RRQMCore.MessageRegisteredException"></exception>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Register``2(`0,System.String,System.Func{``0,``1})">
            <summary>
            注册
            </summary>
            <typeparam name="T">参数类型</typeparam>
            <typeparam name="TReturn">返回值类型</typeparam>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Register``1(`0,System.String,System.Func{``0})">
            <summary>
            注册
            </summary>
            <typeparam name="TReturn">返回值类型</typeparam>
            <param name="messageObject"></param>
            <param name="token"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Send(System.String,System.Object[])">
            <summary>
            发送消息
            </summary>
            <param name="token"></param>
            <param name="parameters"></param>
            <exception cref="T:RRQMCore.MessageNotFoundException"></exception>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Send``1(System.String,System.Object[])">
            <summary>
            发送消息，当多播时，只返回最后一个返回值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="token"></param>
            <param name="parameters"></param>
            <returns></returns>
            <exception cref="T:RRQMCore.MessageNotFoundException"></exception>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Unregister(`0)">
            <summary>
            卸载消息
            </summary>
            <param name="messageObject"></param>
        </member>
        <member name="M:RRQMCore.Run.AppMessenger`1.Unregister(System.String)">
            <summary>
            卸载消息
            </summary>
        </member>
        <member name="T:RRQMCore.Run.AppMessenger">
            <summary>
            消息通知类
            </summary>
        </member>
        <member name="P:RRQMCore.Run.AppMessenger.Default">
            <summary>
            默认单例实例
            </summary>
        </member>
        <member name="T:RRQMCore.Run.IMessage">
            <summary>
            消息接口
            </summary>
        </member>
        <member name="T:RRQMCore.Run.IWaitResult">
            <summary>
            等待返回类
            </summary>
        </member>
        <member name="P:RRQMCore.Run.IWaitResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:RRQMCore.Run.IWaitResult.Sign">
            <summary>
            标记
            </summary>
        </member>
        <member name="P:RRQMCore.Run.IWaitResult.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:RRQMCore.Run.WaitData`1">
            <summary>
            等待数据对象
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:RRQMCore.Run.WaitData`1.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:RRQMCore.Run.WaitData`1.WaitResult">
            <summary>
            等待数据结果
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Cancel">
            <summary>
            取消任务
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Dispose">
            <summary>
            回收
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Reset">
            <summary>
            Reset。
            设置<see cref="P:RRQMCore.Run.WaitData`1.WaitResult"/>为null。然后重置状态为<see cref="F:RRQMCore.Run.WaitDataStatus.Default"/>，waitHandle.Reset()
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Set">
            <summary>
            使等待的线程继续执行
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Set(`0)">
            <summary>
            使等待的线程继续执行
            </summary>
            <param name="waitResult">等待结果</param>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.SetCancellationToken(System.Threading.CancellationToken)">
            <summary>
            加载取消令箭
            </summary>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.SetResult(`0)">
            <summary>
            载入结果
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitData`1.Wait(System.Int32)">
            <summary>
            等待指定毫秒
            </summary>
            <param name="millisecond"></param>
        </member>
        <member name="T:RRQMCore.Run.WaitDataStatus">
            <summary>
            等待数据状态
            </summary>
        </member>
        <member name="F:RRQMCore.Run.WaitDataStatus.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:RRQMCore.Run.WaitDataStatus.SetRunning">
            <summary>
            收到信号运行
            </summary>
        </member>
        <member name="F:RRQMCore.Run.WaitDataStatus.Overtime">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:RRQMCore.Run.WaitDataStatus.Canceled">
            <summary>
            已取消
            </summary>
        </member>
        <member name="F:RRQMCore.Run.WaitDataStatus.Disposed">
            <summary>
            已释放
            </summary>
        </member>
        <member name="T:RRQMCore.Run.WaitHandlePool`1">
            <summary>
            等待处理数据
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMCore.Run.WaitHandlePool`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitHandlePool`1.Destroy(RRQMCore.Run.WaitData{`0})">
            <summary>
            销毁
            </summary>
            <param name="waitData"></param>
        </member>
        <member name="M:RRQMCore.Run.WaitHandlePool`1.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:RRQMCore.Run.WaitHandlePool`1.GetWaitData(`0,System.Boolean)">
            <summary>
             获取一个可等待对象
            </summary>
            <param name="result"></param>
            <param name="autoSign">设置为false时，不会生成sign</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Run.WaitHandlePool`1.SetRun(System.Int64)">
            <summary>
            让等待对象恢复运行
            </summary>
            <param name="sign"></param>
        </member>
        <member name="M:RRQMCore.Run.WaitHandlePool`1.SetRun(System.Int64,`0)">
            <summary>
            让等待对象恢复运行
            </summary>
            <param name="sign"></param>
            <param name="waitResult"></param>
        </member>
        <member name="M:RRQMCore.Run.WaitHandlePool`1.SetRun(`0)">
            <summary>
            让等待对象恢复运行
            </summary>
            <param name="waitResult"></param>
        </member>
        <member name="T:RRQMCore.Run.WaitResult">
            <summary>
            等待返回类
            </summary>
        </member>
        <member name="F:RRQMCore.Run.WaitResult.message">
            <summary>
            消息
            </summary>
        </member>
        <member name="F:RRQMCore.Run.WaitResult.sign">
            <summary>
            标记号
            </summary>
        </member>
        <member name="F:RRQMCore.Run.WaitResult.status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:RRQMCore.Run.WaitResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:RRQMCore.Run.WaitResult.Sign">
            <summary>
            标记号
            </summary>
        </member>
        <member name="P:RRQMCore.Run.WaitResult.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="T:RRQMCore.Serialization.RRQMNonSerializedAttribute">
            <summary>
            忽略的RRQN序列化
            </summary>
        </member>
        <member name="T:RRQMCore.Serialization.JsonParser">
            <summary>
            Json解析器。
            </summary>
        </member>
        <member name="M:RRQMCore.Serialization.JsonParser.FromJson``1(System.String)">
            <summary>
            从字符串到json
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Serialization.JsonWriter">
            <summary>
            Json解析器。
            </summary>
        </member>
        <member name="M:RRQMCore.Serialization.JsonWriter.ToJson(System.Object)">
            <summary>
            转换为Json
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Serialization.RRQMBinaryFormatter">
            <summary>
            该序列化以二进制方式进行，但是不支持接口、抽象类、继承类等成员的序列化。
            </summary>
        </member>
        <member name="M:RRQMCore.Serialization.RRQMBinaryFormatter.Serialize(RRQMCore.ByteManager.ByteBlock,System.Object)">
            <summary>
            序列化对象
            </summary>
            <param name="stream">流</param>
            <param name="graph">对象</param>
        </member>
        <member name="M:RRQMCore.Serialization.RRQMBinaryFormatter.Deserialize(System.Byte[],System.Int32,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.Serialization.SerializationType">
            <summary>
            序列化类型
            </summary>
        </member>
        <member name="F:RRQMCore.Serialization.SerializationType.RRQMBinary">
            <summary>
            若汝棋茗内置
            </summary>
        </member>
        <member name="F:RRQMCore.Serialization.SerializationType.Json">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:RRQMCore.Serialization.SerializationType.Xml">
            <summary>
            Xml
            </summary>
        </member>
        <member name="T:RRQMCore.Serialization.SerializeConvert">
            <summary>
            高性能序列化器
            </summary>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.RRQMBinarySerialize(RRQMCore.ByteManager.ByteBlock,System.Object)">
            <summary>
            RRQM二进制序列化对象
            </summary>
            <param name="stream"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.RRQMBinarySerialize(System.Object)">
            <summary>
            RRQM二进制序列化对象
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.RRQMBinaryDeserialize``1(System.Byte[],System.Int32)">
            <summary>
            反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.RRQMBinaryDeserialize(System.Byte[],System.Int32,System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.RRQMBinaryDeserialize``1(System.Byte[])">
            <summary>
            从Byte[]中反序列化
            </summary>
            <typeparam name="T"></typeparam>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlSerializeToString(System.Object,System.Text.Encoding)">
            <summary>
            Xml序列化数据对象
            </summary>
            <param name="obj">数据对象</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlSerializeToString(System.Object)">
            <summary>
            Xml序列化数据对象
            </summary>
            <param name="obj">数据对象</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlSerializeToBytes(System.Object)">
            <summary>
            Xml序列化数据对象
            </summary>
            <param name="obj">数据对象</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlSerializeToFile(System.Object,System.String)">
            <summary>
            Xml序列化至文件
            </summary>
            <param name="obj"></param>
            <param name="path"></param>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromBytes``1(System.Byte[])">
            <summary>
            Xml反序列化
            </summary>
            <typeparam name="T">反序列化类型</typeparam>
            <param name="datas">数据</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromBytes(System.Byte[],System.Type)">
            <summary>
            Xml反序列化
            </summary>
            <param name="datas"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromString``1(System.String,System.Text.Encoding)">
            <summary>
            Xml反序列化
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="xmlString">xml字符串</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromString``1(System.String)">
            <summary>
            Xml反序列化
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="xmlString">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:RRQMCore.Serialization.SerializeConvert.XmlDeserializeFromFile``1(System.String)">
            <summary>
            Xml反序列化
            </summary>
            <typeparam name="T">反序列化类型</typeparam>
            <param name="path">文件路径</param>
            <returns></returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonObjectId">
            <summary>
            Represents a BSON Oid (object id).
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonObjectId.Value">
            <summary>
            Gets or sets the value of the Oid.
            </summary>
            <value>The value of the Oid.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonObjectId"/> class.
            </summary>
            <param name="value">The Oid value.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized BSON data.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
            <summary>
            Gets or sets a value indicating whether binary data reading should be compatible with incorrect Json.NET 3.5 written binary.
            </summary>
            <value>
            	<c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
            <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
            <value>
            	<c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the BSON data to read.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> containing the BSON data to read.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader"/> class.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> containing the BSON data to read.</param>
            <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
            <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime"/> values from BSON.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.Stream"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream"/> is also closed.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating BSON data.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
            <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
            <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime"/> values to BSON.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to write to.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter"/> class.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> to write to.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.Stream"/> and also flushes the underlying stream.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteEnd(RRQMCore.XREF.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.Stream"/> is also closed.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value that represents a BSON object id.
            </summary>
            <param name="value">The Object ID value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
            <summary>
            Writes a BSON regex.
            </summary>
            <param name="pattern">The regex pattern.</param>
            <param name="options">The regex options.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.ConstructorHandling">
            <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.ConstructorHandling.Default">
            <summary>
            First attempt to use the public default constructor, then fall back to a single parameterized constructor, then to the non-public default constructor.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
            <summary>
            Json.NET will use a non-public default constructor before falling back to a parameterized constructor.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.BsonObjectIdConverter">
            <summary>
            Converts a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Bson.BsonObjectId"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.CustomCreationConverter`1">
            <summary>
            Creates a custom object.
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
            <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The created object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value>
            	<c>true</c> if this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.DateTimeConverterBase">
            <summary>
            Provides a base class for converting a <see cref="T:System.DateTime"/> to and from JSON.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.IsoDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from the ISO 8601 date format (e.g. <c>"2008-04-12T12:53Z"</c>).
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
            <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
            <value>The date time styles used when converting a date to and from JSON.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
            <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
            <value>The date time format used when converting a date to and from JSON.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
            <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
            <value>The culture used when converting a date to and from JSON.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from a JavaScript <c>Date</c> constructor (e.g. <c>new Date(52231943)</c>).
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.KeyValuePairConverter">
            <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to and from JSON.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.RegexConverter">
            <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex"/> to and from JSON and BSON.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.RegexConverter.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.RegexConverter.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter">
            <summary>
            Converts an <see cref="T:System.Enum"/> to and from its name string value.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
            <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            The default value is <c>false</c>.
            </summary>
            <value><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter.AllowIntegerValues">
            <summary>
            Gets or sets a value indicating whether integer values are allowed when deserializing.
            The default value is <c>true</c>.
            </summary>
            <value><c>true</c> if integers are allowed when deserializing; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter"/> class.
            </summary>
            <param name="camelCaseText"><c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.UnixDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from Unix epoch time
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.UnixDateTimeConverter.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.UnixDateTimeConverter.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Converters.VersionConverter">
            <summary>
            Converts a <see cref="T:System.Version"/> to and from a string (e.g. <c>"1.2.3.4"</c>).
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.VersionConverter.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.VersionConverter.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing property value of the JSON that is being converted.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.DateFormatHandling">
            <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
            <summary>
            Dates are written in the ISO 8601 format, e.g. <c>"2012-03-21T05:40Z"</c>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
            <summary>
            Dates are written in the Microsoft JSON format, e.g. <c>"\/Date(1198908717056)\/"</c>.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.DateParseHandling">
            <summary>
            Specifies how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DateParseHandling.None">
            <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DateParseHandling.DateTime">
            <summary>
            Date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed to <see cref="F:RRQMCore.XREF.Newtonsoft.Json.DateParseHandling.DateTime"/>.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.DateTimeZoneHandling">
            <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DateTimeZoneHandling.Local">
            <summary>
            Treat as local time. If the <see cref="T:System.DateTime"/> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DateTimeZoneHandling.Utc">
            <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime"/> object represents a local time, it is converted to a UTC.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
            <summary>
            Treat as a local time if a <see cref="T:System.DateTime"/> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime"/>, convert to a local time if a time zone is specified.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
            <summary>
            Time zone information should be preserved when converting.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.DefaultValueHandling">
            <summary>
            Specifies default value handling options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DefaultValueHandling.Include">
            <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DefaultValueHandling.Ignore">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that it is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable types; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute"/> on the property.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DefaultValueHandling.Populate">
            <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
            <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and set members to their default value when deserializing.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.FloatFormatHandling">
            <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/> with <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.FloatFormatHandling.String">
            <summary>
            Write special floating point values as strings in JSON, e.g. <c>"NaN"</c>, <c>"Infinity"</c>, <c>"-Infinity"</c>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.FloatFormatHandling.Symbol">
            <summary>
            Write special floating point values as symbols in JSON, e.g. <c>NaN</c>, <c>Infinity</c>, <c>-Infinity</c>.
            Note that this will produce non-valid JSON.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.FloatFormatHandling.DefaultValue">
            <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double"/> property, <c>null</c> for a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> property.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.FloatParseHandling">
            <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.FloatParseHandling.Double">
            <summary>
            Floating point numbers are parsed to <see cref="F:RRQMCore.XREF.Newtonsoft.Json.FloatParseHandling.Double"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.FloatParseHandling.Decimal">
            <summary>
            Floating point numbers are parsed to <see cref="F:RRQMCore.XREF.Newtonsoft.Json.FloatParseHandling.Decimal"/>.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Formatting">
            <summary>
            Specifies formatting options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Formatting.None">
            <summary>
            No special formatting is applied. This is the default.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Formatting.Indented">
            <summary>
            Causes child objects to be indented according to the <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.Indentation"/> and <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.IndentChar"/> settings.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.IArrayPool`1">
            <summary>
            Provides an interface for using pooled arrays.
            </summary>
            <typeparam name="T">The array type content.</typeparam>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.IArrayPool`1.Rent(System.Int32)">
            <summary>
            Rent an array from the pool. This array must be returned when it is no longer needed.
            </summary>
            <param name="minimumLength">The minimum required length of the array. The returned array may be longer.</param>
            <returns>The rented array from the pool. This array must be returned when it is no longer needed.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.IArrayPool`1.Return(`0[])">
            <summary>
            Return an array to the pool.
            </summary>
            <param name="array">The array that is being returned.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.IJsonLineInfo">
            <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if <see cref="P:RRQMCore.XREF.Newtonsoft.Json.IJsonLineInfo.LineNumber"/> and <see cref="P:RRQMCore.XREF.Newtonsoft.Json.IJsonLineInfo.LinePosition"/> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.IJsonLineInfo.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>The current line number or 0 if no line information is available (for example, when <see cref="M:RRQMCore.XREF.Newtonsoft.Json.IJsonLineInfo.HasLineInfo"/> returns <c>false</c>).</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.IJsonLineInfo.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>The current line position or 0 if no line information is available (for example, when <see cref="M:RRQMCore.XREF.Newtonsoft.Json.IJsonLineInfo.HasLineInfo"/> returns <c>false</c>).</value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonArrayAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
            <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
            <value><c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonArrayAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonArrayAttribute"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute"/> class with a flag indicating whether the array can contain null items.
            </summary>
            <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonArrayAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonConstructorAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> to use the specified constructor when deserializing that object.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.Id">
            <summary>
            Gets or sets the id.
            </summary>
            <value>The id.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The title.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
            <summary>
            Gets or sets the collection's items converter.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> described by <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.ItemConverterType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonContainer(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.NamingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonContainer(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.IsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
            <value>
            	<c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
            <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
            <value>
            	<c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonContainerAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonConvert">
            <summary>
            Provides methods for converting between .NET types and JSON types.
            </summary>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
            </example>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DefaultSettings">
            <summary>
            Gets or sets a function that creates default <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            Default settings are automatically used by serialization methods on <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConvert"/>,
            and <see cref="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.ToObject``1"/> and <see cref="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)"/> on <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            To serialize without using any default settings create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> with
            <see cref="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Create"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.True">
            <summary>
            Represents JavaScript's boolean value <c>true</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.False">
            <summary>
            Represents JavaScript's boolean value <c>false</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.Null">
            <summary>
            Represents JavaScript's <c>null</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.Undefined">
            <summary>
            Represents JavaScript's <c>undefined</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.PositiveInfinity">
            <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.NegativeInfinity">
            <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.NaN">
            <summary>
            Represents JavaScript's <c>NaN</c> as a string. This field is read-only.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.DateTime,RRQMCore.XREF.Newtonsoft.Json.DateFormatHandling,RRQMCore.XREF.Newtonsoft.Json.DateTimeZoneHandling)">
            <summary>
            Converts the <see cref="T:System.DateTime"/> to its JSON string representation using the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.DateFormatHandling"/> specified.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="format">The format the date will be converted to.</param>
            <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
            <returns>A JSON string representation of the <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
            <summary>
            Converts the <see cref="T:System.Boolean"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Char)">
            <summary>
            Converts the <see cref="T:System.Char"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Char"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
            <summary>
            Converts the <see cref="T:System.Enum"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Enum"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
            <summary>
            Converts the <see cref="T:System.Int32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
            <summary>
            Converts the <see cref="T:System.Int16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int16"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
            <summary>
            Converts the <see cref="T:System.UInt16"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt16"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
            <summary>
            Converts the <see cref="T:System.UInt32"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt32"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
            <summary>
            Converts the <see cref="T:System.Int64"/>  to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
            <summary>
            Converts the <see cref="T:System.UInt64"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.UInt64"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Single)">
            <summary>
            Converts the <see cref="T:System.Single"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Single"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Double)">
            <summary>
            Converts the <see cref="T:System.Double"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
            <summary>
            Converts the <see cref="T:System.Byte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Byte"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
            <summary>
            Converts the <see cref="T:System.SByte"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
            <summary>
            Converts the <see cref="T:System.Decimal"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.SByte"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
            <summary>
            Converts the <see cref="T:System.Guid"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Guid"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
            <summary>
            Converts the <see cref="T:System.TimeSpan"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.TimeSpan"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
            <summary>
            Converts the <see cref="T:System.Uri"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.String)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char,RRQMCore.XREF.Newtonsoft.Json.StringEscapeHandling)">
            <summary>
            Converts the <see cref="T:System.String"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="delimiter">The string delimiter character.</param>
            <param name="stringEscapeHandling">The string escape handling.</param>
            <returns>A JSON string representation of the <see cref="T:System.String"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.ToString(System.Object)">
            <summary>
            Converts the <see cref="T:System.Object"/> to its JSON string representation.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>A JSON string representation of the <see cref="T:System.Object"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
            <summary>
            Serializes the specified object to a JSON string.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,RRQMCore.XREF.Newtonsoft.Json.Formatting)">
            <summary>
            Serializes the specified object to a JSON string using formatting.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,RRQMCore.XREF.Newtonsoft.Json.Formatting,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Serializes the specified object to a JSON string using formatting and a collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of converters used while serializing.</param>
            <returns>A JSON string representation of the object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.Auto"/> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,RRQMCore.XREF.Newtonsoft.Json.Formatting,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using formatting and <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,RRQMCore.XREF.Newtonsoft.Json.Formatting,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Serializes the specified object to a JSON string using a type, formatting and <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The object to serialize.</param>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> used to serialize the object.
            If this is <c>null</c>, default serialization settings will be used.</param>
            <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.Auto"/> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
            <returns>
            A JSON string representation of the object.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
            <summary>
            Deserializes the JSON to a .NET object.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to a .NET object using <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="settings">
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
            <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
            <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the given anonymous type using <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be inferred from the anonymous type passed
            as a parameter.
            </typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="anonymousTypeObject">The anonymous type object.</param>
            <param name="settings">
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized anonymous type from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The JSON to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <typeparam name="T">The type of the object to deserialize to.</typeparam>
            <param name="value">The object to deserialize.</param>
            <param name="settings">
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Deserializes the JSON to the specified .NET type using a collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize.</param>
            <param name="converters">Converters to use while deserializing.</param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Deserializes the JSON to the specified .NET type using <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to deserialize.</param>
            <param name="type">The type of the object to deserialize to.</param>
            <param name="settings">
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
            <returns>The deserialized object from the JSON string.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
            <summary>
            Populates the object with values from the JSON string.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Populates the object with values from the JSON string using <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="value">The JSON to populate values from.</param>
            <param name="target">The target object to populate values onto.</param>
            <param name="settings">
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> used to deserialize the object.
            If this is <c>null</c>, default serialization settings will be used.
            </param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter">
            <summary>
            Converts an object to and from JSON.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverter.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverter.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonConverter.CanRead">
            <summary>
            Gets a value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> can read JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> can read JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonConverter.CanWrite">
            <summary>
            Gets a value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> can write JSON.
            </summary>
            <value><c>true</c> if this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> can write JSON; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter`1">
            <summary>
            Converts an object to and from JSON.
            </summary>
            <typeparam name="T">The object type to convert.</typeparam>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverter`1.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverter`1.WriteJson(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,`0,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverter`1.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverter`1.ReadJson(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type,`0,System.Boolean,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read. If there is no existing value then <c>null</c> will be used.</param>
            <param name="hasExistingValue">The existing value has a value.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverter`1.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            	<c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverterAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> to use the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> when serializing the member or class.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonConverterAttribute.ConverterType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonConverterAttribute.ConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> described by <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonConverterAttribute.ConverterType"/>.
            If <c>null</c>, the default constructor is used.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverterAttribute"/> class.
            </summary>
            <param name="converterType">Type of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.</param>
            <param name="converterParameters">Parameter list to use when constructing the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>. Can be <c>null</c>.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverterCollection">
            <summary>
            Represents a collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonDictionaryAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> how to serialize the collection.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonDictionaryAttribute"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonDictionaryAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonException"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonExtensionDataAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> to deserialize properties with no matching class member into the specified collection
            and write values during serialization.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonExtensionDataAttribute.WriteData">
            <summary>
            Gets or sets a value that indicates whether to write extension data when serializing the object.
            </summary>
            <value>
            	<c>true</c> to write extension data when serializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonExtensionDataAttribute.ReadData">
            <summary>
            Gets or sets a value that indicates whether to read extension data when deserializing the object.
            </summary>
            <value>
            	<c>true</c> to read extension data when deserializing the object; otherwise, <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonExtensionDataAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonExtensionDataAttribute"/> class.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonIgnoreAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> not to serialize the public field or public read/write property value.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> how to serialize the object.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
            <summary>
            Gets or sets the member serialization.
            </summary>
            <value>The member serialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute.#ctor(RRQMCore.XREF.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified member serialization.
            </summary>
            <param name="memberSerialization">The member serialization.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonObjectAttribute"/> class with the specified container Id.
            </summary>
            <param name="id">The container Id.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> to always serialize the member with the specified name.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> used when serializing the property's collection items.
            </summary>
            <value>The collection's items <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> described by <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonProperty(ItemConverterType = typeof(MyContainerConverter), ItemConverterParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy"/>.
            </summary>
            <value>The <see cref="T:System.Type"/> of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy"/>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyParameters">
            <summary>
            The parameter list to use when constructing the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy"/> described by <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.NamingStrategyType"/>.
            If <c>null</c>, the default constructor is used.
            When non-<c>null</c>, there must be a constructor defined in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy"/> that exactly matches the number,
            order, and type of these parameters.
            </summary>
            <example>
            <code>
            [JsonProperty(NamingStrategyType = typeof(MyNamingStrategy), NamingStrategyParameters = new object[] { 123, "Four" })]
            </code>
            </example>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
            <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
            <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
            <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.IsReference">
            <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
            <value>Whether this property's value is serialized as a reference.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.Required">
            <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
            <value>
            	A value indicating whether this property is required.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute"/> class with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State">
            <summary>
            Specifies the state of the reader.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Start">
            <summary>
            A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> read method has not been called.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Complete">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Property">
            <summary>
            Reader is at a property.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.ObjectStart">
            <summary>
            Reader is at the start of an object.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Object">
            <summary>
            Reader is in an object.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.ArrayStart">
            <summary>
            Reader is at the start of an array.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Array">
            <summary>
            Reader is in an array.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Closed">
            <summary>
            The <see cref="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.Close"/> method has been called.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.PostValue">
            <summary>
            Reader has just read a value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.ConstructorStart">
            <summary>
            Reader is at the start of a constructor.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Constructor">
            <summary>
            Reader is in a constructor.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Error">
            <summary>
            An error occurred that prevents the read operation from continuing.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Finished">
            <summary>
            The end of the file has been reached successfully.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.CurrentState">
            <summary>
            Gets the current reader state.
            </summary>
            <value>The current reader state.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.CloseInput">
            <summary>
            Gets or sets a value indicating whether the source should be closed when this reader is closed.
            </summary>
            <value>
            <c>true</c> to close the source when this reader is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.SupportMultipleContent">
            <summary>
            Gets or sets a value indicating whether multiple pieces of JSON content can
            be read from a continuous stream without erroring.
            </summary>
            <value>
            <c>true</c> to support reading multiple pieces of JSON content; otherwise <c>false</c>.
            The default is <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled when reading JSON.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.DateFormatString">
            <summary>
            Gets or sets how custom date formatted strings are parsed when reading JSON.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.Path">
            <summary>
            Gets the path of the current JSON token.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.Culture">
            <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.Read">
            <summary>
            Reads the next JSON token from the source.
            </summary>
            <returns><c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.ReadAsString">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the source as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.Skip">
            <summary>
            Skips the children of the current token.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.SetToken(RRQMCore.XREF.Newtonsoft.Json.JsonToken)">
            <summary>
            Sets the current token.
            </summary>
            <param name="newToken">The new token.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.SetToken(RRQMCore.XREF.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.SetToken(RRQMCore.XREF.Newtonsoft.Json.JsonToken,System.Object,System.Boolean)">
            <summary>
            Sets the current token and value.
            </summary>
            <param name="newToken">The new token.</param>
            <param name="value">The value.</param>
            <param name="updateIndex">A flag indicating whether the position index inside an array should be updated.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
            <summary>
            Sets the state based on current token type.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the source is also closed.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException">
            <summary>
            The exception thrown when an error occurs while reading JSON text.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.String,System.Int32,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException"/> class
            with a specified error message, JSON path, line number, line position, and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="lineNumber">The line number indicating where the error occurred.</param>
            <param name="linePosition">The line position indicating where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonRequiredAttribute">
            <summary>
            Instructs the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> to always serialize the member, and to require that the member has a value.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializationException">
            <summary>
            The exception thrown when an error occurs during JSON serialization or deserialization.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializationException"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializationException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer">
            <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> enables you to control how objects are encoded into JSON.
            </summary>
        </member>
        <member name="E:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Error">
            <summary>
            Occurs when the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> errors during serialization and deserialization.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.ReferenceResolver">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Binder">
            <summary>
            Gets or sets the <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ISerializationBinder"/> used by the serializer when resolving type names.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.SerializationBinder"/>
            when deserializing with a value other than <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.None"/>.
            </remarks>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Converters">
            <summary>
            Gets a collection <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.
            </summary>
            <value>Collection <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> that will be used during serialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON text.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException"/>.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Create">
            <summary>
            Creates a new <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> will not use default settings
            from <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> will not use default settings
            from <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Create(RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> will not use default settings
            from <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> will not use default settings
            from <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.CreateDefault">
            <summary>
            Creates a new <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> will use default settings
            from <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </summary>
            <returns>
            A new <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> instance.
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> will use default settings
            from <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DefaultSettings"/>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.CreateDefault(RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Creates a new <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> will use default settings
            from <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </summary>
            <param name="settings">The settings to be applied to the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.</param>
            <returns>
            A new <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> instance using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> will use default settings
            from <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.DefaultSettings"/> as well as the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Populate(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Object)">
            <summary>
            Populates the JSON values onto the target object.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to reader values from.</param>
            <param name="target">The target object to populate values onto.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Deserialize(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that contains the JSON structure to deserialize.</param>
            <returns>The <see cref="T:System.Object"/> being deserialized.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:System.IO.StringReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Deserialize``1(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <returns>The instance of <typeparamref name="T"/> being deserialized.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Deserialize(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Type)">
            <summary>
            Deserializes the JSON structure contained by the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>
            into an instance of the specified type.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> containing the object.</param>
            <param name="objectType">The <see cref="T:System.Type"/> of object being deserialized.</param>
            <returns>The instance of <paramref name="objectType"/> being deserialized.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Serialize(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="jsonWriter">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.Auto"/> to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
            <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> is Auto to write out the type name if the type of the value does not match.
            Specifying the type is optional.
            </param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Serialize(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object)">
            <summary>
            Serializes the specified <see cref="T:System.Object"/> and writes the JSON structure
            using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="jsonWriter">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> used to write the JSON structure.</param>
            <param name="value">The <see cref="T:System.Object"/> to serialize.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings">
            <summary>
            Specifies the settings on a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> object.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
            <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) are handled.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.ReferenceLoopHandling.Error" />.
            </summary>
            <value>Reference loop handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
            <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.MissingMemberHandling.Ignore" />.
            </summary>
            <value>Missing member handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
            <summary>
            Gets or sets how objects are created during deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.ObjectCreationHandling.Auto" />.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
            <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.NullValueHandling.Include" />.
            </summary>
            <value>Null value handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
            <summary>
            Gets or sets how default values are handled during serialization and deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.DefaultValueHandling.Include" />.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.Converters">
            <summary>
            Gets or sets a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> collection that will be used during serialization.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
            <summary>
            Gets or sets how object references are preserved by the serializer.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.PreserveReferencesHandling.None" />.
            </summary>
            <value>The preserve references handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
            <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.None" />.
            </summary>
            <remarks>
            <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.SerializationBinder"/>
            when deserializing with a value other than <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.None"/>.
            </remarks>
            <value>The type name handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.MetadataPropertyHandling">
            <summary>
            Gets or sets how metadata properties are used during deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.MetadataPropertyHandling.Default" />.
            </summary>
            <value>The metadata properties handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:System.Runtime.Serialization.Formatters.FormatterAssemblyStyle.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormatHandling">
            <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple" />.
            </summary>
            <value>The type name assembly format.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
            <summary>
            Gets or sets how constructors are used during deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.ConstructorHandling.Default" />.
            </summary>
            <value>The constructor handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
            <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.EqualityComparer">
            <summary>
            Gets or sets the equality comparer used by the serializer when comparing references.
            </summary>
            <value>The equality comparer.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.ReferenceResolverProvider">
            <summary>
            Gets or sets a function that creates the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.
            </summary>
            <value>A function that creates the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IReferenceResolver"/> used by the serializer when resolving references.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ITraceWriter"/> used by the serializer when writing trace messages.
            </summary>
            <value>The trace writer.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.Binder">
            <summary>
            Gets or sets the <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.SerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.SerializationBinder">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ISerializationBinder"/> used by the serializer when resolving type names.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.Error">
            <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
            <value>The error handler called during serialization and deserialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.Context">
            <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext"/> used by the serializer when invoking serialization callback methods.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text,
            and the expected date format when reading JSON text.
            The default value is <c>"yyyy'-'MM'-'dd'T'HH':'mm':'ss.FFFFFFFK"</c>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
            <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException"/>.
            A null value means there is no maximum.
            The default value is <c>null</c>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.Formatting">
            <summary>
            Indicates how JSON text output is formatted.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.Formatting.None" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.DateFormatHandling.IsoDateFormat" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled during serialization and deserialization.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
            <summary>
            Gets or sets how date formatted strings, e.g. <c>"\/Date(1198908717056)\/"</c> and <c>"2012-03-21T05:40Z"</c>, are parsed when reading JSON.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written as JSON.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.FloatFormatHandling.String" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
            <summary>
            Gets or sets how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            The default value is <see cref="F:RRQMCore.XREF.Newtonsoft.Json.StringEscapeHandling.Default" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.Culture">
            <summary>
            Gets or sets the culture used when reading JSON.
            The default value is <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
            <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            The default value is <c>false</c>.
            </summary>
            <value>
            	<c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings"/> class.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader"/> class with the specified <see cref="T:System.IO.TextReader"/>.
            </summary>
            <param name="reader">The <see cref="T:System.IO.TextReader"/> containing the JSON data to read.</param>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.ArrayPool">
            <summary>
            Gets or sets the reader's character buffer pool.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:System.IO.TextReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextReader"/> is also closed.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.HasLineInfo">
            <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
            <returns>
            	<c>true</c> if <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.LineNumber"/> and <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.LinePosition"/> can be provided; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.LineNumber">
            <summary>
            Gets the current line number.
            </summary>
            <value>
            The current line number or 0 if no line information is available (for example, <see cref="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.HasLineInfo"/> returns <c>false</c>).
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.LinePosition">
            <summary>
            Gets the current line position.
            </summary>
            <value>
            The current line position or 0 if no line information is available (for example, <see cref="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextReader.HasLineInfo"/> returns <c>false</c>).
            </value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.ArrayPool">
            <summary>
            Gets or sets the writer's character array pool.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.Indentation">
            <summary>
            Gets or sets how many <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.IndentChar"/>s to write for each level in the hierarchy when <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Formatting"/> is set to <see cref="F:RRQMCore.XREF.Newtonsoft.Json.Formatting.Indented"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.QuoteChar">
            <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.IndentChar">
            <summary>
            Gets or sets which character to use for indenting when <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Formatting"/> is set to <see cref="F:RRQMCore.XREF.Newtonsoft.Json.Formatting.Indented"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.QuoteName">
            <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter"/> class using the specified <see cref="T:System.IO.TextWriter"/>.
            </summary>
            <param name="textWriter">The <see cref="T:System.IO.TextWriter"/> to write to.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:System.IO.TextWriter"/> and also flushes the underlying <see cref="T:System.IO.TextWriter"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the underlying <see cref="T:System.IO.TextWriter"/> is also closed.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteEnd(RRQMCore.XREF.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonToken">
            <summary>
            Specifies the type of JSON token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.None">
            <summary>
            This is returned by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> if a read method has not been called.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.StartObject">
            <summary>
            An object start token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.StartArray">
            <summary>
            An array start token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.StartConstructor">
            <summary>
            A constructor start token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.PropertyName">
            <summary>
            An object property name.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.Raw">
            <summary>
            Raw JSON.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.Integer">
            <summary>
            An integer.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.Float">
            <summary>
            A float.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.Boolean">
            <summary>
            A boolean.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.Null">
            <summary>
            A null token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.Undefined">
            <summary>
            An undefined token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.EndObject">
            <summary>
            An object end token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.EndArray">
            <summary>
            An array end token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.EndConstructor">
            <summary>
            A constructor end token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.Date">
            <summary>
            A Date.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.Bytes">
            <summary>
            Byte data.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader">
            <summary>
            <para>
            Represents a reader that provides <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> validation.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="E:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
            <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.Value">
            <summary>
            Gets the text value of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.Depth">
            <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
            <value>The depth of the current token in the JSON document.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.Path">
            <summary>
            Gets the path of the current JSON token.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.QuoteChar">
            <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
            <value></value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.TokenType">
            <summary>
            Gets the type of the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.ValueType">
            <summary>
            Gets the .NET type for the current JSON token.
            </summary>
            <value></value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.#ctor(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader"/> class that
            validates the content returned from the given <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read from while validating.</param>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <value>The schema.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.Reader">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> used to construct this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader"/>.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> specified in the constructor.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.Close">
            <summary>
            Changes the reader's state to <see cref="F:RRQMCore.XREF.Newtonsoft.Json.JsonReader.State.Closed"/>.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonReader.CloseInput"/> is set to <c>true</c>, the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> is also closed.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Byte"/>[].
            </summary>
            <returns>
            A <see cref="T:System.Byte"/>[] or <c>null</c> if the next JSON token is null.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.ReadAsDouble">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.ReadAsBoolean">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.ReadAsString">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.String"/>.
            </summary>
            <returns>A <see cref="T:System.String"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> as a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <returns>A <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>. This method will return <c>null</c> at the end of an array.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonValidatingReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.CloseOutput">
            <summary>
            Gets or sets a value indicating whether the destination should be closed when this writer is closed.
            </summary>
            <value>
            <c>true</c> to close the destination when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose">
            <summary>
            Gets or sets a value indicating whether the JSON should be auto-completed when this writer is closed.
            </summary>
            <value>
            <c>true</c> to auto-complete the JSON when this writer is closed; otherwise <c>false</c>. The default is <c>true</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Top">
            <summary>
            Gets the top.
            </summary>
            <value>The top.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteState">
            <summary>
            Gets the state of the writer.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Path">
            <summary>
            Gets the path of the writer.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Formatting">
            <summary>
            Gets or sets a value indicating how JSON text output should be formatted.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.DateFormatHandling">
            <summary>
            Gets or sets how dates are written to JSON text.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> time zones are handled when writing JSON text.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.StringEscapeHandling">
            <summary>
            Gets or sets how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.FloatFormatHandling">
            <summary>
            Gets or sets how special floating point numbers, e.g. <see cref="F:System.Double.NaN"/>,
            <see cref="F:System.Double.PositiveInfinity"/> and <see cref="F:System.Double.NegativeInfinity"/>,
            are written to JSON text.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.DateFormatString">
            <summary>
            Gets or sets how <see cref="T:System.DateTime"/> and <see cref="T:System.DateTimeOffset"/> values are formatted when writing JSON text.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Culture">
            <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the destination and also flushes the destination.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.CloseOutput"/> is set to <c>true</c>, the destination is also closed.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteEndObject">
            <summary>
            Writes the end of a JSON object.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteEndArray">
            <summary>
            Writes the end of an array.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteEndConstructor">
            <summary>
            Writes the end constructor.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
            <summary>
            Writes the property name of a name/value pair of a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
            <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteEnd">
            <summary>
            Writes the end of the current JSON object or array.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteToken(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Writes the current <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> token and its children.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteToken(RRQMCore.XREF.Newtonsoft.Json.JsonReader,System.Boolean)">
            <summary>
            Writes the current <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> token.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> to read the token from.</param>
            <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteToken(RRQMCore.XREF.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Writes the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonToken"/> token and its value.
            </summary>
            <param name="token">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonToken"/> to write.</param>
            <param name="value">
            The value to write.
            A value is only required for tokens that have an associated value, e.g. the <see cref="T:System.String"/> property name for <see cref="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.PropertyName"/>.
            <c>null</c> can be passed to the method for tokens that don't have a value, e.g. <see cref="F:RRQMCore.XREF.Newtonsoft.Json.JsonToken.StartObject"/>.
            </param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteToken(RRQMCore.XREF.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonToken"/> token.
            </summary>
            <param name="token">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonToken"/> to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteEnd(RRQMCore.XREF.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the specified end token.
            </summary>
            <param name="token">The end token to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteIndent">
            <summary>
            Writes indent characters.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
            <summary>
            Writes the JSON value delimiter.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteIndentSpace">
            <summary>
            Writes an indent space.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
            <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
            <summary>
            Writes a <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
            <summary>
            Writes the given white space.
            </summary>
            <param name="ws">The string of white space characters.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.SetWriteState(RRQMCore.XREF.Newtonsoft.Json.JsonToken,System.Object)">
            <summary>
            Sets the state of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="token">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonToken"/> being written.</param>
            <param name="value">The value being written.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException">
            <summary>
            The exception thrown when an error occurs while writing JSON text.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriterException"/> class
            with a specified error message, JSON path and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="path">The path to the JSON where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.CommentHandling">
            <summary>
            Specifies how JSON comments are handled when loading JSON.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.CommentHandling.Ignore">
            <summary>
            Ignore comments.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.CommentHandling.Load">
            <summary>
            Load comments as a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> with type <see cref="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Comment"/>.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions">
            <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.AncestorsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the ancestors of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains every token in the source collection, the ancestors of every token in the source collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.DescendantsAndSelf``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of tokens that contains every token in the source collection, and the descendants of every token in the source collection.
            </summary>
            <typeparam name="T">The type of the objects in source, constrained to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer"/>.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains every token in the source collection, and the descendants of every token in the source collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{RRQMCore.XREF.Newtonsoft.Json.Linq.JObject})">
            <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> that contains the properties of every object in the source collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{RRQMCore.XREF.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{RRQMCore.XREF.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{RRQMCore.XREF.Newtonsoft.Json.Linq.JToken},System.Object)">
            <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <param name="key">The token key.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection with the given key.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{RRQMCore.XREF.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{RRQMCore.XREF.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts the value.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <typeparam name="U">The type to convert the value to.</typeparam>
            <param name="value">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A converted value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the values of every token in the source collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <typeparam name="U">The type to convert the values to.</typeparam>
            <typeparam name="T">The source collection type.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the converted values of every token in the source collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{RRQMCore.XREF.Newtonsoft.Json.Linq.JToken})">
            <summary>
            Returns the input typed as <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.IJEnumerable`1"/>.
            </summary>
            <typeparam name="T">The source collection type.</typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the source collection.</param>
            <returns>The input typed as <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.IJEnumerable`1"/>.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.IJEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.IJEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray">
            <summary>
            Represents a JSON array.
            </summary>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Type">
            <summary>
            Gets the node type for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.#ctor(RRQMCore.XREF.Newtonsoft.Json.Linq.JArray)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> class from another <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> object.
            </summary>
            <param name="other">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> object to copy from.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> class with the specified content.
            </summary>
            <param name="content">The contents of the array.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads an <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads an <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> that contains the JSON that was read from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Parse(System.String)">
            <summary>
            Load a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Parse(System.String,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> populated from the string that contains JSON.</returns>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
            </example>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.FromObject(System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.</param>
            <param name="jsonSerializer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> with the values of the specified object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.WriteTo(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Item(System.Object)">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.IndexOf(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines the index of a specific item in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>
            The index of <paramref name="item"/> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Insert(System.Int32,RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Inserts an item to the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.
            </exception>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is not a valid index in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.
            </exception>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Add(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds an item to the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="item">The object to add to the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Clear">
            <summary>
            Removes all items from the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Contains(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> is found in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.CopyTo(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> to an array, starting at a particular array index.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> is read-only.
            </summary>
            <returns><c>true</c> if the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/> is read-only; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray.Remove(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.</param>
            <returns>
            <c>true</c> if <paramref name="item"/> was successfully removed from the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>; otherwise, <c>false</c>. This method also returns <c>false</c> if <paramref name="item"/> is not found in the original <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JArray"/>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor">
            <summary>
            Represents a JSON constructor.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.Name">
            <summary>
            Gets or sets the name of this constructor.
            </summary>
            <value>The constructor name.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.Type">
            <summary>
            Gets the node type for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.#ctor(RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> class from another <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> object.
            </summary>
            <param name="other">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> object to copy from.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name and content.
            </summary>
            <param name="name">The constructor name.</param>
            <param name="content">The contents of the constructor.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> class with the specified name.
            </summary>
            <param name="name">The constructor name.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.WriteTo(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/>.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JConstructor"/> that contains the JSON that was read from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer">
            <summary>
            Represents a token that can contain other tokens.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>
            A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>
            A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>, in document order.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.Descendants">
            <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> containing the descendant tokens of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.DescendantsAndSelf">
            <summary>
            Returns a collection of the tokens that contain this token, and all descendant tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> containing this token, and all the descendant tokens of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
            <summary>
            Adds the specified content as children of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
            <summary>
            Adds the specified content as the first children of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be added.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.CreateWriter">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> that can be used to add tokens to the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> that is ready to have content written to it.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
            <summary>
            Replaces the child nodes of this token with the specified content.
            </summary>
            <param name="content">The content.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.RemoveAll">
            <summary>
            Removes the child nodes from this token.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.Merge(System.Object)">
            <summary>
            Merge the specified content into this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="content">The content to be merged.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.Merge(System.Object,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonMergeSettings)">
            <summary>
            Merge the specified content into this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> using <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonMergeSettings"/>.
            </summary>
            <param name="content">The content to be merged.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonMergeSettings"/> used to merge the content.</param>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer.Count">
            <summary>
            Gets the count of child JSON tokens.
            </summary>
            <value>The count of child JSON tokens.</value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1">
            <summary>
            Represents a collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
            <typeparam name="T">The type of token.</typeparam>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1.Empty">
            <summary>
            An empty collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> objects.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1"/> struct.
            </summary>
            <param name="enumerable">The enumerable.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.IJEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1.Equals(RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable{`0})">
            <summary>
            Determines whether the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1"/> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject">
            <summary>
            Represents a JSON object.
            </summary>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="E:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.#ctor(RRQMCore.XREF.Newtonsoft.Json.Linq.JObject)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> class from another <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> object.
            </summary>
            <param name="other">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> object to copy from.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> class with the specified content.
            </summary>
            <param name="content">The contents of the object.</param>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Type">
            <summary>
            Gets the node type for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Properties">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> of this object's properties.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> of this object's properties.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Property(System.String)">
            <summary>
            Gets a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> the specified name.
            </summary>
            <param name="name">The property name.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> with the specified name or <c>null</c>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.PropertyValues">
            <summary>
            Gets a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> of this object's property values.
            </summary>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> of this object's property values.</returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Item(System.Object)">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.</returns>
            <exception cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException">
                <paramref name="reader"/> is not valid JSON.
            </exception>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> that contains the JSON that was read from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.</returns>
            <exception cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException">
                <paramref name="reader"/> is not valid JSON.
            </exception>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Parse(System.String)">
            <summary>
            Load a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <exception cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException">
                <paramref name="json"/> is not valid JSON.
            </exception>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Parse(System.String,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> populated from the string that contains JSON.</returns>
            <exception cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReaderException">
                <paramref name="json"/> is not valid JSON.
            </exception>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
            </example>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/>.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> with the values of the specified object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.FromObject(System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/>.</param>
            <param name="jsonSerializer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> that will be used to read the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject"/> with the values of the specified object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.WriteTo(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified property name.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,RRQMCore.XREF.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison"/> will be used to match a property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Add(System.String,RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Adds the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.ContainsKey(System.String)">
            <summary>
            Determines whether the JSON object has the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the JSON object has the specified property name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.Remove(System.String)">
            <summary>
            Removes the property with the specified name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if item was successfully removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,RRQMCore.XREF.Newtonsoft.Json.Linq.JToken@)">
            <summary>
            Tries to get the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified property name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <param name="value">The value.</param>
            <returns><c>true</c> if a value was successfully retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.GetEnumerator">
            <summary>
            Returns an enumerator that can be used to iterate through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:RRQMCore.XREF.Newtonsoft.Json.Linq.JObject.PropertyChanged"/> event with the provided arguments.
            </summary>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty">
            <summary>
            Represents a JSON property.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
            <summary>
            Gets the container's children tokens.
            </summary>
            <value>The container's children tokens.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.Name">
            <summary>
            Gets the property name.
            </summary>
            <value>The property name.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.Value">
            <summary>
            Gets or sets the property value.
            </summary>
            <value>The property value.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.#ctor(RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> class from another <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> object.
            </summary>
            <param name="other">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> object to copy from.</param>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.Type">
            <summary>
            Gets the node type for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> class.
            </summary>
            <param name="name">The property name.</param>
            <param name="content">The property content.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.WriteTo(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Loads a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Loads a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that will be read for the content of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/>.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JProperty"/> that contains the JSON that was read from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw">
            <summary>
            Represents a raw JSON string.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw.#ctor(RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw"/> class from another <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw"/> object.
            </summary>
            <param name="other">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw"/> object to copy from.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw"/> class.
            </summary>
            <param name="rawJson">The raw json.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw.Create(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates an instance of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.
            </summary>
            <param name="reader">The reader.</param>
            <returns>An instance of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JRaw"/> with the content of the reader's current token.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings">
            <summary>
            Specifies the settings used when loading JSON.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> class.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings.CommentHandling">
            <summary>
            Gets or sets how JSON comments are handled when loading JSON.
            </summary>
            <value>The JSON comment handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings.LineInfoHandling">
            <summary>
            Gets or sets how JSON line info is handled when loading JSON.
            </summary>
            <value>The JSON line info handling.</value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonMergeSettings">
            <summary>
            Specifies the settings used when merging JSON.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonMergeSettings.MergeArrayHandling">
            <summary>
            Gets or sets the method used when merging JSON arrays.
            </summary>
            <value>The method used when merging JSON arrays.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonMergeSettings.MergeNullValueHandling">
            <summary>
            Gets or sets how null value properties are merged.
            </summary>
            <value>How null value properties are merged.</value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Represents an abstract JSON token.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.EqualityComparer">
            <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
            <value>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenEqualityComparer"/> that can compare two nodes for value equality.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Root">
            <summary>
            Gets the root <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The root <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Type">
            <summary>
            Gets the node type for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.DeepEquals(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken,RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
            <param name="t1">The first <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="t2">The second <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns><c>true</c> if the tokens are equal; otherwise <c>false</c>.</returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Next">
            <summary>
            Gets the next sibling token of this node.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the next sibling token.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Previous">
            <summary>
            Gets the previous sibling token of this node.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the previous sibling token.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Path">
            <summary>
            Gets the path of the JSON token.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
            <summary>
            Adds the specified content immediately after this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
            <summary>
            Adds the specified content immediately before this token.
            </summary>
            <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Ancestors">
            <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
            <returns>A collection of the ancestor tokens of this token.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.AncestorsAndSelf">
            <summary>
            Returns a collection of tokens that contain this token, and the ancestors of this token.
            </summary>
            <returns>A collection of tokens that contain this token, and the ancestors of this token.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.AfterSelf">
            <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.BeforeSelf">
            <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
            <returns>A collection of the sibling tokens before this token, in document order.</returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Item(System.Object)">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the specified key converted to the specified type.
            </summary>
            <typeparam name="T">The type to convert the token to.</typeparam>
            <param name="key">The token key.</param>
            <returns>The converted token value.</returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.First">
            <summary>
            Get the first child token of this token.
            </summary>
            <value>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> containing the first child token of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Last">
            <summary>
            Get the last child token of this token.
            </summary>
            <value>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> containing the last child token of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Children">
            <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> containing the child tokens of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Children``1">
            <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
            <typeparam name="T">The type to filter the child tokens on.</typeparam>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JEnumerable`1"/> containing the child tokens of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Values``1">
            <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
            <typeparam name="T">The type to convert the values to.</typeparam>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the child values of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>, in document order.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Remove">
            <summary>
            Removes this token from its parent.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Replace(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Replaces this token with the specified token.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.WriteTo(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> which will be used when writing the token.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.ToString">
            <summary>
            Returns the indented JSON for this token.
            </summary>
            <returns>
            The indented JSON for this token.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.ToString(RRQMCore.XREF.Newtonsoft.Json.Formatting,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
            <param name="formatting">Indicates how the output should be formatted.</param>
            <param name="converters">A collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>s which will be used when writing the token.</param>
            <returns>The JSON for this token using the given formatting and converters.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Boolean">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Int64">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Int16">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Char">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Char"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Byte">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.SByte}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.DateTime">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Decimal">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Decimal"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Single">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.String">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Byte[]">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Byte"/>[].
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Guid">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Guid"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> .
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Explicit(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)~System.Uri">
            <summary>
            Performs an explicit conversion from <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to <see cref="T:System.Uri"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Byte})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Byte"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.SByte)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.SByte"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.SByte})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.SByte"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Boolean"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.DateTime"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Decimal"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Double"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int16"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int32"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int64"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Single"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Int16"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt16"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt32"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.UInt64"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Double"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Single"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Byte"/>[] to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Uri"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.TimeSpan"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Guid"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~RRQMCore.XREF.Newtonsoft.Json.Linq.JToken">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1"/> of <see cref="T:System.Guid"/> to <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="value">The value to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> from.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> initialized with the specified value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.CreateReader">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> for this token.
            </summary>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> that can be used to read this token and its descendants.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> from an object.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.FromObject(System.Object,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> from an object using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="o">The object that will be used to create <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="jsonSerializer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> that will be used when reading the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> with the value of the specified object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.ToObject``1">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.ToObject``1(RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
            <param name="jsonSerializer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.ToObject(System.Type,RRQMCore.XREF.Newtonsoft.Json.JsonSerializer)">
            <summary>
            Creates an instance of the specified .NET type from the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <param name="objectType">The object type that the token will be deserialized to.</param>
            <param name="jsonSerializer">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> that will be used when creating the object.</param>
            <returns>The new object created from the JSON value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.ReadFrom(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.ReadFrom(RRQMCore.XREF.Newtonsoft.Json.JsonReader,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">An <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Parse(System.String)">
            <summary>
            Load a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Parse(System.String,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Load a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> from a string that contains JSON.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> populated from the string that contains JSON.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader,RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</param>
            <param name="settings">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JsonLoadSettings"/> used to load the JSON.
            If this is <c>null</c>, default load settings will be used.</param>
            <returns>
            A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Load(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> from a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> positioned at the token to read into this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</param>
            <returns>
            A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
            <summary>
            Selects a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>, or <c>null</c>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
            <summary>
            Selects a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> using a JPath expression. Selects the token that matches the object path.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the selected elements.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.SelectTokens(System.String,System.Boolean)">
            <summary>
            Selects a collection of elements using a JPath expression.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that contains a JPath expression.
            </param>
            <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no tokens are found when evaluating part of the expression.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> that contains the selected elements.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.DeepClone">
            <summary>
            Creates a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>. All child tokens are recursively cloned.
            </summary>
            <returns>A new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.AddAnnotation(System.Object)">
            <summary>
            Adds an object to the annotation list of this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="annotation">The annotation to add.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Annotation``1">
            <summary>
            Get the first annotation object of the specified type from this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotation to retrieve.</typeparam>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Annotation(System.Type)">
            <summary>
            Gets the first annotation object of the specified type from this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Type"/> of the annotation to retrieve.</param>
            <returns>The first annotation object that matches the specified type, or <c>null</c> if no annotation is of the specified type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Annotations``1">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of the annotations to retrieve.</typeparam>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains the annotations for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Annotations(System.Type)">
            <summary>
            Gets a collection of annotations of the specified type for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Type"/> of the annotations to retrieve.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Object"/> that contains the annotations that match the specified type for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.RemoveAnnotations``1">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <typeparam name="T">The type of annotations to remove.</typeparam>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.RemoveAnnotations(System.Type)">
            <summary>
            Removes the annotations of the specified type from this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <param name="type">The <see cref="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken.Type"/> of annotations to remove.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenEqualityComparer">
            <summary>
            Compares tokens to determine whether they are equal.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken,RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <param name="y">The second object of type <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to compare.</param>
            <returns>
            <c>true</c> if the specified objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Returns a hash code for the specified object.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> for which a hash code is to be returned.</param>
            <returns>A hash code for the specified object.</returns>
            <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj"/> is a reference type and <paramref name="obj"/> is <c>null</c>.</exception>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized JSON data.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenReader.CurrentToken">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> at the reader's current position.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenReader.#ctor(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenReader"/> class.
            </summary>
            <param name="token">The token to read from.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenReader.Read">
            <summary>
            Reads the next JSON token from the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <returns>
            <c>true</c> if the next token was read successfully; <c>false</c> if there are no more tokens to read.
            </returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenReader.Path">
            <summary>
            Gets the path of the current JSON token.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType">
            <summary>
            Specifies the type of token.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.None">
            <summary>
            No token type has been set.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Object">
            <summary>
            A JSON object.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Array">
            <summary>
            A JSON array.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Constructor">
            <summary>
            A JSON constructor.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Property">
            <summary>
            A JSON object property.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Comment">
            <summary>
            A comment.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Integer">
            <summary>
            An integer value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Float">
            <summary>
            A float value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.String">
            <summary>
            A string value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Boolean">
            <summary>
            A boolean value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Null">
            <summary>
            A null value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Undefined">
            <summary>
            An undefined value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Date">
            <summary>
            A date value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Raw">
            <summary>
            A raw JSON value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Bytes">
            <summary>
            A collection of bytes value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Guid">
            <summary>
            A Guid value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.Uri">
            <summary>
            A Uri value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenType.TimeSpan">
            <summary>
            A TimeSpan value.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter">
            <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.CurrentToken">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> at the writer's current position.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.Token">
            <summary>
            Gets the token being written.
            </summary>
            <value>The token being written.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.#ctor(RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter"/> class writing to the given <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
            <param name="container">The container being written to.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.Flush">
            <summary>
            Flushes whatever is in the buffer to the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.Close">
            <summary>
            Closes this writer.
            If <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.AutoCompleteOnClose"/> is set to <c>true</c>, the JSON is auto-completed.
            </summary>
            <remarks>
            Setting <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.CloseOutput"/> to <c>true</c> has no additional effect, since the underlying <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JContainer"/> is a type that cannot be closed.
            </remarks>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
            <summary>
            Writes the beginning of a JSON object.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
            <summary>
            Writes the beginning of a JSON array.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
            <summary>
            Writes the start of a constructor with the given name.
            </summary>
            <param name="name">The name of the constructor.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(RRQMCore.XREF.Newtonsoft.Json.JsonToken)">
            <summary>
            Writes the end.
            </summary>
            <param name="token">The token.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
            <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
            <param name="name">The name of the property.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
            <summary>
            Writes a <see cref="T:System.Object"/> value.
            An error will be raised if the value cannot be written as a single JSON token.
            </summary>
            <param name="value">The <see cref="T:System.Object"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
            <summary>
            Writes a null value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
            <summary>
            Writes an undefined value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
            <summary>
            Writes raw JSON.
            </summary>
            <param name="json">The raw JSON to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
            <summary>
            Writes a comment <c>/*...*/</c> containing the specified text.
            </summary>
            <param name="text">Text to place inside the comment.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The <see cref="T:System.String"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt32"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
            <summary>
            Writes a <see cref="T:System.UInt64"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt64"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Single"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Double"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Boolean"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Int16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value.
            </summary>
            <param name="value">The <see cref="T:System.UInt16"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
            <summary>
            Writes a <see cref="T:System.Char"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Char"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value.
            </summary>
            <param name="value">The <see cref="T:System.SByte"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
            <summary>
            Writes a <see cref="T:System.Decimal"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Decimal"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
            <summary>
            Writes a <see cref="T:System.DateTime"/> value.
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
            <summary>
            Writes a <see cref="T:System.Byte"/>[] value.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/>[] value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
            <summary>
            Writes a <see cref="T:System.TimeSpan"/> value.
            </summary>
            <param name="value">The <see cref="T:System.TimeSpan"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Guid"/> value to write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
            <summary>
            Writes a <see cref="T:System.Uri"/> value.
            </summary>
            <param name="value">The <see cref="T:System.Uri"/> value to write.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue">
            <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(RRQMCore.XREF.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class from another <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> object.
            </summary>
            <param name="other">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> object to copy from.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> class with the given value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.HasValues">
            <summary>
            Gets a value indicating whether this token has child tokens.
            </summary>
            <value>
            	<c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> comment with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> comment with the given value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> string with the given value.
            </summary>
            <param name="value">The value.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> string with the given value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.CreateNull">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> null value.
            </summary>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> null value.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.CreateUndefined">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> undefined value.
            </summary>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue"/> undefined value.</returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.Type">
            <summary>
            Gets the node type for this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.Value">
            <summary>
            Gets or sets the underlying token value.
            </summary>
            <value>The underlying token value.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.WriteTo(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,RRQMCore.XREF.Newtonsoft.Json.JsonConverter[])">
            <summary>
            Writes this token to a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="converters">A collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/>s which will be used when writing the token.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.Equals(RRQMCore.XREF.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Linq.JValue.CompareTo(RRQMCore.XREF.Newtonsoft.Json.Linq.JValue)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="obj">An object to compare with this instance.</param>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj"/>.
            Zero
            This instance is equal to <paramref name="obj"/>.
            Greater than zero
            This instance is greater than <paramref name="obj"/>.
            </returns>
            <exception cref="T:System.ArgumentException">
            	<paramref name="obj"/> is not of the same type as this instance.
            </exception>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.LineInfoHandling">
            <summary>
            Specifies how line information is handled when loading JSON.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.LineInfoHandling.Ignore">
            <summary>
            Ignore line information.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.LineInfoHandling.Load">
            <summary>
            Load line information.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.MergeArrayHandling">
            <summary>
            Specifies how JSON arrays are merged together.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.MergeArrayHandling.Concat">
            <summary>Concatenate arrays.</summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.MergeArrayHandling.Union">
            <summary>Union arrays, skipping items that already exist.</summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.MergeArrayHandling.Replace">
            <summary>Replace all array items.</summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.MergeArrayHandling.Merge">
            <summary>Merge array items together, matched by index.</summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Linq.MergeNullValueHandling">
            <summary>
            Specifies how null value properties are merged.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.MergeNullValueHandling.Ignore">
            <summary>
            The content's null value properties will be ignored during merging.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Linq.MergeNullValueHandling.Merge">
            <summary>
            The content's null value properties will be merged.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.MemberSerialization">
            <summary>
            Specifies the member serialization options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.MemberSerialization.OptOut">
            <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This is the default member serialization mode.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.MemberSerialization.OptIn">
            <summary>
            Only members marked with <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute"/> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.MemberSerialization.Fields">
            <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonIgnoreAttribute"/> or <see cref="T:System.NonSerializedAttribute"/>.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute"/>
            and setting IgnoreSerializableAttribute on <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver"/> to <c>false</c>.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.MetadataPropertyHandling">
            <summary>
            Specifies metadata property handling options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.MetadataPropertyHandling.Default">
            <summary>
            Read metadata properties located at the start of a JSON object.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.MetadataPropertyHandling.ReadAhead">
            <summary>
            Read metadata properties located anywhere in a JSON object. Note that this setting will impact performance.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.MetadataPropertyHandling.Ignore">
            <summary>
            Do not try to read metadata properties.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.MissingMemberHandling">
            <summary>
            Specifies missing member handling options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.MissingMemberHandling.Ignore">
            <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.MissingMemberHandling.Error">
            <summary>
            Throw a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializationException"/> when a missing member is encountered during deserialization.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.NullValueHandling">
            <summary>
            Specifies null value handling options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
            </example>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.NullValueHandling.Include">
            <summary>
            Include null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.NullValueHandling.Ignore">
            <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.ObjectCreationHandling">
            <summary>
            Specifies how object creation is handled by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.ObjectCreationHandling.Auto">
            <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.ObjectCreationHandling.Reuse">
            <summary>
            Only reuse existing objects.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.ObjectCreationHandling.Replace">
            <summary>
            Always create new objects.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.PreserveReferencesHandling">
            <summary>
            Specifies reference handling options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement <see cref="T:System.Runtime.Serialization.ISerializable"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
            </example>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.PreserveReferencesHandling.None">
            <summary>
            Do not preserve references when serializing types.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.PreserveReferencesHandling.Objects">
            <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.PreserveReferencesHandling.Arrays">
            <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.PreserveReferencesHandling.All">
            <summary>
            Preserve references when serializing.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.ReferenceLoopHandling">
            <summary>
            Specifies reference loop handling options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.ReferenceLoopHandling.Error">
            <summary>
            Throw a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializationException"/> when a loop is encountered.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.ReferenceLoopHandling.Ignore">
            <summary>
            Ignore loop references and do not serialize.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.ReferenceLoopHandling.Serialize">
            <summary>
            Serialize loop references.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Required">
            <summary>
            Indicating whether a property is required.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Required.Default">
            <summary>
            The property is not required. The default state.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Required.AllowNull">
            <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Required.Always">
            <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Required.DisallowNull">
            <summary>
            The property is not required but it cannot be a null value.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Schema.Extensions">
            <summary>
            <para>
            Contains the JSON schema extension methods.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.Extensions.IsValid(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken,RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            Determines whether the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> is valid.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.Extensions.IsValid(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken,RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
            <summary>
            <para>
            Determines whether the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> is valid.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
            <returns>
            	<c>true</c> if the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.Extensions.Validate(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken,RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema)">
            <summary>
            <para>
            Validates the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.Extensions.Validate(RRQMCore.XREF.Newtonsoft.Json.Linq.JToken,RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema,RRQMCore.XREF.Newtonsoft.Json.Schema.ValidationEventHandler)">
            <summary>
            <para>
            Validates the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
            <param name="source">The source <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Linq.JToken"/> to test.</param>
            <param name="schema">The schema to test with.</param>
            <param name="validationEventHandler">The validation event handler.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema">
            <summary>
            <para>
            An in-memory representation of a JSON Schema.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Id">
            <summary>
            Gets or sets the id.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Title">
            <summary>
            Gets or sets the title.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Required">
            <summary>
            Gets or sets whether the object is required.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
            <summary>
            Gets or sets whether the object is read-only.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Hidden">
            <summary>
            Gets or sets whether the object is visible to users.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Transient">
            <summary>
            Gets or sets whether the object is transient.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Description">
            <summary>
            Gets or sets the description of the object.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Type">
            <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Pattern">
            <summary>
            Gets or sets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
            <summary>
            Gets or sets the minimum length.
            </summary>
            <value>The minimum length.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
            <summary>
            Gets or sets the maximum length.
            </summary>
            <value>The maximum length.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
            <summary>
            Gets or sets a number that the value should be divisible by.
            </summary>
            <value>A number that the value should be divisible by.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Minimum">
            <summary>
            Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Maximum">
            <summary>
            Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Minimum"/>).
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>minimum</c> attribute (<see cref="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Minimum"/>).</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
            <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Maximum"/>).
            </summary>
            <value>A flag indicating whether the value can not equal the number defined by the <c>maximum</c> attribute (<see cref="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Maximum"/>).</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
            <summary>
            Gets or sets the minimum number of items.
            </summary>
            <value>The minimum number of items.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
            <summary>
            Gets or sets the maximum number of items.
            </summary>
            <value>The maximum number of items.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Items">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> of items.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> of items.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
            <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> instance at their array position from <see cref="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Items"/>.
            </summary>
            <value>
            	<c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> of additional items.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
            <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
            <value>
            	<c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
            <summary>
            Gets or sets whether the array items must be unique.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Properties">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> of properties.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> of properties.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> of additional properties.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
            <summary>
            Gets or sets the pattern properties.
            </summary>
            <value>The pattern properties.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
            <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
            <value>
            	<c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Requires">
            <summary>
            Gets or sets the required property if this property is present.
            </summary>
            <value>The required property if this property is present.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Enum">
            <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
            <value>A collection of valid enum values allowed.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Disallow">
            <summary>
            Gets or sets disallowed types.
            </summary>
            <value>The disallowed types.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Default">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Extends">
            <summary>
            Gets or sets the collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.
            </summary>
            <value>The collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> that this schema extends.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>The format.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Read(RRQMCore.XREF.Newtonsoft.Json.JsonReader)">
            <summary>
            Reads a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Read(RRQMCore.XREF.Newtonsoft.Json.JsonReader,RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Reads a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/>.
            </summary>
            <param name="reader">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonReader"/> containing the JSON Schema to read.</param>
            <param name="resolver">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver"/> to use when resolving schema references.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> object representing the JSON Schema.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
            <summary>
            Load a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains JSON Schema.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON Schema.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON Schema.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Load a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from a string that contains JSON Schema using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="json">A <see cref="T:System.String"/> that contains JSON Schema.</param>
            <param name="resolver">The resolver.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> populated from the string that contains JSON Schema.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.WriteTo(RRQMCore.XREF.Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes this schema to a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
            <param name="writer">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.WriteTo(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Writes this schema to a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> using the specified <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver"/>.
            </summary>
            <param name="writer">A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> into which this method will write.</param>
            <param name="resolver">The resolver used.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException">
            <summary>
            <para>
            Returns detailed information about the schema exception.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
            <summary>
            Gets the line number indicating where the error occurred.
            </summary>
            <value>The line number indicating where the error occurred.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
            <summary>
            Gets the line position indicating where the error occurred.
            </summary>
            <value>The line position indicating where the error occurred.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException.Path">
            <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
            <value>The path to the JSON where the error occurred.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException"/> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or <c>null</c> if no inner exception is specified.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaGenerator">
            <summary>
            <para>
            Generates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from a specified <see cref="T:System.Type"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
            <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
            <summary>
            Gets or sets the contract resolver.
            </summary>
            <value>The contract resolver.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
            <summary>
            Generate a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver)">
            <summary>
            Generate a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
            <summary>
            Generate a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
            <summary>
            Generate a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from the specified type.
            </summary>
            <param name="type">The type to generate a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from.</param>
            <param name="resolver">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver"/> used to resolve schema references.</param>
            <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> will be nullable.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> generated from the specified type.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver">
            <summary>
            <para>
            Resolves <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> from an id.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
            <summary>
            Gets or sets the loaded schemas.
            </summary>
            <value>The loaded schemas.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
            <summary>
            Gets a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.
            </summary>
            <param name="reference">The id.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/> for the specified reference.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType">
            <summary>
            <para>
            The value types allowed by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchema"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType.None">
            <summary>
            No type specified.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType.String">
            <summary>
            String type.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType.Float">
            <summary>
            Float type.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType.Integer">
            <summary>
            Integer type.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
            <summary>
            Boolean type.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType.Object">
            <summary>
            Object type.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType.Array">
            <summary>
            Array type.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType.Null">
            <summary>
            Null type.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaType.Any">
            <summary>
            Any type.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
            <summary>
            <para>
            Specifies undefined schema Id handling options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaGenerator"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
            <summary>
            Do not infer a schema Id.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
            <summary>
            Use the .NET type name as the schema Id.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
            <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Schema.ValidationEventArgs">
            <summary>
            <para>
            Returns detailed information related to the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.ValidationEventHandler"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.JsonSchemaException"/> associated with the validation error.
            </summary>
            <value>The JsonSchemaException associated with the validation error.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.ValidationEventArgs.Path">
            <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
            <value>The path of the JSON location where the validation error occurred.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Schema.ValidationEventArgs.Message">
            <summary>
            Gets the text description corresponding to the validation error.
            </summary>
            <value>The text description.</value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Schema.ValidationEventHandler">
            <summary>
            <para>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Schema.ValidationEventArgs"/>.
            </para>
            <note type="caution">
            JSON Schema validation has been moved to its own package. See <see href="http://www.newtonsoft.com/jsonschema">http://www.newtonsoft.com/jsonschema</see> for more details.
            </note>
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy">
            <summary>
            A camel case naming strategy.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
            <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
            <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver">
            <summary>
            Used by <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> to resolve a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
            <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
            <value>
            	<c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
            <summary>
            Gets or sets the default members search flags.
            </summary>
            <value>The default members search flags.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
            <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
            <value>
            	<c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreIsSpecifiedMembers">
            <summary>
            Gets or sets a value indicating whether to ignore IsSpecified members when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the IsSpecified members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreShouldSerializeMembers">
            <summary>
            Gets or sets a value indicating whether to ignore ShouldSerialize members when serializing and deserializing types.
            </summary>
            <value>
                <c>true</c> if the ShouldSerialize members will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.NamingStrategy">
            <summary>
            Gets or sets the naming strategy used to resolve how property names and dictionary keys are serialized.
            </summary>
            <value>The naming strategy used to resolve how property names and dictionary keys are serialized.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
            <summary>
            Gets the serializable members for the type.
            </summary>
            <param name="objectType">The type to get serializable members for.</param>
            <returns>The serializable members for the type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract"/> for the given type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPropertyCollection)">
            <summary>
            Creates the constructor parameters.
            </summary>
            <param name="constructor">The constructor to create properties for.</param>
            <param name="memberProperties">The type's member properties.</param>
            <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
            <param name="matchingMemberProperty">The matching member property.</param>
            <param name="parameterInfo">The constructor parameter.</param>
            <returns>A created <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.ParameterInfo"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
            <summary>
            Resolves the default <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>The contract's default <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter" />.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> for the given type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonArrayContract"/> for the given type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> for the given type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonLinqContract"/> for the given type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonStringContract"/> for the given type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
            <summary>
            Determines which contract type is created for the given type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract"/> for the given type.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,RRQMCore.XREF.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates properties for the given <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract"/>.
            </summary>
            <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param>
            <returns>Properties for the given <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
            <summary>
            Creates the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.
            </summary>
            <param name="member">The member.</param>
            <returns>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IValueProvider"/> used by the serializer to get and set values from a member.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,RRQMCore.XREF.Newtonsoft.Json.MemberSerialization)">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberSerialization">The member's parent <see cref="T:RRQMCore.XREF.Newtonsoft.Json.MemberSerialization"/>.</param>
            <param name="member">The member to create a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> for.</param>
            <returns>A created <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> for the given <see cref="T:System.Reflection.MemberInfo"/>.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
            <summary>
            Resolves the name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Resolved name of the property.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveExtensionDataName(System.String)">
            <summary>
            Resolves the name of the extension data. By default no changes are made to extension data names.
            </summary>
            <param name="extensionDataName">Name of the extension data.</param>
            <returns>Resolved name of the extension data.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveDictionaryKey(System.String)">
            <summary>
            Resolves the key of the dictionary. By default <see cref="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)"/> is used to resolve dictionary keys.
            </summary>
            <param name="dictionaryKey">Key of the dictionary.</param>
            <returns>Resolved key of the dictionary.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
            <summary>
            Gets the resolved name of the property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>Name of the property.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultNamingStrategy">
            <summary>
            The default naming strategy. Property names and dictionary keys are unchanged.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultSerializationBinder">
            <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultSerializationBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultSerializationBinder"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
            <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorContext">
            <summary>
            Provides information surrounding an error.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorContext.Error">
            <summary>
            Gets the error.
            </summary>
            <value>The error.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
            <summary>
            Gets the original object that caused the error.
            </summary>
            <value>The original object that caused the error.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorContext.Member">
            <summary>
            Gets the member that caused the error.
            </summary>
            <value>The member that caused the error.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorContext.Path">
            <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
            <value>The path of the JSON location where the error occurred.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorContext.Handled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorContext"/> is handled.
            </summary>
            <value><c>true</c> if handled; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorEventArgs">
            <summary>
            Provides data for the Error event.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
            <summary>
            Gets the current object the error event is being raised against.
            </summary>
            <value>The current object the error event is being raised against.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
            <summary>
            Gets the error context.
            </summary>
            <value>The error context.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ErrorEventArgs"/> class.
            </summary>
            <param name="currentObject">The current object.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ExpressionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using dynamic methods.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ExpressionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ExpressionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ExpressionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ExpressionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IAttributeProvider">
            <summary>
            Provides methods to get attributes.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.IAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IContractResolver">
            <summary>
            Used by <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> to resolve a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract"/> for a given <see cref="T:System.Type"/>.
            </summary>
            <example>
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
              <code lang="cs" source="..\Src\RRQMCore.XREF.Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
            </example>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
            <summary>
            Resolves the contract for a given type.
            </summary>
            <param name="type">The type to resolve a contract for.</param>
            <returns>The contract for a given type.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IReferenceResolver">
            <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
            <summary>
            Resolves a reference to its object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference to resolve.</param>
            <returns>The object that was resolved from the reference.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
            <summary>
            Gets the reference for the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to get a reference for.</param>
            <returns>The reference to the object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
            <summary>
            Determines whether the specified object is referenced.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="value">The object to test for a reference.</param>
            <returns>
            	<c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
            <summary>
            Adds a reference to the specified object.
            </summary>
            <param name="context">The serialization context.</param>
            <param name="reference">The reference.</param>
            <param name="value">The object to reference.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ISerializationBinder">
            <summary>
            Allows users to control class loading and mandate what class to load.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ISerializationBinder.BindToType(System.String,System.String)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object</param>
            <returns>The type of the object the formatter creates a new instance of.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ISerializationBinder.BindToName(System.Type,System.String@,System.String@)">
            <summary>
            When implemented, controls the binding of a serialized object to a type.
            </summary>
            <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
            <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly"/> name of the serialized object.</param>
            <param name="typeName">Specifies the <see cref="T:System.Type"/> name of the serialized object.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ITraceWriter">
            <summary>
            Represents a trace writer.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Info"/> will exclude <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Verbose"/> messages and include <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Info"/>,
            <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Warning"/> and <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Error"/> messages.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ITraceWriter.Trace(RRQMCore.XREF.Newtonsoft.Json.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IValueProvider">
            <summary>
            Provides methods to get and set values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonArrayContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the collection items.
            </summary>
            <value>The <see cref="T:System.Type"/> of the collection items.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
            <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
            <value><c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonArrayContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonArrayContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the collection values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the collection values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonArrayContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContainerContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
            <summary>
            Gets or sets the default collection items <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter" />.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
            <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
            <value><c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
            <summary>
            Gets or sets the collection item type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContainerContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.SerializationCallback">
            <summary>
            Handles <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> serialization callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.SerializationErrorCallback">
            <summary>
            Handles <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/> serialization error callback events.
            </summary>
            <param name="o">The object that raised the callback event.</param>
            <param name="context">The streaming context.</param>
            <param name="errorContext">The error context.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ExtensionDataSetter">
            <summary>
            Sets extension data for an object during deserialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
            <param name="key">The extension data key.</param>
            <param name="value">The extension data value.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ExtensionDataGetter">
            <summary>
            Gets extension data for an object during serialization.
            </summary>
            <param name="o">The object to set extension data on.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
            <summary>
            Gets the underlying type for the contract.
            </summary>
            <value>The underlying type for the contract.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.CreatedType">
            <summary>
            Gets or sets the type created during deserialization.
            </summary>
            <value>The type created during deserialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.IsReference">
            <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
            <value>Whether this type contract is serialized as a reference.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.Converter">
            <summary>
            Gets or sets the default <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
            <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
            <value>The methods called immediately after deserialization of the object.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
            <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
            <value>The methods called during deserialization of the object.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
            <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
            <value>The methods called after serialization of the object graph.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
            <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
            <value>The methods called before serialization of the object.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
            <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
            <value>The methods called when an error is thrown during the serialization of the object.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
            <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
            <value>The default creator method used to create the object.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
            <summary>
            Gets or sets a value indicating whether the default creator is non-public.
            </summary>
            <value><c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyResolver">
            <summary>
            Gets or sets the dictionary key resolver.
            </summary>
            <value>The dictionary key resolver.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary keys.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary keys.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the dictionary values.
            </summary>
            <value>The <see cref="T:System.Type"/> of the dictionary values.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract.HasParameterizedCreator">
            <summary>
            Gets a value indicating whether the creator has a parameter with the dictionary values.
            </summary>
            <value><c>true</c> if the creator has a parameter with the dictionary values; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonDictionaryContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonLinqContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonLinqContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
            <summary>
            Gets or sets the object member serialization.
            </summary>
            <value>The member object serialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
            <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
            <value>
            	A value indicating whether the object's properties are required.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.ItemNullValueHandling">
            <summary>
            Gets or sets how the object's properties with null values are handled during serialization and deserialization.
            </summary>
            <value>How the object's properties with null values are handled during serialization and deserialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
            <summary>
            Gets the object's properties.
            </summary>
            <value>The object's properties.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters">
            <summary>
            Gets a collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> instances that define the parameters used with <see cref="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator"/>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.OverrideCreator">
            <summary>
            Gets or sets the function used to create the object. When set this function will override <see cref="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonContract.DefaultCreator"/>.
            This function is called with a collection of arguments which are defined by the <see cref="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.CreatorParameters"/> collection.
            </summary>
            <value>The function used to create the object.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataSetter">
            <summary>
            Gets or sets the extension data setter.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataGetter">
            <summary>
            Gets or sets the extension data getter.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataValueType">
            <summary>
            Gets or sets the extension data value type.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.ExtensionDataNameResolver">
            <summary>
            Gets or sets the extension data name resolver.
            </summary>
            <value>The extension data name resolver.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonObjectContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPrimitiveContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPrimitiveContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty">
            <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
            <summary>
            Gets or sets the type that declared this property.
            </summary>
            <value>The type that declared this property.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.Order">
            <summary>
            Gets or sets the order of serialization of a member.
            </summary>
            <value>The numeric order of serialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
            <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
            <value>The name of the underlying member or parameter.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IValueProvider"/> that will get and set the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> during serialization.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.AttributeProvider">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IAttributeProvider"/> for this property.
            </summary>
            <value>The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.IAttributeProvider"/> for this property.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
            <summary>
            Gets or sets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.Converter">
            <summary>
            Gets or sets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes precedence over the contract converter for the property type.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
            <summary>
            Gets or sets the member converter.
            </summary>
            <value>The member converter.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.Ignored">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> is ignored.
            </summary>
            <value><c>true</c> if ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.Readable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> is readable.
            </summary>
            <value><c>true</c> if readable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.Writable">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> is writable.
            </summary>
            <value><c>true</c> if writable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> has a member attribute.
            </summary>
            <value><c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
            <summary>
            Gets the default value.
            </summary>
            <value>The default value.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.Required">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> is required.
            </summary>
            <value>A value indicating whether this <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> is required.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.IsReference">
            <summary>
            Gets or sets a value indicating whether this property preserves object references.
            </summary>
            <value>
            	<c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
            <summary>
            Gets or sets the property null value handling.
            </summary>
            <value>The null value handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
            <summary>
            Gets or sets the property default value handling.
            </summary>
            <value>The default value handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
            <summary>
            Gets or sets the property reference loop handling.
            </summary>
            <value>The reference loop handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
            <summary>
            Gets or sets the property object creation handling.
            </summary>
            <value>The object creation handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
            <summary>
            Gets or sets or sets the type name handling.
            </summary>
            <value>The type name handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ShouldDeserialize">
            <summary>
            Gets or sets a predicate used to determine whether the property should be deserialized.
            </summary>
            <value>A predicate used to determine whether the property should be deserialized.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
            <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
            <value>A predicate used to determine whether the property should be serialized.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
            <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
            <value>An action used to set whether the property has been deserialized.</value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
            <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
            <value>The collection's items converter.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
            <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
            <value>Whether this property's collection items are serialized as a reference.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
            <summary>
            Gets or sets the type name handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items type name handling.</value>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
            <summary>
            Gets or sets the reference loop handling used when serializing the property's collection items.
            </summary>
            <value>The collection's items reference loop handling.</value>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPropertyCollection">
            <summary>
            A collection of <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> objects.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPropertyCollection"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
            <param name="item">The element from which to extract the key.</param>
            <returns>The key for the specified element.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty)">
            <summary>
            Adds a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            </summary>
            <param name="property">The property to add to the collection.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
            <summary>
            Gets the closest matching <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonProperty"/> object.
            First attempts to get an exact case match of <paramref name="propertyName"/> and then
            a case insensitive match.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
            <summary>
            Gets a property by property name.
            </summary>
            <param name="propertyName">The name of the property to get.</param>
            <param name="comparisonType">Type property name string comparison.</param>
            <returns>A matching property if found.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonStringContract">
            <summary>
            Contract details for a <see cref="T:System.Type"/> used by the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonStringContract"/> class.
            </summary>
            <param name="underlyingType">The underlying type for the contract.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.JsonTypeReflector.CreateJsonConverterInstance(System.Type,System.Object[])">
            <summary>
            Lookup and create an instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> type described by the argument.
            </summary>
            <param name="converterType">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonConverter"/> type to create.</param>
            <param name="converterArgs">Optional arguments to pass to an initializing constructor of the JsonConverter.
            If <c>null</c>, the default constructor is used.</param>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.MemoryTraceWriter">
            <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
            <summary>
            Gets the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Info"/> will exclude <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Verbose"/> messages and include <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Info"/>,
            <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Warning"/> and <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Error"/> messages.
            </summary>
            <value>
            The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.TraceLevel"/> that will be used to filter the trace messages passed to the writer.
            </value>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.MemoryTraceWriter"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(RRQMCore.XREF.Newtonsoft.Json.TraceLevel,System.String,System.Exception)">
            <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
            <param name="level">The <see cref="T:RRQMCore.XREF.Newtonsoft.Json.TraceLevel"/> at which to write this trace.</param>
            <param name="message">The trace message.</param>
            <param name="ex">The trace exception. This parameter is optional.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
            <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
            <returns>An enumeration of the most recent trace messages.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> of the most recent trace messages.
            </summary>
            <returns>
            A <see cref="T:System.String"/> of the most recent trace messages.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy">
            <summary>
            A base class for resolving how property names and dictionary keys are serialized.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy.ProcessDictionaryKeys">
            <summary>
            A flag indicating whether dictionary keys should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy.ProcessExtensionDataNames">
            <summary>
            A flag indicating whether extension data names should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy.OverrideSpecifiedNames">
            <summary>
            A flag indicating whether explicitly specified property names,
            e.g. a property name customized with a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute"/>, should be processed.
            Defaults to <c>false</c>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy.GetPropertyName(System.String,System.Boolean)">
            <summary>
            Gets the serialized name for a given property name.
            </summary>
            <param name="name">The initial property name.</param>
            <param name="hasSpecifiedName">A flag indicating whether the property has had a name explicitly specified.</param>
            <returns>The serialized property name.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy.GetExtensionDataName(System.String)">
            <summary>
            Gets the serialized name for a given extension data name.
            </summary>
            <param name="name">The initial extension data name.</param>
            <returns>The serialized extension data name.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy.GetDictionaryKey(System.String)">
            <summary>
            Gets the serialized key for a given dictionary key.
            </summary>
            <param name="key">The initial dictionary key.</param>
            <returns>The serialized dictionary key.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.NamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ObjectConstructor`1">
            <summary>
            Represents a method that constructs an object.
            </summary>
            <typeparam name="T">The object type to create.</typeparam>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.OnErrorAttribute">
            <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionAttributeProvider">
            <summary>
            Provides methods to get attributes from a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionAttributeProvider.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionAttributeProvider"/> class.
            </summary>
            <param name="attributeProvider">The instance to get attributes for. This parameter should be a <see cref="T:System.Type"/>, <see cref="T:System.Reflection.MemberInfo"/>, <see cref="T:System.Reflection.ParameterInfo"/> or <see cref="T:System.Reflection.Assembly"/>.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Boolean)">
            <summary>
            Returns a collection of all of the attributes, or an empty collection if there are no attributes.
            </summary>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionAttributeProvider.GetAttributes(System.Type,System.Boolean)">
            <summary>
            Returns a collection of attributes, identified by type, or an empty collection if there are no attributes.
            </summary>
            <param name="attributeType">The type of the attributes.</param>
            <param name="inherit">When <c>true</c>, look up the hierarchy chain for the inherited custom attribute.</param>
            <returns>A collection of <see cref="T:System.Attribute"/>s, or an empty collection.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionValueProvider">
            <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo"/> using reflection.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionValueProvider"/> class.
            </summary>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
            <summary>
            Sets the value.
            </summary>
            <param name="target">The target to set the value on.</param>
            <param name="value">The value to set on the target.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="target">The target to get the value from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy">
            <summary>
            A snake case naming strategy.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
            <param name="processDictionaryKeys">
            A flag indicating whether dictionary keys should be processed.
            </param>
            <param name="overrideSpecifiedNames">
            A flag indicating whether explicitly specified property names should be processed,
            e.g. a property name customized with a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonPropertyAttribute"/>.
            </param>
            <param name="processExtensionDataNames">
            A flag indicating whether extension data names should be processed.
            </param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy"/> class.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Serialization.SnakeCaseNamingStrategy.ResolvePropertyName(System.String)">
            <summary>
            Resolves the specified property name.
            </summary>
            <param name="name">The property name to resolve.</param>
            <returns>The resolved property name.</returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.StringEscapeHandling">
            <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.StringEscapeHandling.Default">
            <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
            <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
            <summary>
            HTML (&lt;, &gt;, &amp;, &apos;, &quot;) and control characters (e.g. newline) are escaped.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.TraceLevel">
            <summary>
            Specifies what messages to output for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Serialization.ITraceWriter"/> class.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Off">
            <summary>
            Output no tracing and debugging messages.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Error">
            <summary>
            Output error-handling messages.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Warning">
            <summary>
            Output warnings and error-handling messages.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Info">
            <summary>
            Output informational messages, warnings, and error-handling messages.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TraceLevel.Verbose">
            <summary>
            Output all debugging and tracing messages.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.TypeNameAssemblyFormatHandling">
            <summary>
            Indicates the method that will be used during deserialization for locating and loading assemblies.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Simple">
            <summary>
            In simple mode, the assembly used during deserialization need not match exactly the assembly used during serialization. Specifically, the version numbers need not match as the <c>LoadWithPartialName</c> method of the <see cref="T:System.Reflection.Assembly"/> class is used to load the assembly.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameAssemblyFormatHandling.Full">
            <summary>
            In full mode, the assembly used during deserialization must match exactly the assembly used during serialization. The <c>Load</c> method of the <see cref="T:System.Reflection.Assembly"/> class is used to load the assembly.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling">
            <summary>
            Specifies type name handling options for the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer"/>.
            </summary>
            <remarks>
            <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.TypeNameHandling"/> should be used with caution when your application deserializes JSON from an external source.
            Incoming types should be validated with a custom <see cref="P:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.SerializationBinder"/>
            when deserializing with a value other than <see cref="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.None"/>.
            </remarks>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.None">
            <summary>
            Do not include the .NET type name when serializing types.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.Objects">
            <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.Arrays">
            <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.All">
            <summary>
            Always include the .NET type name when serializing.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.TypeNameHandling.Auto">
            <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            Note that this doesn't include the root serialized object by default. To include the root object's type name in JSON
            you must specify a root type object with <see cref="M:RRQMCore.XREF.Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,RRQMCore.XREF.Newtonsoft.Json.JsonSerializerSettings)"/>
            or <see cref="M:RRQMCore.XREF.Newtonsoft.Json.JsonSerializer.Serialize(RRQMCore.XREF.Newtonsoft.Json.JsonWriter,System.Object,System.Type)"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Determines whether the collection is <c>null</c> or empty.
            </summary>
            <param name="collection">The collection.</param>
            <returns>
            	<c>true</c> if the collection is <c>null</c> or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Adds the elements of the specified collection to the specified generic <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="initial">The list to add to.</param>
            <param name="collection">The collection of elements to add.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
            <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
            <param name="initialValue">The value to convert.</param>
            <param name="culture">The culture to use when converting.</param>
            <param name="targetType">The type to convert or cast the value to.</param>
            <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.ImmutableCollectionsUtils">
            <summary>
            Helper class for serializing immutable collections.
            Note that this is used by all builds, even those that don't support immutable collections, in case the DLL is GACed
            https://github.com/JamesNK/RRQMCore.XREF.Newtonsoft.Json/issues/652
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for
            querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Empty``1">
            <summary>
            Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1"/> that has the
            specified type argument.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Cast``1(System.Collections.IEnumerable)">
            <summary>
            Converts the elements of an <see cref="T:System.Collections.IEnumerable"/> to the
            specified type.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.OfType``1(System.Collections.IEnumerable)">
            <summary>
            Filters the elements of an <see cref="T:System.Collections.IEnumerable"/> based on a specified type.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Range(System.Int32,System.Int32)">
            <summary>
            Generates a sequence of integral numbers within a specified range.
            </summary>
            <param name="start">The value of the first integer in the sequence.</param>
            <param name="count">The number of sequential integers to generate.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Repeat``1(``0,System.Int32)">
            <summary>
            Generates a sequence that contains one repeated value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate.
            Each element's index is used in the logic of the predicate function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Projects each element of a sequence into a new form.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int32,``1})">
            <summary>
            Projects each element of a sequence into a new form by
            incorporating the element's index.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />
            and flattens the resulting sequences into one sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            and flattens the resulting sequences into one sequence. The
            index of each source element is used in the projected form of
            that element.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Collections.Generic.IEnumerable{``1}},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            flattens the resulting sequences into one sequence, and invokes
            a result selector function on each element therein.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1,``2})">
            <summary>
            Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            flattens the resulting sequences into one sequence, and invokes
            a result selector function on each element therein. The index of
            each source element is used in the intermediate projected form
            of that element.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns elements from a sequence as long as a specified condition is true.
            The element's index is used in the logic of the predicate function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.FirstImpl``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0})">
            <summary>
            Base implementation of First operator.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Returns the first element in a sequence that satisfies a specified condition.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the first element of a sequence, or a default value if
            the sequence contains no elements.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies a
            condition or a default value if no such element is found.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.LastImpl``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0})">
            <summary>
            Base implementation of Last operator.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence that satisfies a
            specified condition.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the last element of a sequence, or a default value if
            the sequence contains no elements.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of a sequence that satisfies a
            condition or a default value if no such element is found.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SingleImpl``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0})">
            <summary>
            Base implementation of Single operator.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, and throws an exception
            if there is not exactly one element in the sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a
            specified condition, and throws an exception if more than one
            such element exists.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the only element of a sequence, or a default value if
            the sequence is empty; this method throws an exception if there
            is more than one element in the sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Returns the only element of a sequence that satisfies a
            specified condition or a default value if no such element
            exists; this method throws an exception if more than one element
            satisfies the condition.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at a specified index in a sequence or a
            default value if the index is out of range.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Inverts the order of the elements in a sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a specified number of contiguous elements from the start
            of a sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Bypasses a specified number of elements in a sequence and then
            returns the remaining elements.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition
            is true and then returns the remaining elements.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses elements in a sequence as long as a specified condition
            is true and then returns the remaining elements. The element's
            index is used in the logic of the predicate function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the number of elements in a sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Returns a number that represents how many elements in the
            specified sequence satisfy a condition.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a <see cref="T:System.Int64"/> that represents the total number
            of elements in a sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Returns a <see cref="T:System.Int64"/> that represents how many elements
            in a sequence satisfy a condition.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Concatenates two sequences.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Creates an array from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns distinct elements from a sequence by using the default
            equality comparer to compare values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Returns distinct elements from a sequence by using a specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2" /> from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key
            selector function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2" /> from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key
            selector function and a key comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2})">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2" /> from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key
            and element selector functions.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2" /> from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key
            selector function, a comparer and an element selector function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Groups the elements of a sequence according to a specified key
            selector function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key
            selector function and compares the keys by using a specified
            comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2})">
            <summary>
            Groups the elements of a sequence according to a specified key
            selector function and projects the elements for each group by
            using a specified function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key
            selector function and creates a result value from each group and
            its key.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <summary>
            Groups the elements of a sequence according to a key selector
            function. The keys are compared by using a comparer and each
            group's elements are projected by using a specified function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key
            selector function and creates a result value from each group and
            its key. The elements of each group are projected by using a
            specified function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <summary>
            Groups the elements of a sequence according to a specified key
            selector function and creates a result value from each group and
            its key. The keys are compared by using a specified comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Groups the elements of a sequence according to a specified key
            selector function and creates a result value from each group and
            its key. Key values are compared by using a specified comparer,
            and the elements of each group are projected by using a
            specified function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``0,``0})">
            <summary>
            Applies an accumulator function over a sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,``0,``1})">
            <summary>
            Applies an accumulator function over a sequence. The specified
            seed value is used as the initial accumulator value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,``2})">
            <summary>
            Applies an accumulator function over a sequence. The specified
            seed value is used as the initial accumulator value, and the
            specified function is used to select the result value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set union of two sequences by using the default
            equality comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set union of two sequences by using a specified
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the elements of the specified sequence or the type
            parameter's default value in a singleton collection if the
            sequence is empty.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the elements of the specified sequence or the specified
            value in a singleton collection if the sequence is empty.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements of a sequence satisfy a condition.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether a sequence contains any elements.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Boolean})">
            <summary>
            Determines whether any element of a sequence satisfies a
            condition.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Determines whether a sequence contains a specified element by
            using the default equality comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a sequence contains a specified element by
            using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determines whether two sequences are equal by comparing the
            elements by using the default equality comparer for their type.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal by comparing their
            elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.MinMaxImpl``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``0,System.Boolean})">
            <summary>
            Base implementation for Min/Max operator.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.MinMaxImpl``1(System.Collections.Generic.IEnumerable{System.Nullable{``0}},System.Nullable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{System.Nullable{``0},System.Nullable{``0},System.Boolean})">
            <summary>
            Base implementation for Min/Max operator for nullable types.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the minimum value in a generic sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a generic
            sequence and returns the minimum resulting value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the maximum value in a generic sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Invokes a transform function on each element of a generic
            sequence and returns the maximum resulting value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Renumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Makes an enumerator seen as enumerable once more.
            </summary>
            <remarks>
            The supplied enumerator must have been started. The first element
            returned is the element the enumerator was on when passed in.
            DO NOT use this method if the caller must be a generator. It is
            mostly safe among aggregate operations.
            </remarks>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sorts the elements of a sequence in ascending order by using a
            specified comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
             Sorts the elements of a sequence in descending order by using a
            specified comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ThenBy``2(RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IOrderedEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in
            ascending order according to a key.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ThenBy``2(RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IOrderedEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in
            ascending order by using a specified comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ThenByDescending``2(RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IOrderedEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in
            descending order, according to a key.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ThenByDescending``2(RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IOrderedEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Performs a subsequent ordering of the elements in a sequence in
            descending order by using a specified comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.IntersectExceptImpl``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean)">
            <summary>
            Base implementation for Intersect and Except operators.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set intersection of two sequences by using the
            default equality comparer to compare values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set intersection of two sequences by using the
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Produces the set difference of two sequences by using the
            default equality comparer to compare values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Produces the set difference of two sequences by using the
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key
            selector function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key
            selector function and key comparer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key
            selector and element selector functions.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key
            selector function, a comparer, and an element selector function.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1,``3})">
            <summary>
            Correlates the elements of two sequences based on matching keys.
            The default equality comparer is used to compare keys.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys.
            The default equality comparer is used to compare keys. A
            specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
            <summary>
            Correlates the elements of two sequences based on equality of
            keys and groups the results. The default equality comparer is
            used to compare keys.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``1,``2},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on equality of
            keys and groups the results. The default equality comparer is
            used to compare keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            is used to compare keys.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int32})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int32" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int32" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int32})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int32" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int32" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Returns the minimum value in a sequence of nullable
            <see cref="T:System.Int32" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the minimum nullable <see cref="T:System.Int32" /> value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Returns the maximum value in a sequence of nullable
            <see cref="T:System.Int32" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the maximum nullable <see cref="T:System.Int32" /> value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int64})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Int64" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int64" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Int64})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Int64" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Int64" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Returns the minimum value in a sequence of nullable
            <see cref="T:System.Int64" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the minimum nullable <see cref="T:System.Int64" /> value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Returns the maximum value in a sequence of nullable
            <see cref="T:System.Int64" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the maximum nullable <see cref="T:System.Int64" /> value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Single})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Single" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Single" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Single})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Single" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Single" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Single" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the minimum value in a sequence of nullable
            <see cref="T:System.Single" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the minimum nullable <see cref="T:System.Single" /> value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns the maximum value in a sequence of nullable
            <see cref="T:System.Single" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the maximum nullable <see cref="T:System.Single" /> value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Double})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Double" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Double" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Double})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Double" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Double" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Double" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the minimum value in a sequence of nullable
            <see cref="T:System.Double" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the minimum nullable <see cref="T:System.Double" /> value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns the maximum value in a sequence of nullable
            <see cref="T:System.Double" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the maximum nullable <see cref="T:System.Double" /> value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Decimal})">
            <summary>
            Computes the sum of a sequence of <see cref="T:System.Decimal" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Decimal" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Decimal})">
            <summary>
            Computes the average of a sequence of <see cref="T:System.Decimal" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the sum of a sequence of nullable <see cref="T:System.Decimal" />
            values that are obtained by invoking a transform function on
            each element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values
            that are obtained by invoking a transform function on each
            element of the input sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the minimum value in a sequence of nullable
            <see cref="T:System.Decimal" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the minimum nullable <see cref="T:System.Decimal" /> value.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Returns the maximum value in a sequence of nullable
            <see cref="T:System.Decimal" /> values.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Invokes a transform function on each element of a sequence and
            returns the maximum nullable <see cref="T:System.Decimal" /> value.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IGrouping`2">
            <summary>
            Represents a collection of objects that have a common key.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IGrouping`2.Key">
            <summary>
            Gets the key of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IGrouping`2" />.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.ILookup`2">
            <summary>
            Defines an indexer, size property, and Boolean search method for
            data structures that map keys to <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            sequences of values.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IOrderedEnumerable`1">
            <summary>
            Represents a sorted sequence.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IOrderedEnumerable`1.CreateOrderedEnumerable``1(RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Performs a subsequent ordering on the elements of an
            <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.IOrderedEnumerable`1"/> according to a key.
            </summary>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2">
            <summary>
            Represents a collection of keys each mapped to one or more values.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2.Count">
            <summary>
            Gets the number of key/value collection pairs in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2" />.
            </summary>
        </member>
        <member name="P:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2.Item(`0)">
            <summary>
            Gets the collection of values indexed by the specified key.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2.Contains(`0)">
            <summary>
            Determines whether a specified key is in the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2" />.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2.ApplyResultSelector``1(RRQMCore.XREF.Newtonsoft.Json.Serialization.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
            <summary>
            Applies a transform function to each key and its associated
            values and returns the results.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2.GetEnumerator">
            <summary>
            Returns a generic enumerator that iterates through the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Lookup`2" />.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.OrderedEnumerable`2.TagPosition(`0,System.Int32)">
            <remarks>
            See <a href="http://code.google.com/p/linqbridge/issues/detail?id=11">issue #11</a>
            for why this method is needed and cannot be expressed as a
            lambda at the call site.
            </remarks>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.OrderedEnumerable`2.GetFirst(RRQMCore.XREF.Newtonsoft.Json.Utilities.LinqBridge.Tuple{`0,System.Int32})">
            <remarks>
            See <a href="http://code.google.com/p/linqbridge/issues/detail?id=11">issue #11</a>
            for why this method is needed and cannot be expressed as a
            lambda at the call site.
            </remarks>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
            <summary>
            Gets the type of the typed collection's items.
            </summary>
            <param name="type">The type.</param>
            <returns>The type of the typed collection's items.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
            <summary>
            Gets the member's underlying type.
            </summary>
            <param name="member">The member.</param>
            <returns>The underlying type of the member.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the member is an indexed property.
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the property is an indexed property.
            </summary>
            <param name="property">The property.</param>
            <returns>
            	<c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
            <summary>
            Gets the member's value on the object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target object.</param>
            <returns>The member's value on the object.</returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
            <summary>
            Sets the member's value on the target object.
            </summary>
            <param name="member">The member.</param>
            <param name="target">The target.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
            <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
            <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
            <param name="member">The MemberInfo to determine whether can be set.</param>
            <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
            <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
            <returns>
            	<c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.Utilities.StringBuffer">
            <summary>
            Builds a string. Unlike <see cref="T:System.Text.StringBuilder"/> this class lets you reuse its internal buffer.
            </summary>
        </member>
        <member name="M:RRQMCore.XREF.Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
            <summary>
            Determines whether the string is all white space. Empty string will return <c>false</c>.
            </summary>
            <param name="s">The string to test whether it is all white space.</param>
            <returns>
            	<c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:RRQMCore.XREF.Newtonsoft.Json.WriteState">
            <summary>
            Specifies the state of the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/>.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.WriteState.Error">
            <summary>
            An exception has been thrown, which has left the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> in an invalid state.
            You may call the <see cref="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Close"/> method to put the <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> in the <c>Closed</c> state.
            Any other <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> method calls result in an <see cref="T:System.InvalidOperationException"/> being thrown.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.WriteState.Closed">
            <summary>
            The <see cref="M:RRQMCore.XREF.Newtonsoft.Json.JsonWriter.Close"/> method has been called.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.WriteState.Object">
            <summary>
            An object is being written.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.WriteState.Array">
            <summary>
            An array is being written.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.WriteState.Constructor">
            <summary>
            A constructor is being written.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.WriteState.Property">
            <summary>
            A property is being written.
            </summary>
        </member>
        <member name="F:RRQMCore.XREF.Newtonsoft.Json.WriteState.Start">
            <summary>
            A <see cref="T:RRQMCore.XREF.Newtonsoft.Json.JsonWriter"/> write method has not been called.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ExtensionAttribute">
            <remarks>
            This attribute allows us to define extension methods without
            requiring .NET Framework 3.5. For more information, see the section,
            <a href="http://msdn.microsoft.com/en-us/magazine/cc163317.aspx#S7">Extension Methods in .NET Framework 2.0 Apps</a>,
            of <a href="http://msdn.microsoft.com/en-us/magazine/cc163317.aspx">Basic Instincts: Extension Methods</a>
            column in <a href="http://msdn.microsoft.com/msdnmag/">MSDN Magazine</a>,
            issue <a href="http://msdn.microsoft.com/en-us/magazine/cc135410.aspx">Nov 2007</a>.
            </remarks>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileOperator">
            <summary>
            文件传输操作器
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileOperator.SetFileResult(RRQMCore.Result)">
            <summary>
            设置状态
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileRequest">
            <summary>
            请求信息
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileRequest.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileRequest.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path"></param>
            <param name="savePath"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileRequest.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="path"></param>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileRequest.Flags">
            <summary>
            传输标识
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileRequest.FileCheckerType">
            <summary>
            文件验证类型
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileRequest.SavePath">
            <summary>
            存放路径，
            可输入绝对路径，也可以输入相对路径。
            但是必须包含文件名及扩展名。
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileRequest.Overwrite">
            <summary>
            覆盖保存
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileRequest.Path">
            <summary>
            文件路径，
            可输入绝对路径，也可以输入相对路径。
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileTool">
            <summary>
            文件Hash校验
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileTool.GetFileHashID(System.String,RRQMSocket.FileTransfer.FileCheckerType)">
            <summary>
            获取文件Hash
            </summary>
            <param name="path"></param>
            <param name="fileCheckerType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileTool.GetFileHashID(System.IO.FileStream,RRQMSocket.FileTransfer.FileCheckerType)">
            <summary>
            获取文件唯一ID
            </summary>
            <param name="fileStream"></param>
            <param name="fileCheckerType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileTool.GetFileInfo(System.String,RRQMSocket.FileTransfer.FileCheckerType)">
            <summary>
            获取文件信息
            </summary>
            <param name="path"></param>
            <param name="fileCheckerType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileTool.TryReadFileInfoFromPath(System.String,RRQMSocket.FileTransfer.RRQMFileInfo@)">
            <summary>
            读取缓存文件信息
            </summary>
            <param name="path"></param>
            <param name="fileInfo"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileTool.TryReadFileInfoFromPath(System.String,RRQMSocket.FileTransfer.RRQMFileInfo@,RRQMSocket.FileTransfer.RRQMStream@)">
            <summary>
            读取缓存文件信息
            </summary>
            <param name="path"></param>
            <param name="fileInfo"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileUtility">
            <summary>
            文件传输通用
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileUtility.GetDuplicateFileName(System.String)">
            <summary>
            获取不重复文件名
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileUtility.ToFileLengthString(System.Int64)">
            <summary>
            转化为文件大小的字符串，类似10B，10Kb，10Mb，10Gb。
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.PMin">
            <summary>
            最小保留
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.PMax">
            <summary>
            最大保留
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P200">
            <summary>
            Client pull file from SocketClient
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P201">
            <summary>
            Client begin pull file from SocketClient.
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P202">
            <summary>
            Client push file to SocketClient.
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P203">
            <summary>
            SocketClient pull file from client.
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P204">
            <summary>
            SocketClient begin pull file from client.
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P205">
            <summary>
            SocketClient push file to client.
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P206">
            <summary>
            "Client requset push file to client."
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P207">
            <summary>
            "Client push file to client from socketClient."
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P208">
            <summary>
            Client pull file to client request socketClient
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P209">
            <summary>
            Client pull file to client request client
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P210">
            <summary>
            Client pull file to client return info
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileUtility.P211">
            <summary>
            Client pull file to client return info respose
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.RRQMFileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.RRQMFileInfo.FileHashID">
            <summary>
            文件哈希ID
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.RRQMFileInfo.FileLength">
            <summary>
            文件大小
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.RRQMFileInfo.FileName">
            <summary>
            文件名
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.RRQMFileInfo.FilePath">
            <summary>
            文件路径
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.RRQMFileInfo.Posotion">
            <summary>
            流位置
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.RRQMStream">
            <summary>
            文件流
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.RRQMStream.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.RRQMStream.StreamType">
            <summary>
            流类型
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMStream.Dispose">
            <summary>
            不支持操作
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.RRQMStream.SaveInterval">
            <summary>
            进度保存时间，默认1000毫秒。
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMStream.SaveProgress">
            <summary>
            保存进度
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.RRQMStreamPool">
            <summary>
            文件流池
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMStreamPool.FinishedReadStream(System.String)">
            <summary>
            完成读取信号
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMStreamPool.LoadReadStream(System.String,RRQMSocket.FileTransfer.RRQMFileInfo@,System.String@)">
            <summary>
            加载读取流
            </summary>
            <param name="path"></param>
            <param name="fileInfo"></param>
            <param name="mes"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMStreamPool.LoadWriteStream(System.String,System.Object,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.RRQMFileInfo@,RRQMSocket.FileTransfer.RRQMStream@,System.String@)">
            <summary>
            加载写入流
            </summary>
            <param name="path"></param>
            <param name="owner"></param>
            <param name="fileRequest"></param>
            <param name="fileInfo"></param>
            <param name="stream"></param>
            <param name="mes"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMStreamPool.ReadBytes(System.String,System.String@,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            读取字节,线程安全
            </summary>
            <param name="path"></param>
            <param name="mes"></param>
            <param name="beginPosition"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMStreamPool.RemoveWriteStreamOwner(System.String)">
            <summary>
            移除流的拥有信息，从而可以调用<see cref="M:RRQMSocket.FileTransfer.RRQMStreamPool.TryReleaseWriteStream(System.String,System.Object)"/>,
            然后绝对释放流。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMStreamPool.TryReleaseReadStream(System.String)">
            <summary>
            尝试释放流
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMStreamPool.TryReleaseWriteStream(System.String,System.Object)">
            <summary>
            释放写入流
            </summary>
            <param name="path"></param>
            <param name="owner"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.FileTransfer.WaitFileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitFileInfo.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitFileInfo.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitFileInfo.FileRequest">
            <summary>
            文件请求
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitFileInfo.ClientID">
            <summary>
            ClientID
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitFileInfo.EventHashCode">
            <summary>
            事件Code
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitFileInfo.PackageSize">
            <summary>
            包长度
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.WaitTransfer">
            <summary>
            等待传输
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitTransfer.ClientID">
            <summary>
            客户端ID
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitTransfer.ChannelID">
            <summary>
            通道标识
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitTransfer.Path">
            <summary>
            路径
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitTransfer.Position">
            <summary>
            流位置
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitTransfer.EventHashCode">
            <summary>
            事件Code
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.WaitTransfer.PackageSize">
            <summary>
            包长度
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileConfigExtensions">
            <summary>
            文件配置扩展
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileConfigExtensions.RootPathProperty">
            <summary>
            根目录
            所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileConfigExtensions.ResponseTypeProperty">
            <summary>
            允许的响应类型,
             所需类型<see cref="T:RRQMSocket.FileTransfer.ResponseType"/>
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileConfigExtensions.SetRootPath(RRQMSocket.RRQMConfig,System.String)">
            <summary>
            设置根路径
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileConfigExtensions.SetResponseType(RRQMSocket.RRQMConfig,RRQMSocket.FileTransfer.ResponseType)">
            <summary>
            设置允许的响应类型
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.FileTransfer.RRQMFileOperationEventHandler`1">
            <summary>
            传输文件操作处理
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.FileTransfer.RRQMTransferFileEventHandler`1">
            <summary>
            传输文件消息
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileCheckerType">
            <summary>
            文件检验类型
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileCheckerType.None">
            <summary>
            不验证
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileCheckerType.MD5">
            <summary>
            MD5
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.FileCheckerType.SHA1">
            <summary>
            SHA1
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.RequestStatus">
            <summary>
            请求状态
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.RequestStatus.Hovering">
            <summary>
            未开始
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.RequestStatus.InProgress">
            <summary>
            正在进行
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.RequestStatus.Finished">
            <summary>
            完成
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.ResponseType">
            <summary>
            允许的响应类型
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.ResponseType.None">
            <summary>
            不响应任何请求
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.ResponseType.Push">
            <summary>
            仅响应推送
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.ResponseType.Pull">
            <summary>
            仅响应下拉
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.ResponseType.Both">
            <summary>
            都响应
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.StreamOperationType">
            <summary>
            流操作类型
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.StreamOperationType.Read">
            <summary>
            读
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.StreamOperationType.Write">
            <summary>
            写
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.StreamOperationType.RRQMWrite">
            <summary>
            缓存文件写入
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.TransferFlags">
            <summary>
            传输标识
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.TransferFlags.None">
            <summary>
            无任何标识
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.TransferFlags.BreakpointResume">
            <summary>
            断点续传
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.TransferFlags.QuickTransfer">
            <summary>
            快速传输
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.TransferType">
            <summary>
            传输类型
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.TransferType.Push">
            <summary>
            推送
            </summary>
        </member>
        <member name="F:RRQMSocket.FileTransfer.TransferType.Pull">
            <summary>
            拉去
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileOperationEventArgs">
            <summary>
            操作文件事件类
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileOperationEventArgs.#ctor(RRQMSocket.FileTransfer.TransferType,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata,RRQMSocket.FileTransfer.RRQMFileInfo)">
            <summary>
            构造函数
            </summary>
            <param name="transferType"></param>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <param name="fileInfo"></param>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileOperationEventArgs.FileOperator">
            <summary>
            文件操作器
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileTransferEventArgs">
            <summary>
            文件传输事件
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileTransferEventArgs.#ctor(RRQMSocket.FileTransfer.TransferType,RRQMSocket.FileTransfer.FileRequest,RRQMCore.Metadata,RRQMSocket.FileTransfer.RRQMFileInfo)">
            <summary>
            构造函数
            </summary>
            <param name="transferType"></param>
            <param name="fileRequest"></param>
            <param name="metadata"></param>
            <param name="fileInfo"></param>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileTransferEventArgs.FileRequest">
            <summary>
            文件请求
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileTransferEventArgs.TransferType">
            <summary>
            传输类型
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileTransferEventArgs.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileTransferEventArgs.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileTransferStatusEventArgs">
            <summary>
            文件传输状态
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileTransferStatusEventArgs.#ctor(RRQMSocket.FileTransfer.TransferType,RRQMSocket.FileTransfer.FileRequest,RRQMCore.Metadata,RRQMCore.Result,RRQMSocket.FileTransfer.RRQMFileInfo)">
            <summary>
            构造函数
            </summary>
            <param name="transferType"></param>
            <param name="fileRequest"></param>
            <param name="metadata"></param>
            <param name="result"></param>
            <param name="fileInfo"></param>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileTransferStatusEventArgs.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.RRQMPathInvalidException">
            <summary>
            路径不合法
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMPathInvalidException.#ctor">
             <summary>
            <inheritdoc/>
             </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMPathInvalidException.#ctor(System.String)">
             <summary>
            <inheritdoc/>
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMPathInvalidException.#ctor(System.String,System.Exception)">
             <summary>
            <inheritdoc/>
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.RRQMPathInvalidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            <inheritdoc/>
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileClientExtensions">
            <summary>
            文件客户端辅助扩展
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClientExtensions.PushFiles(RRQMSocket.FileTransfer.IFileClientBase,System.Int32,RRQMSocket.FileTransfer.FileRequest[],RRQMSocket.FileTransfer.FileOperator[],RRQMCore.Metadata[])">
            <summary>
            批量推送文件
            </summary>
            <param name="client">终端</param>
            <param name="multipleCount">并行数量</param>
            <param name="fileRequests">批量请求头</param>
            <param name="fileOperators">批量操作器</param>
            <param name="metadatas">批量元数据</param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClientExtensions.PullFiles(RRQMSocket.FileTransfer.IFileClientBase,System.Int32,RRQMSocket.FileTransfer.FileRequest[],RRQMSocket.FileTransfer.FileOperator[],RRQMCore.Metadata[])">
            <summary>
            批量拉取文件
            </summary>
            <param name="client">终端</param>
            <param name="multipleCount">并行数量</param>
            <param name="fileRequests">批量请求头</param>
            <param name="fileOperators">批量操作器</param>
            <param name="metadatas">批量元数据</param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClientExtensions.PushFilesAsync(RRQMSocket.FileTransfer.IFileClientBase,System.Int32,RRQMSocket.FileTransfer.FileRequest[],RRQMSocket.FileTransfer.FileOperator[],RRQMCore.Metadata[])">
            <summary>
            异步批量推送文件
            </summary>
            <param name="client">终端</param>
            <param name="multipleCount">并行数量</param>
            <param name="fileRequests">批量请求头</param>
            <param name="fileOperators">批量操作器</param>
            <param name="metadatas">批量元数据</param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClientExtensions.PullFilesAsync(RRQMSocket.FileTransfer.IFileClientBase,System.Int32,RRQMSocket.FileTransfer.FileRequest[],RRQMSocket.FileTransfer.FileOperator[],RRQMCore.Metadata[])">
            <summary>
            异步批量拉取文件
            </summary>
            <param name="client">终端</param>
            <param name="multipleCount">并行数量</param>
            <param name="fileRequests">批量请求头</param>
            <param name="fileOperators">批量操作器</param>
            <param name="metadatas">批量元数据</param>
        </member>
        <member name="T:RRQMSocket.FileTransfer.IFileClient">
            <summary>
            文件终端接口
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFileClient.PullFile(System.String,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            从对点拉取文件
            </summary>
            <param name="clientID"></param>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFileClient.PullFileAsync(System.String,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            异步从对点拉取文件
            </summary>
            <param name="clientID"></param>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFileClient.PushFile(System.String,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            向对点推送文件
            </summary>
            <param name="clientID"></param>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFileClient.PushFileAsync(System.String,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            异步向对点推送文件
            </summary>
            <param name="clientID"></param>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.FileTransfer.IFileClientBase">
            <summary>
            文件服务器基类
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.IFileClientBase.RootPath">
            <summary>
            根路径
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.IFileClientBase.ResponseType">
            <summary>
            允许响应远程请求的类型。
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFileClientBase.PullFile(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            从对点拉取文件
            </summary>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFileClientBase.PullFileAsync(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            异步从对点拉取文件
            </summary>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFileClientBase.PushFile(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            向对点推送文件
            </summary>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFileClientBase.PushFileAsync(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            异步向对点推送文件
            </summary>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.FileTransfer.IFilePlugin">
            <summary>
            文件插件接口
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFilePlugin.OnFileTransfering(RRQMSocket.FileTransfer.IFileClientBase,RRQMSocket.FileTransfer.FileOperationEventArgs)">
            <summary>
            在文件传输即将进行时触发。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.IFilePlugin.OnFileTransfered(RRQMSocket.FileTransfer.IFileClientBase,RRQMSocket.FileTransfer.FileTransferStatusEventArgs)">
            <summary>
            当文件传输结束之后。并不意味着完成传输，请通过<see cref="P:RRQMSocket.FileTransfer.FileTransferStatusEventArgs.Result"/>属性值进行判断。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.FileTransfer.IFileService">
            <summary>
            服务器接口
            </summary>
        </member>
        <member name="E:RRQMSocket.FileTransfer.IFileService.BeforeFileTransfer">
            <summary>
            传输文件之前
            </summary>
        </member>
        <member name="E:RRQMSocket.FileTransfer.IFileService.FinishedFileTransfer">
            <summary>
            当文件传输完成时
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.IFileService.MaxDownloadSpeed">
            <summary>
            最大下载速度
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.IFileService.MaxUploadSpeed">
            <summary>
            最大上传速度
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.Plugins.FilePluginBase">
            <summary>
            文件插件基类
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.Plugins.FilePluginBase.OnFileTransfered(RRQMSocket.FileTransfer.IFileClientBase,RRQMSocket.FileTransfer.FileTransferStatusEventArgs)">
            <summary>
            当文件传输结束之后。并不意味着完成传输，请通过<see cref="P:RRQMSocket.FileTransfer.FileTransferStatusEventArgs.Result"/>属性值进行判断。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.Plugins.FilePluginBase.OnFileTransfering(RRQMSocket.FileTransfer.IFileClientBase,RRQMSocket.FileTransfer.FileOperationEventArgs)">
            <summary>
            在文件传输即将进行时触发。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileClient">
            <summary>
            通讯客户端主类
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:RRQMSocket.FileTransfer.FileClient.FileTransfering">
            <summary>
            在文件传输即将进行时触发。
            </summary>
        </member>
        <member name="E:RRQMSocket.FileTransfer.FileClient.FileTransfered">
            <summary>
            当文件传输结束之后。并不意味着完成传输，请通过<see cref="P:RRQMSocket.FileTransfer.FileTransferStatusEventArgs.Result"/>属性值进行判断。
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileClient.ResponseType">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileClient.RootPath">
            <summary>
            根路径
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.PullFile(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            从对点拉取文件
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.PullFile(System.String,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            从对点拉取文件
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.PullFileAsync(System.String,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="clientID"></param>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.PullFileAsync(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.PushFile(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            将文件推送到对点
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.PushFile(System.String,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            将文件推送到对点
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.PushFileAsync(System.String,RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="clientID"></param>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.PushFileAsync(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.FileTransferHandleDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            文件终端处理其他协议
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.OnFileTransfering(RRQMSocket.FileTransfer.FileOperationEventArgs)">
            <summary>
            在文件传输即将进行时触发。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.OnFileTransfered(RRQMSocket.FileTransfer.FileTransferStatusEventArgs)">
            <summary>
            当文件传输结束之后。并不意味着完成传输，请通过<see cref="P:RRQMSocket.FileTransfer.FileTransferStatusEventArgs.Result"/>属性值进行判断。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.HandleRpcDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileClient.P203_P209_RequestPullFile(RRQMSocket.FileTransfer.WaitFileInfo)">
            <summary>
            客户端请求下拉文件
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileService`1">
            <summary>
            泛型文件服务器
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileService`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:RRQMSocket.FileTransfer.FileService`1.FileTransfering">
            <summary>
            文件传输开始之前
            </summary>
        </member>
        <member name="E:RRQMSocket.FileTransfer.FileService`1.FileTransfered">
            <summary>
            当文件传输结束之后。并不意味着完成传输，请通过<see cref="P:RRQMSocket.FileTransfer.FileTransferStatusEventArgs.Result"/>属性值进行判断。
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileService`1.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            载入配置
            </summary>
            <param name="serviceConfig"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileService`1.OnConnecting(`0,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileService">
            <summary>
            文件服务器
            </summary>
        </member>
        <member name="T:RRQMSocket.FileTransfer.FileSocketClient">
            <summary>
            已接收的客户端
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileSocketClient.ResponseType">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.FileTransfer.FileSocketClient.RootPath">
            <summary>
            根路径
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.PullFile(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            从对点拉取文件
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.PullFileAsync(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.PushFile(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            将文件推送到对点
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.PushFileAsync(RRQMSocket.FileTransfer.FileRequest,RRQMSocket.FileTransfer.FileOperator,RRQMCore.Metadata)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="fileRequest"></param>
            <param name="fileOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.FileTransferHandleDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            文件终端处理其他协议
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.OnFileTransfering(RRQMSocket.FileTransfer.FileOperationEventArgs)">
            <summary>
            在传输之前
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.OnFileTransfered(RRQMSocket.FileTransfer.FileTransferStatusEventArgs)">
            <summary>
            当文件传输结束之后。并不意味着完成传输，请通过<see cref="P:RRQMSocket.FileTransfer.FileTransferStatusEventArgs.Result"/>属性值进行判断。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.HandleRpcDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            封装协议
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.OnClose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.P200_RequestPullFile(RRQMSocket.FileTransfer.WaitFileInfo)">
            <summary>
            客户端请求下拉文件
            </summary>
        </member>
        <member name="M:RRQMSocket.FileTransfer.FileSocketClient.P202_RequestPushFile(RRQMSocket.FileTransfer.WaitFileInfo)">
            <summary>
            客户端请求推送文件
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.FileCachePool">
            <summary>
            文件缓存池
            <para>该代码来源网络</para>
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.FileCachePool.InsertHandler">
            <summary>
            添加委托
            </summary>
            <param name="cache"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="P:RRQMSocket.Http.FileCachePool.Empty">
            <summary>
            Is the file cache empty?
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.FileCachePool.Size">
            <summary>
            Get the file cache size
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.Add(System.String,System.Byte[],System.TimeSpan)">
            <summary>
            Add a new cache value with the given timeout into the file cache
            </summary>
            <param name="key">Key to add</param>
            <param name="value">Value to add</param>
            <param name="timeout">Cache timeout (default is 0 - no timeout)</param>
            <returns>'true' if the cache value was added, 'false' if the given key was not added</returns>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.Find(System.String,System.Byte[]@)">
            <summary>
            Try to find the cache value by the given key
            </summary>
            <param name="key">Key to find</param>
            <param name="data"></param>
            <returns>'true' and cache value if the cache value was found, 'false' if the given key was not found</returns>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.Remove(System.String)">
            <summary>
            Remove the cache value with the given key from the file cache
            </summary>
            <param name="key">Key to remove</param>
            <returns>'true' if the cache value was removed, 'false' if the given key was not found</returns>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.InsertPath(System.String,System.String,System.String,System.TimeSpan,RRQMSocket.Http.FileCachePool.InsertHandler)">
            <summary>
            Insert a new cache path with the given timeout into the file cache
            </summary>
            <param name="path">Path to insert</param>
            <param name="prefix">Cache prefix (default is "/")</param>
            <param name="filter">Cache filter (default is "*.*")</param>
            <param name="timeout">Cache timeout (default is 0 - no timeout)</param>
            <param name="handler">Cache insert handler (default is 'return cache.Add(key, value, timeout)')</param>
            <returns>'true' if the cache path was setup, 'false' if failed to setup the cache path</returns>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.FindPath(System.String)">
            <summary>
            Try to find the cache path
            </summary>
            <param name="path">Path to find</param>
            <returns>'true' if the cache path was found, 'false' if the given path was not found</returns>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.RemovePath(System.String)">
            <summary>
            Remove the cache path from the file cache
            </summary>
            <param name="path">Path to remove</param>
            <returns>'true' if the cache path was removed, 'false' if the given path was not found</returns>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.Clear">
            <summary>
            Clear the memory cache
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposingManagedResources"></param>
        </member>
        <member name="M:RRQMSocket.Http.FileCachePool.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.HttpBase">
            <summary>
            Http基础头部
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpBase.ServerVersion">
            <summary>
            服务器版本
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.GetBody">
            <summary>
            字符数据
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpBase.contentLength">
            <summary>
            内容长度
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpBase.ContentLength">
            <summary>
            内容长度
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpBase.ContentLen">
            <summary>
            int类型，内容长度
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.GetContent">
            <summary>
            内容器
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpBase.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpBase.Encoding">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpBase.Flag">
            <summary>
            传递标识
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpBase.Headers">
            <summary>
            请求头集合
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpBase.Protocols">
            <summary>
            协议名称，默认HTTP
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpBase.ProtocolVersion">
            <summary>
            HTTP协议版本，默认1.1
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpBase.RequestLine">
            <summary>
            请求行
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.Build(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建数据
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.GetHeader(RRQMSocket.Http.HttpHeaders)">
            <summary>
            获取头值
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.ParsingContent(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.ParsingHeader(RRQMCore.ByteManager.ByteBlock,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.LoadHeaderProterties">
            <summary>
            读取信息
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.ReadHeaders(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从内存中读取
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.SetContent(System.Byte[])">
            <summary>
            设置内容
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.SetContent(System.String,System.Text.Encoding)">
            <summary>
            设置内容
            </summary>
            <param name="content"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.GetHeaderByKey(System.Enum)">
            <summary>
            获取头集合的值
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.GetHeaderByKey(System.String)">
            <summary>
            获取头集合的值
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.SetHeaderByKey(System.Enum,System.String)">
            <summary>
            设置头值
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpBase.SetHeaderByKey(System.String,System.String)">
            <summary>
            设置头值
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="T:RRQMSocket.Http.HttpRequest">
            <summary>
            HTTP请求定义
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpRequest.Forms">
            <summary>
            表单参数
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpRequest.KeepAlive">
            <summary>
            获取时候保持连接
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpRequest.Method">
            <summary>
            HTTP请求方式
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpRequest.Params">
            <summary>
            URL参数
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpRequest.Query">
            <summary>
            url参数
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpRequest.RelativeURL">
            <summary>
            相对路径（不含参数）
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpRequest.URL">
            <summary>
            HTTP(S)地址
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequest.Build(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建响应数据
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequest.GetContent">
            <summary>
            获取内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequest.GetHeader(System.String)">
            <summary>
            获取头值
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequest.SetContent(System.Byte[])">
            <summary>
            设置内容
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequest.SetHeader(RRQMSocket.Http.HttpHeaders,System.String)">
            <summary>
            设置头值
            </summary>
            <param name="header"></param>
            <param name="value"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequest.SetHeader(System.String,System.String)">
            <summary>
            设置头值
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequest.ToString">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequest.LoadHeaderProterties">
            <summary>
            从内存中读取
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequest.BuildHeader(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建响应头部
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.Http.HttpResponse">
            <summary>
            Http响应
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpResponse.StatusCode">
            <summary>
            状态码，默认200
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpResponse.HasChunk">
            <summary>
            是否包含分块
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpResponse.Chunks">
            <summary>
            分块数据
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpResponse.StatusMessage">
            <summary>
            状态消息，默认Success
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponse.Build(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建响应数据
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponse.GetHeader(System.String)">
            <summary>
            获取头数据
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponse.LoadHeaderProterties">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponse.SetHeader(RRQMSocket.Http.HttpHeaders,System.String)">
            <summary>
            设置头数据
            </summary>
            <param name="header"></param>
            <param name="value"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponse.SetHeader(System.String,System.String)">
            <summary>
            设置头数据
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponse.BuildHeader(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建响应头部
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponse.GetContent">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponse.SetContent(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:RRQMSocket.Http.Common.HttpTools">
            <summary>
            工具类
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.HttpClientDataHandlingAdapter">
            <summary>
            Http客户端数据处理适配器
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpClientDataHandlingAdapter.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="maxSize"></param>
        </member>
        <member name="P:RRQMSocket.Http.HttpClientDataHandlingAdapter.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpClientDataHandlingAdapter.Filter(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Boolean,RRQMSocket.Http.HttpResponse@)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <param name="length"></param>
            <param name="beCached"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.Http.HttpClientDataHandlingAdapterCopy">
            <summary>
            Http客户端数据处理适配器
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpClientDataHandlingAdapterCopy.tempByteBlock">
            <summary>
            缓存数据，如果需要手动释放，请先判断，然后到调用<see cref="M:RRQMCore.ByteManager.ByteBlock.Dispose(System.Boolean)"/>后，再置空；
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpClientDataHandlingAdapterCopy.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpClientDataHandlingAdapterCopy.PreviewReceived(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMSocket.Http.HttpServerDataHandlingAdapter">
            <summary>
            Http服务器数据处理适配器
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpServerDataHandlingAdapter.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="maxSize"></param>
        </member>
        <member name="P:RRQMSocket.Http.HttpServerDataHandlingAdapter.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpServerDataHandlingAdapter.Filter(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Boolean,RRQMSocket.Http.HttpRequest@)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"><inheritdoc/></param>
            <param name="length"><inheritdoc/></param>
            <param name="beCached"><inheritdoc/></param>
            <param name="request"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="T:RRQMSocket.Http.HttpHeaders">
            <summary>
            请求头枚举
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.CacheControl">
            <summary>
            Cache-Control 标头，指定请求/响应链上所有缓存控制机制必须服从的指令。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Connection">
            <summary>
            Connection 标头，指定特定连接需要的选项。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Date">
            <summary>
            Date 标头，指定开始创建请求的日期和时间。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.KeepAlive">
            <summary>
            Keep-Alive 标头，指定用以维护持久性连接的参数。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Pragma">
            <summary>
            Pragma 标头，指定可应用于请求/响应链上的任何代理的特定于实现的指令。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Trailer">
            <summary>
            Trailer 标头，指定标头字段显示在以 chunked 传输编码方式编码的消息的尾部。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.TransferEncoding">
            <summary>
            Transfer-Encoding 标头，指定对消息正文应用的转换的类型（如果有）。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Upgrade">
            <summary>
            Upgrade 标头，指定客户端支持的附加通信协议。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Via">
            <summary>
            Via 标头，指定网关和代理程序要使用的中间协议。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Warning">
            <summary>
            Warning 标头，指定关于可能未在消息中反映的消息的状态或转换的附加信息。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Allow">
            <summary>
            Allow 标头，指定支持的 HTTP 方法集。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ContentLength">
            <summary>
            Content-Length 标头，指定伴随正文数据的长度（以字节为单位）。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ContentType">
            <summary>
            Content-Type 标头，指定伴随正文数据的 MIME 类型。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ContentEncoding">
            <summary>
            Content-Encoding 标头，指定已应用于伴随正文数据的编码。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ContentLanguage">
            <summary>
            Content-Langauge 标头，指定伴随正文数据的自然语言。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ContentLocation">
            <summary>
            Content-Location 标头，指定可从其中获得伴随正文的 URI。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ContentMd5">
            <summary>
            Content-MD5 标头，指定伴随正文数据的 MD5 摘要，用于提供端到端消息完整性检查。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ContentRange">
            <summary>
            Content-Range 标头，指定在完整正文中应用伴随部分正文数据的位置。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Expires">
            <summary>
            Expires 标头，指定日期和时间，在此之后伴随的正文数据应视为陈旧的。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.LastModified">
            <summary>
            Last-Modified 标头，指定上次修改伴随的正文数据的日期和时间。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Accept">
            <summary>
            Accept 标头，指定响应可接受的 MIME 类型。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.AcceptCharset">
            <summary>
            Accept-Charset 标头，指定响应可接受的字符集。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.AcceptEncoding">
            <summary>
            Accept-Encoding 标头，指定响应可接受的内容编码。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.AcceptLanguage">
            <summary>
            Accept-Langauge 标头，指定响应首选的自然语言。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Authorization">
            <summary>
            Authorization 标头，指定客户端为向服务器验证自身身份而出示的凭据。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Cookie">
            <summary>
            Cookie 标头，指定向服务器提供的 Cookie 数据。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Expect">
            <summary>
            Expect 标头，指定客户端要求的特定服务器行为。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.From">
            <summary>
            From 标头，指定控制请求用户代理的用户的 Internet 电子邮件地址。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Host">
            <summary>
            Host 标头，指定所请求资源的主机名和端口号。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.IfMatch">
            <summary>
            If-Match 标头，指定仅当客户端的指示资源的缓存副本是最新的时，才执行请求的操作。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.IfModifiedSince">
            <summary>
            If-Modified-Since 标头，指定仅当自指示的数据和时间之后修改了请求的资源时，才执行请求的操作。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.IfNoneMatch">
            <summary>
            If-None-Match 标头，指定仅当客户端的指示资源的缓存副本都不是最新的时，才执行请求的操作。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.IfRange">
            <summary>
            If-Range 标头，指定如果客户端的缓存副本是最新的，仅发送指定范围的请求资源。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.IfUnmodifiedSince">
            <summary>
            If-Unmodified-Since 标头，指定仅当自指示的日期和时间之后修改了请求的资源时，才执行请求的操作。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.MaxForwards">
            <summary>
            Max-Forwards 标头，指定一个整数，表示此请求还可转发的次数。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ProxyAuthorization">
            <summary>
            Proxy-Authorization 标头，指定客户端为向代理验证自身身份而出示的凭据。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Referer">
            <summary>
            Referer 标头，指定从中获得请求 URI 的资源的 URI。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Range">
            <summary>
            Range 标头，指定代替整个响应返回的客户端请求的响应的子范围。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Te">
            <summary>
            TE 标头，指定响应可接受的传输编码方式。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Translate">
            <summary>
            Translate 标头，与 WebDAV 功能一起使用的 HTTP 规范的 Microsoft 扩展。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.UserAgent">
            <summary>
            User-Agent 标头，指定有关客户端代理的信息。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.AcceptRanges">
            <summary>
            Accept-Ranges 标头，指定服务器接受的范围。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Age">
            <summary>
            Age 标头，指定自起始服务器生成响应以来的时间长度（以秒为单位）。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ETag">
            <summary>
            Etag 标头，指定请求的变量的当前值。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Location">
            <summary>
            Location 标头，指定为获取请求的资源而将客户端重定向到的 URI。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.ProxyAuthenticate">
            <summary>
            Proxy-Authenticate 标头，指定客户端必须对代理验证其自身。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.RetryAfter">
            <summary>
            Retry-After 标头，指定某个时间（以秒为单位）或日期和时间，在此时间之后客户端可以重试其请求。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Server">
            <summary>
            Server 标头，指定关于起始服务器代理的信息。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.SetCookie">
            <summary>
            Set-Cookie 标头，指定提供给客户端的 Cookie 数据。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Vary">
            <summary>
            Vary 标头，指定用于确定缓存的响应是否为新响应的请求标头。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.WwwAuthenticate">
            <summary>
            WWW-Authenticate 标头，指定客户端必须对服务器验证其自身。
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpHeaders.Origin">
            <summary>
            Origin。
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.HttpContextEventArgs">
            <summary>
            Http请求事件类
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpContextEventArgs.#ctor(RRQMSocket.Http.HttpRequest)">
            <summary>
            构造函数
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpContextEventArgs.#ctor(RRQMSocket.Http.HttpRequest,RRQMSocket.Http.HttpResponse)">
            <summary>
            构造函数
            </summary>
            <param name="request"></param>
            <param name="response"></param>
        </member>
        <member name="P:RRQMSocket.Http.HttpContextEventArgs.Request">
            <summary>
            Http请求
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpContextEventArgs.Response">
            <summary>
            Http响应。
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.HttpRequestExtensions">
            <summary>
            HttpRequest扩展
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.SetUrl(RRQMSocket.Http.HttpRequest,System.String)">
            <summary>
            设置Url，必须以“/”开头，可带参数
            </summary>
            <param name="httpRequest"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.AsGet(RRQMSocket.Http.HttpRequest)">
            <summary>
            作为Get访问
            </summary>
            <param name="httpRequest"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.AsPost(RRQMSocket.Http.HttpRequest)">
            <summary>
            作为Post访问
            </summary>
            <param name="httpRequest"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.AsPUT(RRQMSocket.Http.HttpRequest)">
            <summary>
            作为Put访问
            </summary>
            <param name="httpRequest"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.AsDelete(RRQMSocket.Http.HttpRequest)">
            <summary>
            作为Delete访问
            </summary>
            <param name="httpRequest"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.InitHeaders(RRQMSocket.Http.HttpRequest)">
            <summary>
            初始化常规的请求头。
            <para>包含：</para>
            <list type="number">
            <item>Connection:keep-alive</item>
            <item>Pragma:no-cache</item>
            <item>UserAgent:RRQMSocket.Http</item>
            <item>Accept:*/*</item>
            <item>AcceptEncoding:deflate, br</item>
            </list>
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.SetHost(RRQMSocket.Http.HttpRequest,System.String)">
            <summary>
            添加Host请求头
            </summary>
            <param name="request"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.FromXML(RRQMSocket.Http.HttpRequest,System.String)">
            <summary>
            从Xml格式
            </summary>
            <param name="httpRequest"></param>
            <param name="xmlText"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.FromJson(RRQMSocket.Http.HttpRequest,System.String)">
            <summary>
            从Json
            </summary>
            <param name="httpRequest"></param>
            <param name="jsonText"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpRequestExtensions.FromText(RRQMSocket.Http.HttpRequest,System.String)">
            <summary>
            从文本
            </summary>
            <param name="httpRequest"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.Http.HttpResponseExtensions">
            <summary>
            HttpResponse扩展
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponseExtensions.FileNotFind(RRQMSocket.Http.HttpResponse)">
            <summary>
            路径文件没找到
            </summary>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponseExtensions.SetContentTypeByExtension(RRQMSocket.Http.HttpResponse,System.String)">
            <summary>
            从扩展名设置内容类型，必须以“.”开头
            </summary>
            <param name="response"></param>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponseExtensions.FromXML(RRQMSocket.Http.HttpResponse,System.String,System.String)">
            <summary>
            从Xml格式
            </summary>
            <param name="response"></param>
            <param name="xmlText"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponseExtensions.FromJson(RRQMSocket.Http.HttpResponse,System.String,System.String)">
            <summary>
            从Json
            </summary>
            <param name="response"></param>
            <param name="jsonText"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponseExtensions.FromText(RRQMSocket.Http.HttpResponse,System.String,System.String)">
            <summary>
            从文本
            </summary>
            <param name="response"></param>
            <param name="statusCode"></param>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponseExtensions.FromSuccess(RRQMSocket.Http.HttpResponse,System.String)">
            <summary>
            返回成功
            </summary>
            <param name="response"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpResponseExtensions.GetContentTypeFromExtension(System.String)">
            <summary>
            从扩展名获取ContentType
            </summary>
            <param name="extension"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.Http.HttpCommon.HttpBase">
            <summary>
            Http基础头部
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpCommon.HttpBase.ServerVersion">
            <summary>
            服务器版本
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:RRQMSocket.Http.HttpCommon.HttpBase.contentLength">
            <summary>
            内容长度
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpBase.ContentLength">
            <summary>
            内容长度
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpBase.ContentLen">
            <summary>
            int类型，内容长度
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpBase.ContentType">
            <summary>
            内容类型
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpBase.Encoding">
            <summary>
            编码方式
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpBase.Flag">
            <summary>
            传递标识
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpBase.Headers">
            <summary>
            请求头集合
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpBase.Protocols">
            <summary>
            协议名称，默认HTTP
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpBase.ProtocolVersion">
            <summary>
            HTTP协议版本，默认1.1
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpBase.RequestLine">
            <summary>
            请求行
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpBase.GetHeader(RRQMSocket.Http.HttpHeaders)">
            <summary>
            获取头值
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpBase.ParsingHeader(RRQMCore.ByteManager.ByteBlock,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpBase.LoadHeaderProterties">
            <summary>
            读取信息
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpBase.ReadHeaders(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从内存中读取
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpBase.GetHeaderByKey(System.Enum)">
            <summary>
            获取头集合的值
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpBase.GetHeaderByKey(System.String)">
            <summary>
            获取头集合的值
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpBase.SetHeaderByKey(System.Enum,System.String)">
            <summary>
            设置头值
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpBase.SetHeaderByKey(System.String,System.String)">
            <summary>
            设置头值
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="T:RRQMSocket.Http.HttpCommon.HttpRequestStream">
            <summary>
            HTTP请求定义
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpRequestStream.Forms">
            <summary>
            表单参数
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpRequestStream.KeepAlive">
            <summary>
            获取时候保持连接
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpRequestStream.Method">
            <summary>
            HTTP请求方式
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpRequestStream.Params">
            <summary>
            URL参数
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpRequestStream.Query">
            <summary>
            url参数
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpRequestStream.RelativeURL">
            <summary>
            相对路径（不含参数）
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpRequestStream.URL">
            <summary>
            HTTP(S)地址
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpRequestStream.Build(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建响应数据
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpRequestStream.GetContent">
            <summary>
            获取内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpRequestStream.GetHeader(System.String)">
            <summary>
            获取头值
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpRequestStream.SetContent(System.Byte[])">
            <summary>
            设置内容
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpRequestStream.SetHeader(RRQMSocket.Http.HttpHeaders,System.String)">
            <summary>
            设置头值
            </summary>
            <param name="header"></param>
            <param name="value"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpRequestStream.SetHeader(System.String,System.String)">
            <summary>
            设置头值
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpRequestStream.ToString">
            <summary>
            输出
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpRequestStream.LoadHeaderProterties">
            <summary>
            从内存中读取
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpRequestStream.BuildHeader(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建响应头部
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.Http.HttpCommon.HttpResponseStream">
            <summary>
            Http响应
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpResponseStream.#ctor(RRQMSocket.ITcpClientBase,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="client"></param>
            <param name="isServer"></param>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpResponseStream.CanWrite">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpResponseStream.CanRead">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpResponseStream.IsChunk">
            <summary>
            是否分块
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpResponseStream.StatusCode">
            <summary>
            状态码，默认200
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.HttpCommon.HttpResponseStream.StatusMessage">
            <summary>
            状态消息，默认Success
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpResponseStream.Flush">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpResponseStream.GetHeader(System.String)">
            <summary>
            获取头数据
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpResponseStream.SetHeader(RRQMSocket.Http.HttpHeaders,System.String)">
            <summary>
            设置头数据
            </summary>
            <param name="header"></param>
            <param name="value"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpResponseStream.SetHeader(System.String,System.String)">
            <summary>
            设置头数据
            </summary>
            <param name="fieldName"></param>
            <param name="value"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpResponseStream.Complete">
            <summary>
            当传输模式是Chunk时，用于结束传输。
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpResponseStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            持续性发送数据。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpResponseStream.LoadHeaderProterties">
            <summary>
            读取数据
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpCommon.HttpResponseStream.BuildHeader(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建响应头部
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.Http.IHttpClientBase">
            <summary>
            Http终端基础接口
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.IHttpClient">
            <summary>
            Http终端接口
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.IHttpClient.Request(RRQMSocket.Http.HttpRequest,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            发起请求
            </summary>
            <param name="request">请求体</param>
            <param name="onlyRequest">仅仅请求，而不等待结果</param>
            <param name="timeout">等待超时时间</param>
            <param name="token">结束等待令箭</param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.Http.IHttpPlugin">
            <summary>
            Http接口
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.IHttpPlugin.OnReceivedOtherHttpRequest(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            在收到其他Http请求时
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Http.IHttpPlugin.OnGet(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            在收到Get时
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Http.IHttpPlugin.OnPut(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            在收到Put时
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Http.IHttpPlugin.OnDelete(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            在收到Delete时
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Http.IHttpPlugin.OnPost(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            在收到Post时
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.Http.Plugins.HttpPluginBase">
            <summary>
            Http扩展基类
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpPluginBase.OnReceivedOtherHttpRequest(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc cref="M:RRQMSocket.Http.IHttpPlugin.OnReceivedOtherHttpRequest(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)"/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpPluginBase.OnGet(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc cref="M:RRQMSocket.Http.IHttpPlugin.OnGet(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)"/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpPluginBase.OnPut(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc cref="M:RRQMSocket.Http.IHttpPlugin.OnPut(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)"/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpPluginBase.OnDelete(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc cref="M:RRQMSocket.Http.IHttpPlugin.OnDelete(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)"/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpPluginBase.OnPost(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc cref="M:RRQMSocket.Http.IHttpPlugin.OnPost(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)"/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.Http.Plugins.HttpStaticPagePlugin">
            <summary>
            Http静态内容插件
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpStaticPagePlugin.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.Http.Plugins.HttpStaticPagePlugin.FileCache">
            <summary>
            静态文件缓存。
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpStaticPagePlugin.AddFolder(System.String,System.String,System.String,System.Nullable{System.TimeSpan})">
            <summary>
            添加静态
            </summary>
            <param name="path">Static content path</param>
            <param name="prefix">Cache prefix (default is "/")</param>
            <param name="filter">Cache filter (default is "*.*")</param>
            <param name="timeout">Refresh cache timeout (default is 1 hour)</param>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpStaticPagePlugin.ClearFolder">
            <summary>
            Clear static content cache
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpStaticPagePlugin.RemoveFolder(System.String)">
            <summary>
            Remove static content cache
            </summary>
            <param name="path">Static content path</param>
        </member>
        <member name="M:RRQMSocket.Http.Plugins.HttpStaticPagePlugin.OnGet(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.Http.HttpClient">
            <summary>
            Http客户端
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.HttpClientBase">
            <summary>
            Http客户端基类
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpClientBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpClientBase.Request(RRQMSocket.Http.HttpRequest,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="request"><inheritdoc/></param>
            <param name="onlyRequest"><inheritdoc/></param>
            <param name="timeout"><inheritdoc/></param>
            <param name="token"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpClientBase.RequestStream(RRQMSocket.Http.HttpRequest,System.Boolean,System.Int32,System.Threading.CancellationToken)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="request"><inheritdoc/></param>
            <param name="onlyRequest"><inheritdoc/></param>
            <param name="timeout"><inheritdoc/></param>
            <param name="token"><inheritdoc/></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Http.HttpClientBase.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpClientBase.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpClientBase.OnConnecting(RRQMSocket.ClientConnectingEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.Http.HttpService`1">
            <summary>
            HTTP/HTTPS服务器
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.HttpService">
            <summary>
            HTTP/HTTPS服务器
            </summary>
        </member>
        <member name="T:RRQMSocket.Http.HttpSocketClient">
            <summary>
            http辅助类
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpSocketClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.Http.HttpSocketClient.OnConnecting(RRQMSocket.ClientOperationEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpSocketClient.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.Http.HttpSocketClient.OnReceivedHttpRequest(RRQMSocket.Http.HttpRequest)">
            <summary>
            当收到到Http请求时。覆盖父类方法将不会触发插件。
            </summary>
        </member>
        <member name="T:RRQMSocket.HttpExtensions">
            <summary>
            Http扩展辅助
            </summary>
        </member>
        <member name="M:RRQMSocket.HttpExtensions.GetDescription(System.Enum)">
            <summary>
            获取DescriptionAttribute
            </summary>
            <param name="enum"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.HttpExtensions.GetEnum``1(System.String,``0@)">
            <summary>
            根据字符串获取枚举
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.KCP.Kcp">
            <summary>
            Kcp实例
            </summary>
        </member>
        <member name="M:RRQMSocket.KCP.Kcp.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.KCP.Kcp.Input(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.KCP.Kcp.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.KCP.Kcp.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.KCP.Kcp.SetOutput(System.Action{System.Byte[],System.Int32,System.Int32})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:RRQMSocket.KCP.Kcp.UpdateClock(System.UInt32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="current"></param>
        </member>
        <member name="T:RRQMSocket.KCP.KcpSegment">
            <summary>
            kcp报文段
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.cmd">
            <summary>
            Command
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.conv">
            <summary>
            连接标识
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.data">
            <summary>
            数据段. 只有数据报文会有这个字段
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.fastack">
            <summary>
            ACK 失序次数. 也就是 KCP Readme 中所说的 "跳过" 次数
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.frg">
            <summary>
            分片数量. 表示随后还有多少个报文属于同一个包
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.len">
            <summary>
            数据段长度
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.resendts">
            <summary>
            重传时间戳. 超过这个时间表示该报文超时, 需要重传
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.rto">
            <summary>
            该报文的 RTO
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.sn">
            <summary>
            报文编号
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.ts">
            <summary>
            时间戳
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.una">
            <summary>
            发送方的接收缓冲区中最小还未收到的报文段的编号. 也就是说, 编号比它小的报文段都已全部接收.
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.wnd">
            <summary>
            发送方剩余接收窗口的大小
            </summary>
        </member>
        <member name="F:RRQMSocket.KCP.KcpSegment.xmit">
            <summary>
            该报文传输的次数.
            </summary>
        </member>
        <member name="T:RRQMSocket.KCP.IKcp">
            <summary>
            kcp接口
            </summary>
        </member>
        <member name="M:RRQMSocket.KCP.IKcp.SetOutput(System.Action{System.Byte[],System.Int32,System.Int32})">
            <summary>
            设置输出回调
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:RRQMSocket.KCP.IKcp.Receive(System.Byte[],System.Int32,System.Int32)">
            <summary>
            阻塞接收数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.KCP.IKcp.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.KCP.IKcp.UpdateClock(System.UInt32)">
            <summary>
            更新时钟
            </summary>
            <param name="current"></param>
        </member>
        <member name="M:RRQMSocket.KCP.IKcp.Input(System.Byte[],System.Int32,System.Int32)">
            <summary>
            输入原始数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RpcAttribute">
            <summary>
            Rpc方法属性基类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RpcAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcAttribute.Async">
            <summary>
            异步执行(默认True)。
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcAttribute.MethodFlags">
            <summary>
            函数标识
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcAttribute.MethodName">
            <summary>
            函数名
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMProxyAttribute">
            <summary>
            代理类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMProxyAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="className"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMProxyAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMProxyAttribute.ClassName">
            <summary>
            代理类名
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.ClassCellCode">
            <summary>
            属性单元代码。
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ClassCellCode.Name">
            <summary>
            属性名
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ClassCellCode.Code">
            <summary>
            代码本体
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.ClassCodeGenerator">
            <summary>
            代码辅助类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ClassCodeGenerator.#ctor(System.Reflection.Assembly)">
            <summary>
            构造函数
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="P:RRQMSocket.RPC.ClassCodeGenerator.Assembly">
            <summary>
            程序集
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ClassCodeGenerator.GetClassCellCodes">
            <summary>
            获取类单元参数
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.ClassCodeGenerator.GetTypeFullName(System.Type)">
            <summary>
            获取类型全名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.CodeGenerator">
            <summary>
            代码生成器
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.CodeGenerator.GeneratorCallback`1">
            <summary>
            生成回调。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodInstance"></param>
            <param name="methodCellCode"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.AddProxyType(System.Type,System.Boolean)">
            <summary>
            添加代理类型
            </summary>
            <param name="type"></param>
            <param name="deepSearch"></param>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.AddProxyType``1(System.Boolean)">
            <summary>
            添加代理类型
            </summary>
            <typeparam name="T"></typeparam>
            <param name="deepSearch"></param>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.ContainsType(System.Type)">
            <summary>
            是否包含类型
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.ConvertToCode(System.String,RRQMSocket.RPC.ServerCellCode[])">
            <summary>
            转换为cs代码。
            </summary>
            <param name="namespace"></param>
            <param name="serverCodes"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.Generator``2(RRQMSocket.RPC.CodeGenerator.GeneratorCallback{``1})">
            <summary>
            生成代码代理
            </summary>
            <typeparam name="TServer">服务类型</typeparam>
            <typeparam name="TAttribute">属性标签</typeparam>
            <param name="onMethod">当每次使用<see cref="T:RRQMSocket.RPC.MethodInstance"/>生成<see cref="T:RRQMSocket.RPC.MethodCellCode"/>时</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.Generator``1(System.Type,RRQMSocket.RPC.CodeGenerator.GeneratorCallback{``0})">
            <summary>
            生成代码代理
            </summary>
            <typeparam name="TAttribute">属性标签</typeparam>
            <param name="serverType">服务类型</param>
            <param name="onMethod">当每次使用<see cref="T:RRQMSocket.RPC.MethodInstance"/>生成<see cref="T:RRQMSocket.RPC.MethodCellCode"/>时</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.GetMethodInstances``1">
            <summary>
            从类型获取函数实例
            </summary>
            <typeparam name="TServer"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.GetMethodInstances(System.Type)">
            <summary>
            从类型获取函数实例
            </summary>
            <param name="serverType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.GetMethodName``1(RRQMSocket.RPC.MethodInstance)">
            <summary>
            获取函数名称
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.CodeGenerator.TryGetProxyTypeName(System.Type,System.String@)">
            <summary>
            获取类型代理名称
            </summary>
            <param name="type"></param>
            <param name="className"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.GlobalTools">
            <summary>
            工具
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.MethodCellCode">
            <summary>
            生成的代码单元
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodCellCode.Name">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodCellCode.CodeTemple">
            <summary>
            代码本体
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodCellCode.InvokeKey">
            <summary>
            调用唯一键
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.MethodCellCode.GetCode">
            <summary>
            获取实际代码
            </summary>
            <returns></returns>
        </member>
        <member name="P:RRQMSocket.RPC.MethodCellCode.InterfaceTemple">
            <summary>
            接口代码。
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.MethodCellCode.GetInterfaceCode">
            <summary>
            获取实际接口代码
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.ServerCellCode">
            <summary>
            服务单元代码
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ServerCellCode.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ServerCellCode.Name">
            <summary>
            服务名
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ServerCellCode.Methods">
            <summary>
            方法集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ServerCellCode.ClassCellCodes">
            <summary>
            类参数集合。
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.ServerCodeGenerator">
            <summary>
            服务代码生成
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ServerCodeGenerator.#ctor(RRQMSocket.RPC.ClassCodeGenerator)">
            <summary>
            构造函数
            </summary>
            <param name="classCodeGenerator"></param>
        </member>
        <member name="P:RRQMSocket.RPC.ServerCodeGenerator.ClassCodeGenerator">
            <summary>
            类代码生成器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ServerCodeGenerator.GetName(System.Type)">
            <summary>
            从类型获取代理名
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.ServerCodeGenerator.GetInterfaceProxy``1(RRQMSocket.RPC.MethodInstance)">
            <summary>
            获取接口代码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.ServerCodeGenerator.GetMethodProxy``1(RRQMSocket.RPC.MethodInstance)">
            <summary>
            获取函数代码
            </summary>
            <typeparam name="T"></typeparam>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.FeedbackType">
            <summary>
            反馈类型
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.FeedbackType.OnlySend">
            <summary>
            仅发送
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.FeedbackType.WaitSend">
            <summary>
            等待，直到发送抵达
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.FeedbackType.WaitInvoke">
            <summary>
            等待，直到调用完成
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.GetProxyInfoArgs">
            <summary>
            获取代理信息
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.GetProxyInfoArgs.#ctor(System.String,RRQMSocket.RPC.RpcType)">
            <summary>
            构造函数
            </summary>
            <param name="proxyToken"></param>
            <param name="rpcType"></param>
        </member>
        <member name="P:RRQMSocket.RPC.GetProxyInfoArgs.ProxyToken">
            <summary>
            代理令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.GetProxyInfoArgs.Codes">
            <summary>
            Rpc代理类
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.GetProxyInfoArgs.RpcType">
            <summary>
            Rpc类型
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.MethodInstance">
            <summary>
            Rpc函数实例
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.MethodInstance.#ctor(System.Reflection.MethodInfo)">
            <summary>
            构造函数
            </summary>
            <param name="methodInfo"></param>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.AsyncType">
            <summary>
            是否异步执行
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.DescriptionAttribute">
            <summary>
            描述属性
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.IsEnable">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.MethodFlags">
            <summary>
            函数标识
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.MethodToken">
            <summary>
            方法唯一令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.ParameterNames">
            <summary>
            参数名集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.Parameters">
            <summary>
            参数集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.ParameterTypes">
            <summary>
            参数类型集合，已处理out及ref，无参数时为空集合，
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.Provider">
            <summary>
            执行此Rpc的实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.ProviderType">
            <summary>
            实例类型
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.MethodInstance.RpcAttributes">
            <summary>
            Rpc属性集合
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.MethodInstance.GetAttribute``1">
            <summary>
            获取指定类型属性标签
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.MethodInvoker">
            <summary>
            函数调用信使
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.MethodInvoker.ReturnParameter">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.MethodInvoker.Parameters">
            <summary>
            参数值集合
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.MethodInvoker.Status">
            <summary>
            调用状态
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.MethodInvoker.StatusMessage">
            <summary>
            状态消息
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.MethodInvoker.Flag">
            <summary>
            可以传递其他类型的数据容器
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.MethodInvoker.Caller">
            <summary>
            此函数执行者
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.MethodMap">
            <summary>
            函数映射图
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.MethodMap.TryGet(System.Int32,RRQMSocket.RPC.MethodInstance@)">
            <summary>
            通过methodToken获取函数实例
            </summary>
            <param name="methodToken"></param>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.MethodMap.GetAllMethodInstances">
            <summary>
            获取所有服务函数实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RpcParserCollection">
            <summary>
            RpcParser集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcParserCollection.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcParserCollection.Item(System.String)">
            <summary>
            获取IRpcParser
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcParserCollection.TryGetRpcParser(System.String,RRQMSocket.RPC.IRpcParser@)">
            <summary>
            获取IRpcParser
            </summary>
            <param name="key"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcParserCollection.System#Collections#Generic#IEnumerable{RRQMSocket#RPC#IRpcParser}#GetEnumerator">
            <summary>
            返回枚举对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RpcProxyInfo">
            <summary>
            Rpc代理文件程序
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcProxyInfo.IsSuccess">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcProxyInfo.ErrorMessage">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcProxyInfo.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcProxyInfo.Namespace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcProxyInfo.Codes">
            <summary>
            代理源代码
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.ServerProvider">
            <summary>
            Rpc范围类
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ServerProvider.RpcService">
            <summary>
            该服务所属的服务器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ServerProvider.RpcEnter(RRQMSocket.RPC.IRpcParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            Rpc即将进入,
            若是想放弃本次执行，请抛出<see cref="T:RRQMSocket.RPC.AbandonRpcException"/>
            </summary>
            <param name="parser"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.ServerProvider.RpcError(RRQMSocket.RPC.IRpcParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            执行Rpc发生错误
            </summary>
            <param name="parser"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.ServerProvider.RpcLeave(RRQMSocket.RPC.IRpcParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            Rpc方法执行完成
            </summary>
            <param name="parser"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="T:RRQMSocket.RPC.ServerProviderCollection">
            <summary>
            服务集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ServerProviderCollection.Count">
            <summary>
            服务数量
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.ServerProviderCollection.System#Collections#Generic#IEnumerable{RRQMSocket#RPC#IServerProvider}#GetEnumerator">
            <summary>
            返回枚举
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RpcConfigExtensions">
            <summary>
            Rpc配置项
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RpcConfigExtensions.ProxyTokenProperty">
            <summary>
            代理文件令箭, 所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.AsyncType">
            <summary>
            异步类型
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.AsyncType.None">
            <summary>
            无异步
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.AsyncType.Async">
            <summary>
            异步
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.InvokeStatus">
            <summary>
            调用状态
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.Ready">
            <summary>
            就绪
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.UnFound">
            <summary>
            未找到服务
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.UnEnable">
            <summary>
            不可用
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.Success">
            <summary>
            成功调用
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.Abort">
            <summary>
            终止执行
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.InvocationException">
            <summary>
            调用内部异常
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.InvokeStatus.Exception">
            <summary>
            其他异常
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.MethodFlags">
            <summary>
            函数标识
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.MethodFlags.None">
            <summary>
            空
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.MethodFlags.IncludeCallContext">
            <summary>
            包含调用上下文
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RpcType">
            <summary>
            Rpc类型
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RpcType.RRQMRPC">
            <summary>
            RRQMRPC
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RpcType.JsonRpc">
            <summary>
            JsonRpc
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RpcType.XmlRpc">
            <summary>
            XmlRpc
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RpcType.RRQMCallbackRpc">
            <summary>
            反向Rpc
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RpcType.WebApi">
            <summary>
            WebApi
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.AbandonRpcException">
            <summary>
            放弃Rpc执行
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.AbandonRpcException.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="feedback">是否反馈信息</param>
            <param name="message">信息</param>
        </member>
        <member name="M:RRQMSocket.RPC.AbandonRpcException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message">信息</param>
        </member>
        <member name="M:RRQMSocket.RPC.AbandonRpcException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.AbandonRpcException.Feedback">
            <summary>
            是否反馈信息
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RpcException">
            <summary>
            Rpc异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RpcException.#ctor">
             <summary>
            构造函数
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RpcException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RpcException.#ctor(System.String,System.Exception)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RpcException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            构造函数
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRpcInvokeException">
            <summary>
            Rpc调用异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRpcInvokeException.#ctor">
             <summary>
            构造函数
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRpcInvokeException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRpcInvokeException.#ctor(System.String,System.Exception)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRpcInvokeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            构造函数
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.ICallContext">
            <summary>
            调用上下文
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ICallContext.MethodInstance">
            <summary>
            函数实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ICallContext.Caller">
            <summary>
            实际调用者
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ICallContext.MethodInvoker">
            <summary>
            调用信使
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ICallContext.Context">
            <summary>
            Rpc请求实际
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.ICallContext.TokenSource">
            <summary>
            可取消的调用令箭
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.IInvokeOption">
            <summary>
            调用配置接口
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IInvokeOption.Token">
            <summary>
            可以取消的调用令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IInvokeOption.FeedbackType">
            <summary>
            调用反馈
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IInvokeOption.Timeout">
            <summary>
            调用超时
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.IRemoteServer">
            <summary>
            远程服务接口
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IRemoteServer.Client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.IRpcClient">
            <summary>
            Rpc接口
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcClient.InvokeAsync(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">函数名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException">Rpc服务器未注册</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcClient.InvokeAsync``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException">Rpc服务器未注册</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">函数名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException">Rpc服务器未注册</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException">Rpc服务器未注册</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="types">对应类型集合</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException">Rpc服务器未注册</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException">Rpc服务器未注册</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="T:RRQMSocket.RPC.IRpcContext">
            <summary>
            Rpc上下文
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.IRpcParser">
            <summary>
            Rpc解析器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcParser.SetExecuteMethod(System.Action{RRQMSocket.RPC.IRpcParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance})">
            <summary>
            设置执行函数
            </summary>
            <param name="executeMethod"></param>
        </member>
        <member name="P:RRQMSocket.RPC.IRpcParser.RRQMExecuteMethod">
            <summary>
            执行函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IRpcParser.MethodMap">
            <summary>
            获取函数映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IRpcParser.RpcService">
            <summary>
            包含此解析器的服务器实例
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcParser.OnEndInvoke(RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            结束调用
            </summary>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcParser.OnRegisterServer(RRQMSocket.RPC.IServerProvider,RRQMSocket.RPC.MethodInstance[])">
            <summary>
            注册服务
            </summary>
            <param name="provider"></param>
            <param name="methodInstances"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcParser.OnUnregisterServer(RRQMSocket.RPC.IServerProvider,RRQMSocket.RPC.MethodInstance[])">
            <summary>
            取消注册服务
            </summary>
            <param name="provider"></param>
            <param name="methodInstances"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcParser.SetMethodMap(RRQMSocket.RPC.MethodMap)">
            <summary>
            设置函数映射
            </summary>
            <param name="methodMap"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcParser.SetRpcService(RRQMSocket.RPC.RpcService)">
            <summary>
            设置服务
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IRpcParser.GetProxyInfo(RRQMSocket.RPC.GetProxyInfoArgs)">
            <summary>
            获取代理信息
            </summary>
            <param name="args">如果接受处理，设置Handled，并且返回代理。</param>
        </member>
        <member name="T:RRQMSocket.RPC.IServerProvider">
            <summary>
            RRQM的Rpc服务接口
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.IServerProvider.RpcService">
            <summary>
            该服务所属的服务器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.IServerProvider.RpcEnter(RRQMSocket.RPC.IRpcParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            Rpc即将进入,
            若是想放弃本次执行，请抛出<see cref="T:RRQMSocket.RPC.AbandonRpcException"/>
            </summary>
            <param name="parser"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IServerProvider.RpcError(RRQMSocket.RPC.IRpcParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            执行Rpc发生错误
            </summary>
            <param name="parser"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.IServerProvider.RpcLeave(RRQMSocket.RPC.IRpcParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            Rpc方法执行完成
            </summary>
            <param name="parser"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RpcService">
            <summary>
            Rpc服务器类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcService.Version">
            <summary>
            版本号
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcService.NameSpace">
            <summary>
            命名空间
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcService.Container">
            <summary>
            注入容器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcService.MethodMap">
            <summary>
            获取函数映射图实例
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcService.RpcParsers">
            <summary>
            获取Rpc解析器集合
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RpcService.ServerProviders">
            <summary>
            服务实例集合
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.AddRpcParser(System.String,RRQMSocket.RPC.IRpcParser)">
            <summary>
            添加Rpc解析器，并将之前注册的服务应用
            </summary>
            <param name="key">名称</param>
            <param name="parser">解析器实例</param>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.AddRpcParser(System.String,RRQMSocket.RPC.IRpcParser,System.Boolean)">
            <summary>
            添加Rpc解析器
            </summary>
            <param name="key">名称</param>
            <param name="parser">解析器实例</param>
            <param name="applyServer">是否应用已注册服务</param>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.GetProxyInfo(RRQMSocket.IPHost,RRQMSocket.RPC.RpcType,System.String)">
            <summary>
            从远程获取代理
            </summary>
            <param name="iPHost"></param>
            <param name="rpcType"></param>
            <param name="proxyToken"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.RegisterAllServer">
            <summary>
            注册所有服务
            </summary>
            <returns>返回搜索到的服务数</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.RegisterServer``1">
            <summary>
            注册服务
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.RegisterServer(System.Type)">
            <summary>
            注册服务
            </summary>
            <param name="providerType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.RegisterServer(RRQMSocket.RPC.IServerProvider)">
            <summary>
            注册服务
            </summary>
            <param name="serverProvider"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.RemoveRpcParser(System.String,RRQMSocket.RPC.IRpcParser@)">
            <summary>
            移除Rpc解析器
            </summary>
            <param name="parserName"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.RemoveRpcParser(System.String)">
            <summary>
            移除Rpc解析器
            </summary>
            <param name="parserName"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.SetMethodEnable(System.Int32,System.Boolean)">
            <summary>
            设置服务方法可用性
            </summary>
            <param name="methodToken">方法名</param>
            <param name="enable">可用性</param>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.ShareProxy(RRQMSocket.IPHost)">
            <summary>
            分享代理。
            </summary>
            <param name="iPHost"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.StopShareProxy">
            <summary>
            停止分享代理。
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.TryGetRpcParser(System.String,RRQMSocket.RPC.IRpcParser@)">
            <summary>
            获取解析器
            </summary>
            <param name="parserKey"></param>
            <param name="parser"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.UnregisterServer(RRQMSocket.RPC.IServerProvider)">
            <summary>
            移除注册服务
            </summary>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.UnregisterServer(System.Type)">
            <summary>
            移除注册服务
            </summary>
            <param name="providerType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.UnregisterServer``1">
            <summary>
            移除注册服务
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RpcService.GetProxyInfo(RRQMSocket.RPC.RpcType,System.String)">
            <summary>
            从本地获取代理
            </summary>
            <param name="rpcType"></param>
            <param name="proxyToken"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.JsonRpc.JsonRpcAttribute">
            <summary>
            适用于XmlRpc的标记
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.JsonRpc.JsonRpcClient">
            <summary>
            JsonRpc客户端
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcClient.#ctor(RRQMSocket.RPC.JsonRpc.JRPT)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcClient.JRPT">
            <summary>
            协议类型
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcClient.InvokeAsync(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">函数名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcClient.InvokeAsync``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RpcException">Rpc异常</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcClient.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理数据
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcClient.OnConnecting(RRQMSocket.ClientConnectingEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.RPC.JsonRpc.ActionMap">
            <summary>
            服务映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.ActionMap.ActionKeys">
            <summary>
            服务键集合
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.ActionMap.TryGet(System.String,RRQMSocket.RPC.MethodInstance@)">
            <summary>
            通过routeUrl获取函数实例
            </summary>
            <param name="actionKey"></param>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.ActionMap.GetEnumerator">
            <summary>
            返回迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.JsonRpc.JsonResponseContext">
            <summary>
            JsonRpc响应器
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.JsonRpc.error">
            <summary>
            错误
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.JsonRpc.JsonRpcContext">
            <summary>
            JsonRpc调用器
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.JsonRpc.JsonRpcServerCallContext">
            <summary>
            JsonRpc调用上下文
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcServerCallContext.JsonString">
            <summary>
            Json字符串
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcServerCallContext.Caller">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcServerCallContext.Context">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcServerCallContext.MethodInstance">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcServerCallContext.MethodInvoker">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcServerCallContext.TokenSource">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.JsonRpc.JRPT">
            <summary>
            JsonRpc协议类型
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.JsonRpc.JRPT.Tcp">
            <summary>
            普通TCP协议
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.JsonRpc.JRPT.Http">
            <summary>
            Http协议
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin">
            <summary>
            JsonRpcParser解析器插件
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.ActionMap">
            <summary>
            函数键映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.JsonRpcUrl">
            <summary>
            当挂载在<see cref="T:RRQMSocket.Http.HttpService"/>时，匹配Url然后响应。当设置为null或空时，会全部响应。
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.MethodMap">
            <summary>
            函数映射
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.ProxyToken">
            <summary>
            代理令箭，当获取代理文件时需验证令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.RpcService">
            <summary>
            所属服务器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.RRQMExecuteMethod">
            <summary>
            执行函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.GetProxyInfo(RRQMSocket.RPC.GetProxyInfoArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.SetJsonRpcUrl(System.String)">
            <summary>
            当挂载在<see cref="T:RRQMSocket.Http.HttpService"/>时，匹配Url然后响应。当设置为null或空时，会全部响应。
            </summary>
            <param name="jsonRpcUrl"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.SetProxyToken(System.String)">
            <summary>
            设置代理令箭，当获取代理文件时需验证令箭
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.BuildRequestContext(RRQMSocket.RPC.MethodInvoker,System.String,RRQMSocket.RPC.MethodInstance@,RRQMSocket.RPC.JsonRpc.JsonRpcContext@)">
            <summary>
            构建请求内容
            </summary>
            <param name="methodInvoker"></param>
            <param name="jsonString">数据</param>
            <param name="methodInstance">调用服务实例</param>
            <param name="jsonRpcContext"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.OnPost(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.RPC.JsonRpc.JsonRpcParserPlugin.OnReceivedData(RRQMSocket.ITcpClientBase,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RRQMRPCAttribute">
            <summary>
            Rpc方法标记属性类
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RRQMRPCCallBackAttribute">
            <summary>
            Rpc方法标记属性类
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.DiscoveryServiceWaitResult">
            <summary>
            等待发现服务
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.DiscoveryServiceWaitResult.PT">
            <summary>
            代理令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.DiscoveryServiceWaitResult.Methods">
            <summary>
            发现的服务方法。
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.InvokeOption">
            <summary>
            Rpc调用设置
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.InvokeOption.#ctor(System.Int32,RRQMSocket.RPC.FeedbackType,RRQMCore.Serialization.SerializationType,System.Threading.CancellationToken)">
            <summary>
            构造函数
            </summary>
            <param name="timeout"></param>
            <param name="feedbackType"></param>
            <param name="serializationType"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.InvokeOption.OnlySend">
            <summary>
            默认设置。
            Timeout=5000ms
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.InvokeOption.WaitInvoke">
            <summary>
            默认设置。
            Timeout=5000ms
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.InvokeOption.WaitSend">
            <summary>
            默认设置。
            Timeout=5000 ms
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.InvokeOption.FeedbackType">
            <summary>
            调用反馈
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.InvokeOption.SerializationType">
            <summary>
            RRQMRPC序列化类型
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.InvokeOption.Timeout">
            <summary>
            调用超时，
            min=1000，默认5000 ms
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.InvokeOption.Token">
            <summary>
            可以取消的调用令箭
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.MethodItem">
            <summary>
            方法体
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.MethodItem.ServerName">
            <summary>
            服务名称
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.MethodItem.MethodToken">
            <summary>
            方法唯一标识
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.MethodItem.Method">
            <summary>
            方法名
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.MethodItem.IsOutOrRef">
            <summary>
            是否含有Out或Ref
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.MethodStore">
            <summary>
            函数仓库
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.MethodStore.GetMethods">
            <summary>
            获取所有的方法
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.MethodStore.AddMethodItem(RRQMSocket.RPC.RRQMRPC.MethodItem)">
            <summary>
            添加
            </summary>
            <param name="methodItem"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.MethodStore.RemoveMethodItem(System.Int32)">
            <summary>
            添加
            </summary>
            <param name="methodToken"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.MethodStore.GetAllMethodItem">
            <summary>
            获取所有
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.MethodStore.TryGetMethodItem(System.String,RRQMSocket.RPC.RRQMRPC.MethodItem@)">
            <summary>
            获取函数服务
            </summary>
            <param name="method"></param>
            <param name="methodItem"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RpcCallContext">
            <summary>
            RRQMRPC上下文
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcCallContext.#ctor(System.Object,RRQMSocket.RPC.RRQMRPC.RpcContext,RRQMSocket.RPC.MethodInstance,RRQMSocket.RPC.MethodInvoker)">
            <summary>
            构造函数
            </summary>
            <param name="caller"></param>
            <param name="context"></param>
            <param name="methodInstance"></param>
            <param name="methodInvoker"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcCallContext.TryCancel">
            <summary>
            当<see cref="P:RRQMSocket.RPC.RRQMRPC.RpcCallContext.TokenSource"/>不为空时，调用<see cref="M:System.Threading.CancellationTokenSource.Cancel"/>
            </summary>
            <returns></returns>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcCallContext.Caller">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcCallContext.TokenSource">
            <summary>
            能取消的调用令箭，在客户端主动取消或网络故障时生效
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcCallContext.Context">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcCallContext.MethodInstance">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcCallContext.MethodInvoker">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcCallContext.SerializationType">
            <summary>
            序列化类型
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RpcContext">
            <summary>
            Rpc传输类
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcContext.Feedback">
            <summary>
            反馈类型
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcContext.ID">
            <summary>
            调用ID
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcContext.Timeout">
            <summary>
            调用超时设置
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcContext.MethodToken">
            <summary>
            函数键
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcContext.MethodName">
            <summary>
            函数名
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcContext.ParametersBytes">
            <summary>
            参数数据
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcContext.ReturnParameterBytes">
            <summary>
            反回参数数据
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.RpcContext.SerializationType">
            <summary>
            序列化类型
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcContext.Deserialize(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            解包
            </summary>
            <param name="byteBlock"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcContext.Serialize(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            编包
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.UdpCaller">
            <summary>
            Udp调用者
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpCaller.#ctor(RRQMSocket.UdpSessionBase,System.Net.EndPoint)">
            <summary>
            构造函数
            </summary>
            <param name="service"></param>
            <param name="callerEndPoint"></param>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpCaller.Service">
            <summary>
            Udp服务器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpCaller.CallerEndPoint">
            <summary>
            调用者终结点
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RRQMRPCConfigExtensions">
            <summary>
            Rpc配置扩展
            </summary>
        </member>
        <member name="F:RRQMSocket.RPC.RRQMRPC.RRQMRPCConfigExtensions.SerializationSelectorProperty">
            <summary>
            序列化转换器, 所需类型<see cref="T:RRQMSocket.RPC.RRQMRPC.SerializationSelector"/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCConfigExtensions.SetProxyToken(RRQMSocket.RRQMConfig,System.String)">
            <summary>
            代理文件令箭默认验证令箭。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RRQMRPCConfigExtensions.SetSerializationSelector(RRQMSocket.RRQMConfig,RRQMSocket.RPC.RRQMRPC.SerializationSelector)">
            <summary>
            设置序列化转换器
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RpcKeyException">
            <summary>
            Rpc添加方法键异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcKeyException.#ctor">
             <summary>
            构造函数
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcKeyException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcKeyException.#ctor(System.String,System.Exception)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            构造函数
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException">
            <summary>
            Rpc无注册异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException.#ctor">
             <summary>
            构造函数
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException.#ctor(System.String,System.Exception)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            构造函数
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">
            <summary>
            序列化异常类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSerializationException.#ctor">
             <summary>
            构造函数
             </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSerializationException.#ctor(System.String)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSerializationException.#ctor(System.String,System.Exception)">
             <summary>
            构造函数
             </summary>
             <param name="message"></param>
             <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
             <summary>
            构造函数
             </summary>
             <param name="info"></param>
             <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.ITcpRpcClientBase">
            <summary>
            Rpc辅助类接口
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser">
            <summary>
            RRQMRPC接口
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.ProxyToken">
            <summary>
            代理令箭，当客户端获取代理文件时需验证令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.MethodStore">
            <summary>
            函数仓库
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.SerializationSelector">
            <summary>
            序列化选择器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRRQMRPCParser.GetRegisteredMethodItems(System.String,System.Object)">
            <summary>
            获取注册函数
            </summary>
            <param name="proxyToken"></param>
            <param name="caller">调用作用者/></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient">
            <summary>
            客户端Rpc接口
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.ID">
            <summary>
            获取ID
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.SerializationSelector">
            <summary>
            序列化生成器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IRRQMRPCClient.DiscoveryService(System.String,System.Threading.CancellationToken)">
            <summary>
             发现服务
            </summary>
            <param name="proxyToken">代理令箭</param>
            <param name="token"></param>
            <returns>发现的服务</returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.IIDInvoke">
            <summary>
            ID调用
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IIDInvoke.InvokeAsync(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IIDInvoke.InvokeAsync``1(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IIDInvoke.Invoke(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.IIDInvoke.Invoke``1(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.DefaultSerializationSelector">
            <summary>
            默认序列化选择器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.DefaultSerializationSelector.DeserializeParameter(RRQMCore.Serialization.SerializationType,System.Byte[],System.Type)">
            <summary>
            反序列化
            </summary>
            <param name="serializationType"></param>
            <param name="parameterBytes"></param>
            <param name="parameterType"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.DefaultSerializationSelector.SerializeParameter(RRQMCore.Serialization.SerializationType,System.Object)">
            <summary>
            序列化参数
            </summary>
            <param name="serializationType"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.SerializationSelector">
            <summary>
            序列化选择器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.SerializationSelector.SerializeParameter(RRQMCore.Serialization.SerializationType,System.Object)">
            <summary>
            序列化Rpc方法返回值参数
            </summary>
            <param name="serializationType"></param>
            <param name="parameter"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.SerializationSelector.DeserializeParameter(RRQMCore.Serialization.SerializationType,System.Byte[],System.Type)">
            <summary>
            反序列化传输对象
            </summary>
            <param name="serializationType"></param>
            <param name="parameterBytes"></param>
            <param name="parameterType"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.RpcSocketClient">
            <summary>
            Rpc服务器辅助类
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.HandleEventBusDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.HandleRpcDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            Rpc处理其余协议
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="types">对应类型集合</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException">Rpc服务器未注册</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="types">对应类型集合</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException">Rpc服务器未注册</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.Invoke(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.Invoke``1(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.InvokeAsync(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.InvokeAsync``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            <para>如果调用端为客户端，则会调用服务器Rpc服务。</para>
            <para>如果调用端为服务器，则会反向调用客户端Rpc服务。</para>
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.InvokeAsync(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.RpcSocketClient.InvokeAsync``1(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.TcpRpcClient">
            <summary>
            TcpRpcClient
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.ServiceDiscovered">
            <summary>
            Rpc初始化后
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.MethodMap">
            <summary>
            获取反向Rpc映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.RpcService">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.RRQMExecuteMethod">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.SerializationSelector">
            <summary>
            序列化选择器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.ServerProviders">
            <summary>
            获取反向Rpc服务实例
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.DiscoveryService(System.String,System.Threading.CancellationToken)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="proxyToken"><inheritdoc/></param>
            <param name="token"><inheritdoc/></param>
            <returns><inheritdoc/></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.Invoke(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.Invoke``1(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.InvokeAsync(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.InvokeAsync``1(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.InvokeAsync(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">函数名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.InvokeAsync``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.GetProxyInfo(RRQMSocket.RPC.GetProxyInfoArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.HandleEventBusDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            加载配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.HandleRpcDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            处理其余协议的事件触发
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.OnServiceDiscovered(RRQMSocket.MesEventArgs)">
            <summary>
            Rpc完成初始化后
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcClient.OnDisconnected(RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.TcpRpcParser">
            <summary>
            TCP Rpc解释器
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1">
            <summary>
            TcpRpcParser泛型类型
            </summary>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.MethodMap">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.MethodStore">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.ProxyToken">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.RpcService">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.RRQMExecuteMethod">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.SerializationSelector">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.GetProxyInfo(RRQMSocket.RPC.GetProxyInfoArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="args"><inheritdoc/></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.GetRegisteredMethodItems(System.String,System.Object)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="proxyToken"></param>
            <param name="caller"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.Invoke(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.Invoke``1(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.InvokeAsync(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.InvokeAsync``1(System.String,System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            反向调用客户端Rpc
            </summary>
            <param name="id">客户端ID</param>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">调用内部异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">没有找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回值</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="RRQMConfig"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.TcpRpcParser`1.OnConnecting(`0,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.RPC.RRQMRPC.UdpRpc">
            <summary>
            UDP Rpc解释器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:RRQMSocket.RPC.RRQMRPC.UdpRpc.ServiceDiscovered">
            <summary>
            发现服务后
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRpc.ID">
            <summary>
            返回ID
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRpc.MethodMap">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRpc.MethodStore">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRpc.ProxyToken">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRpc.RpcService">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRpc.RRQMExecuteMethod">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRpc.SerializationSelector">
            <summary>
            序列化选择器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.RRQMRPC.UdpRpc.WaitHandlePool">
            <summary>
            等待返回池
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.DiscoveryService(System.String,System.Threading.CancellationToken)">
            <summary>
            发现服务
            </summary>
            <param name="proxyToken"></param>
            <param name="token"></param>
            <returns>已发现的服务</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.ExecuteContext(RRQMSocket.RPC.RRQMRPC.RpcContext,System.Object)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.GetProxyInfo(RRQMSocket.RPC.GetProxyInfoArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.GetRegisteredMethodItems(System.String,System.Object)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcNoRegisterException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.InvokeAsync(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">函数名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.InvokeAsync``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.HandleReceivedData(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            密封处理
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.RRQMRPC.UdpRpc.OnServiceDiscovered(RRQMSocket.MesEventArgs)">
            <summary>
            Rpc完成初始化后
            </summary>
            <param name="args"></param>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.HttpMethodAttribute">
            <summary>
            Http函数
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.HttpGetAttribute">
            <summary>
            GET访问
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.HttpPostAttribute">
            <summary>
            GET访问
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.RouteAttribute">
            <summary>
            适用于WebApi的路由标记
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.RouteAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.RouteAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="template"></param>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.RouteAttribute.Template">
            <summary>
            路由模板
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.WebApiClient">
            <summary>
            WebApi客户端
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.WebApiClient.StringConverter">
            <summary>
            字符串转化器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiClient.InvokeAsync(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">函数名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RpcException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiClient.InvokeAsync``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RpcException">Rpc异常</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.ActionResult">
            <summary>
            结果状态
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.ActionResult.Status">
            <summary>
            状态类型
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.ActionResult.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.RouteMap">
            <summary>
            路由映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.RouteMap.Urls">
            <summary>
            路由路径集合
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.RouteMap.TryGet(System.String,RRQMSocket.RPC.MethodInstance@)">
            <summary>
            通过routeUrl获取函数实例
            </summary>
            <param name="routeUrl"></param>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.RouteMap.GetEnumerator">
            <summary>
            返回迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.ApiDataConverter">
            <summary>
            Api结果转化器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.ApiDataConverter.OnResult(RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            在调用完成时转换结果
            </summary>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.ApiDataConverter.OnPost(RRQMSocket.Http.HttpRequest,RRQMSocket.RPC.MethodInvoker@,RRQMSocket.RPC.MethodInstance)">
            <summary>
            在调用时
            </summary>
            <param name="httpRequest"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.JsonDataConverter">
            <summary>
            Json数据转换器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.JsonDataConverter.OnPost(RRQMSocket.Http.HttpRequest,RRQMSocket.RPC.MethodInvoker@,RRQMSocket.RPC.MethodInstance)">
            <summary>
            OnPost
            </summary>
            <param name="httpRequest"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.JsonDataConverter.OnResult(RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            在调用完成时转换结果
            </summary>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.XmlDataConverter">
            <summary>
            Xml结果转换器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.XmlDataConverter.OnPost(RRQMSocket.Http.HttpRequest,RRQMSocket.RPC.MethodInvoker@,RRQMSocket.RPC.MethodInstance)">
            <summary>
            OnPost
            </summary>
            <param name="httpRequest"></param>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.XmlDataConverter.OnResult(RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            在调用完成时转换结果
            </summary>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.WebApi.WebApiParserPlugin">
            <summary>
            WebApi解析器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiParserPlugin.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.WebApiParserPlugin.ApiDataConverter">
            <summary>
            数据转化器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.WebApiParserPlugin.MethodMap">
            <summary>
            函数映射
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.WebApiParserPlugin.ProxyToken">
            <summary>
            设置代理令箭，当获取代理文件时需验证令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.WebApiParserPlugin.RouteMap">
            <summary>
            获取路由映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.WebApiParserPlugin.RpcService">
            <summary>
            所属服务器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.WebApi.WebApiParserPlugin.RRQMExecuteMethod">
            <summary>
            执行函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiParserPlugin.GetProxyInfo(RRQMSocket.RPC.GetProxyInfoArgs)">
            <summary>
            获取WebApi代理
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiParserPlugin.SetApiDataConverter(RRQMSocket.RPC.WebApi.ApiDataConverter)">
            <summary>
            设置数据转换器
            </summary>
            <param name="converter"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiParserPlugin.SetProxyToken(System.String)">
            <summary>
            设置代理令箭，当获取代理文件时需验证令箭
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiParserPlugin.OnPost(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.RPC.WebApi.WebApiParserPlugin.OnGet(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.RPC.XmlRpc.XmlRpcAttribute">
            <summary>
            适用于XmlRpc的标记
            </summary>
        </member>
        <member name="T:RRQMSocket.RPC.XmlRpc.XmlRpcClient">
            <summary>
            XmlRpc客户端
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[]@,System.Type[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <param name="types"></param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcClient.Invoke(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcClient.Invoke``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            Rpc调用
            </summary>
            <param name="method">方法名</param>
            <param name="invokeOption">调用配置</param>
            <param name="parameters">参数</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcClient.InvokeAsync(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">函数名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException"></exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcClient.InvokeAsync``1(System.String,RRQMSocket.RPC.IInvokeOption,System.Object[])">
            <summary>
            函数式调用
            </summary>
            <param name="method">方法名</param>
            <param name="parameters">参数</param>
            <param name="invokeOption">Rpc调用设置</param>
            <exception cref="T:System.TimeoutException">调用超时</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRPC.RpcSerializationException">序列化异常</exception>
            <exception cref="T:RRQMSocket.RPC.RRQMRpcInvokeException">Rpc异常</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>服务器返回结果</returns>
        </member>
        <member name="T:RRQMSocket.RPC.XmlRpc.ActionMap">
            <summary>
            服务映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.XmlRpc.ActionMap.ActionKeys">
            <summary>
            服务键集合
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.ActionMap.TryGet(System.String,RRQMSocket.RPC.MethodInstance@)">
            <summary>
            通过routeUrl获取函数实例
            </summary>
            <param name="actionKey"></param>
            <param name="methodInstance"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.ActionMap.GetEnumerator">
            <summary>
            返回迭代器
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin">
            <summary>
            XmlRpc解析器
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.ActionMap">
            <summary>
            服务键映射图
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.MethodMap">
            <summary>
            函数映射
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.ProxyToken">
            <summary>
            代理令箭，当获取代理文件时需验证令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.RpcService">
            <summary>
            所属服务器
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.RRQMExecuteMethod">
            <summary>
            执行函数
            </summary>
        </member>
        <member name="P:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.XmlRpcUrl">
            <summary>
            当挂载在<see cref="T:RRQMSocket.Http.HttpService"/>时，匹配Url然后响应。当设置为null或空时，会全部响应。
            </summary>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.GetProxyInfo(RRQMSocket.RPC.GetProxyInfoArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.RRQMSocket#RPC#IRpcParser#OnEndInvoke(RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance)">
            <summary>
            结束调用
            </summary>
            <param name="methodInvoker"></param>
            <param name="methodInstance"></param>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.RRQMSocket#RPC#IRpcParser#OnRegisterServer(RRQMSocket.RPC.IServerProvider,RRQMSocket.RPC.MethodInstance[])">
            <summary>
            初始化
            </summary>
            <param name="provider"></param>
            <param name="methodInstances"></param>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.RRQMSocket#RPC#IRpcParser#OnUnregisterServer(RRQMSocket.RPC.IServerProvider,RRQMSocket.RPC.MethodInstance[])">
            <summary>
            取消注册服务
            </summary>
            <param name="provider"></param>
            <param name="methodInstances"></param>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.RRQMSocket#RPC#IRpcParser#SetExecuteMethod(System.Action{RRQMSocket.RPC.IRpcParser,RRQMSocket.RPC.MethodInvoker,RRQMSocket.RPC.MethodInstance})">
            <summary>
            设置执行委托
            </summary>
            <param name="executeMethod"></param>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.RRQMSocket#RPC#IRpcParser#SetMethodMap(RRQMSocket.RPC.MethodMap)">
            <summary>
            设置地图映射
            </summary>
            <param name="methodMap"></param>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.SetProxyToken(System.String)">
            <summary>
            设置代理令箭，当获取代理文件时需验证令箭
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.RRQMSocket#RPC#IRpcParser#SetRpcService(RRQMSocket.RPC.RpcService)">
            <summary>
            设置服务
            </summary>
            <param name="service"></param>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.SetXmlRpcUrl(System.String)">
            <summary>
            当挂载在<see cref="T:RRQMSocket.Http.HttpService"/>时，匹配Url然后响应。当设置为null或空时，会全部响应。
            </summary>
            <param name="xmlRpcUrl"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RPC.XmlRpc.XmlRpcParserPlugin.OnPost(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.RtpPacketSession">
            <summary>
            
            </summary>
        </member>
        <member name="T:RRQMSocket.WebSocket.WSClient">
            <summary>
            WebSocket用户终端简单实现。
            </summary>
        </member>
        <member name="E:RRQMSocket.WebSocket.WSClient.Received">
            <summary>
            收到WebSocket数据
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClient.OnHandleWSDataFrame(RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="dataFrame"></param>
        </member>
        <member name="T:RRQMSocket.WebSocket.WSClientBase">
            <summary>
            WebSocket用户终端。
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientBase.Connect(System.Int32)">
            <summary>
            请求连接到WebSocket。
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientBase.Connect(System.Threading.CancellationToken,System.Int32)">
            <summary>
            请求连接到WebSocket。
            </summary>
            <param name="timeout"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="E:RRQMSocket.WebSocket.WSClientBase.Handshaking">
            <summary>
            表示在即将握手连接时。
            </summary>
        </member>
        <member name="E:RRQMSocket.WebSocket.WSClientBase.Handshaked">
            <summary>
            表示完成握手后。
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientBase.OnHandshaking(RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            表示在即将握手连接时。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientBase.OnHandshaked(RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            表示完成握手后。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientBase.OnHandleWSDataFrame(RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            当收到WS数据时。
            </summary>
            <param name="dataFrame"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientBase.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientBase.OnDisconnected(RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.WebSocket.WSDataFrame">
            <summary>
            WebSocket数据帧
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrame.FIN">
            <summary>
            是否为最后数据帧。
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrame.RSV1">
            <summary>
            标识RSV-1。
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrame.RSV2">
            <summary>
            标识RSV-2。
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrame.RSV3">
            <summary>
            标识RSV-3。
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrame.Opcode">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrame.Mask">
            <summary>
            计算掩码
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrame.PayloadLength">
            <summary>
            有效载荷数据长度
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrame.MaskingKey">
            <summary>
            掩码值
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrame.PayloadData">
            <summary>
            有效数据
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrame.Build(RRQMCore.ByteManager.ByteBlock,System.Boolean)">
            <summary>
            构建数据
            </summary>
            <param name="byteBlock"></param>
            <param name="masked"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrame.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrame.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:RRQMSocket.WebSocket.WSTools">
            <summary>
            WSTools
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WSTools.acceptMask">
            <summary>
            应答。
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSTools.CreateBase64Key">
            <summary>
            获取Base64随即字符串。
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSTools.GetWSRequest(System.String,System.String,System.String,System.String@)">
            <summary>
            获取WS的请求头
            </summary>
            <param name="host"></param>
            <param name="url"></param>
            <param name="version"></param>
            <param name="base64Key"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSTools.CalculateBase64Key(System.String,System.Text.Encoding)">
            <summary>
            计算Base64值
            </summary>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSTools.TryGetResponse(RRQMSocket.Http.HttpRequest,RRQMSocket.Http.HttpResponse@)">
            <summary>
            获取响应
            </summary>
            <param name="request"></param>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSTools.DoMask(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            掩码运算
            </summary>
            <param name="storeBuf"></param>
            <param name="sOffset"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="masks"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSTools.Build(RRQMCore.ByteManager.ByteBlock,RRQMSocket.WebSocket.WSDataFrame,System.Byte[],System.Int32,System.Int32)">
            <summary>
            构建数据
            </summary>
            <param name="byteBlock"></param>
            <param name="dataFrame"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter">
            <summary>
            WebSocket适配器
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.surPlusLength">
            <summary>
            数据包剩余长度
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.tempByteBlock">
            <summary>
            临时包
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.MaxSize">
            <summary>
            获取或设置数据最大值，默认1024*1024
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.DecodingFromBytes(System.Byte[],System.Int32@,System.Int32,RRQMSocket.WebSocket.WSDataFrame@)">
            <summary>
            解码
            </summary>
            <param name="dataBuffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="dataFrame"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.PreviewReceived(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            当接收到数据时处理数据
            </summary>
            <param name="byteBlock">数据流</param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.PreviewSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            当发送数据前处理数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.PreviewSend(System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.Reset">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketDataHandlingAdapter.SplitPackage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            分解包
            </summary>
            <param name="dataBuffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="T:RRQMSocket.WebSocket.WSDataFrameEventHandler`1">
            <summary>
            收到WebSocket数据
            </summary>
            <param name="client"></param>
            <param name="dataFrame"></param>
        </member>
        <member name="T:RRQMSocket.WebSocket.WSDataType">
            <summary>
            WebSocket数据类型
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WSDataType.Cont">
            <summary>
            表示一个中间数据包，denotes a continuation frame
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WSDataType.Text">
            <summary>
            表示一个text类型数据包
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WSDataType.Binary">
            <summary>
            表示一个binary类型数据包
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WSDataType.Close">
            <summary>
            表示一个断开连接类型数据包
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WSDataType.Ping">
            <summary>
            表示一个ping类型数据包
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WSDataType.Pong">
            <summary>
            表示一个pong类型数据包
            </summary>
        </member>
        <member name="T:RRQMSocket.WebSocket.WSDataFrameEventArgs">
            <summary>
            WS数据事件类
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrameEventArgs.#ctor(RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            构造函数
            </summary>
            <param name="dataFrame"></param>
        </member>
        <member name="P:RRQMSocket.WebSocket.WSDataFrameEventArgs.DataFrame">
            <summary>
            WS数据帧。
            </summary>
        </member>
        <member name="T:RRQMSocket.WebSocket.WSClientExtensions">
            <summary>
            IWSClientBase辅助扩展
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.GetHandshaked(RRQMSocket.Http.IHttpClientBase)">
            <summary>
            是否已经完成握手
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.GetWebSocketVersion(RRQMSocket.Http.IHttpClientBase)">
            <summary>
            获取WebSocket版本号。
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SetWebSocketVersion(RRQMSocket.Http.IHttpClientBase,System.String)">
            <summary>
            设置WebSocket版本号。
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.Ping(RRQMSocket.Http.HttpClientBase)">
            <summary>
            发送Ping报文。
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.Pong(RRQMSocket.Http.HttpClientBase)">
            <summary>
            发送Pong报文。
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpClientBase,System.Byte[],System.Int32,System.Int32)">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpClientBase,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpClientBase,System.Byte[])">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpClientBase,System.String)">
            <summary>
            采用WebSocket协议，发送文本数据。
            </summary>
            <param name="client"></param>
            <param name="text"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpClientBase,RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            采用WebSocket协议，发送WS数据。
            </summary>
            <param name="client"></param>
            <param name="dataFrame"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpClientBase,System.Byte[],System.Int32,System.Int32)">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpClientBase,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpClientBase,System.Byte[])">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpClientBase,System.String)">
            <summary>
            采用WebSocket协议，发送文本数据。
            </summary>
            <param name="client"></param>
            <param name="text"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpClientBase,RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            采用WebSocket协议，发送WS数据。
            </summary>
            <param name="client"></param>
            <param name="dataFrame"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWS(RRQMSocket.Http.HttpClientBase,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWS(RRQMSocket.Http.HttpClientBase,System.Byte[],System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWS(RRQMSocket.Http.HttpClientBase,RRQMCore.ByteManager.ByteBlock,System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWSAsync(RRQMSocket.Http.HttpClientBase,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWSAsync(RRQMSocket.Http.HttpClientBase,System.Byte[],System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWSAsync(RRQMSocket.Http.HttpClientBase,RRQMCore.ByteManager.ByteBlock,System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.Ping(RRQMSocket.Http.HttpSocketClient)">
            <summary>
            发送Ping报文。
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.Pong(RRQMSocket.Http.HttpSocketClient)">
            <summary>
            发送Pong报文。
            </summary>
            <param name="client"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpSocketClient,System.Byte[],System.Int32,System.Int32)">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpSocketClient,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpSocketClient,System.Byte[])">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpSocketClient,System.String)">
            <summary>
            采用WebSocket协议，发送文本数据。
            </summary>
            <param name="client"></param>
            <param name="text"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWS(RRQMSocket.Http.HttpSocketClient,RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            采用WebSocket协议，发送WS数据。
            </summary>
            <param name="client"></param>
            <param name="dataFrame"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpSocketClient,System.Byte[],System.Int32,System.Int32)">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpSocketClient,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpSocketClient,System.Byte[])">
            <summary>
            采用WebSocket协议，发送二进制流数据。
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpSocketClient,System.String)">
            <summary>
            采用WebSocket协议，发送文本数据。
            </summary>
            <param name="client"></param>
            <param name="text"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SendWithWSAsync(RRQMSocket.Http.HttpSocketClient,RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            采用WebSocket协议，发送WS数据。
            </summary>
            <param name="client"></param>
            <param name="dataFrame"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWS(RRQMSocket.Http.HttpSocketClient,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWS(RRQMSocket.Http.HttpSocketClient,System.Byte[],System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWS(RRQMSocket.Http.HttpSocketClient,RRQMCore.ByteManager.ByteBlock,System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWSAsync(RRQMSocket.Http.HttpSocketClient,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWSAsync(RRQMSocket.Http.HttpSocketClient,System.Byte[],System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="buffer"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSClientExtensions.SubSendWithWSAsync(RRQMSocket.Http.HttpSocketClient,RRQMCore.ByteManager.ByteBlock,System.Int32)">
            <summary>
            分包发送。
            <para>
            按packageSize的值，每次发送数据包。
            </para>
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
            <param name="packageSize"></param>
        </member>
        <member name="T:RRQMSocket.WebSocket.WSDataFrameExtensions">
            <summary>
            WSDataFrame辅助扩展类
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrameExtensions.AppendText(RRQMSocket.WebSocket.WSDataFrame,System.String,System.Text.Encoding)">
            <summary>
            追加文本
            </summary>
            <param name="dataFrame"></param>
            <param name="text"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrameExtensions.AppendBinary(RRQMSocket.WebSocket.WSDataFrame,System.Byte[],System.Int32,System.Int32)">
            <summary>
            追加二进制流
            </summary>
            <param name="dataFrame"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrameExtensions.BuildRequest(RRQMSocket.WebSocket.WSDataFrame,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建请求数据（含Make）
            </summary>
            <param name="dataFrame"></param>
            <param name="byteBlock"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrameExtensions.BuildRequestToBytes(RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            构建请求数据（含Make）
            </summary>
            <param name="dataFrame"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrameExtensions.BuildResponse(RRQMSocket.WebSocket.WSDataFrame,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构建响应数据（无Make）
            </summary>
            <param name="dataFrame"></param>
            <param name="byteBlock"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrameExtensions.BuildResponseToBytes(RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            构建响应数据（无Make）
            </summary>
            <param name="dataFrame"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrameExtensions.SetMaskString(RRQMSocket.WebSocket.WSDataFrame,System.String)">
            <summary>
            设置Mask。
            </summary>
            <param name="dataFrame"></param>
            <param name="mask"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WSDataFrameExtensions.ToText(RRQMSocket.WebSocket.WSDataFrame,System.Text.Encoding)">
            <summary>
            当<see cref="F:RRQMSocket.WebSocket.WSDataType.Text"/>时，转换为Text消息。
            </summary>
            <param name="dataFrame"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.WebSocket.IWebSocketPlugin">
            <summary>
            WebSocket插件
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWebSocketPlugin.OnHandshaking(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            表示在即将握手连接时。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWebSocketPlugin.OnHandshaked(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            表示完成握手后。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWebSocketPlugin.OnHandleWSDataFrame(RRQMSocket.ITcpClientBase,RRQMSocket.WebSocket.WSDataFrameEventArgs)">
            <summary>
            当收到WS数据时。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.WebSocket.IWSClient">
            <summary>
            用户终端接口
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.IWSClient.WebSocketVersion">
            <summary>
            WebSocket版本号。
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.IWSClient.IsHandshaked">
            <summary>
            是否已经完成握手
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.Send(System.String)">
            <summary>
            通过WebSocket协议发送文本。
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.SendAsync(System.String)">
            <summary>
            通过WebSocket协议发送文本。
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.Send(RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            发送WebSocket数据帧
            </summary>
            <param name="dataFrame"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.SendAsync(RRQMSocket.WebSocket.WSDataFrame)">
            <summary>
            发送WebSocket数据帧
            </summary>
            <param name="dataFrame"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.SubpackageSend(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            分包发送。
            <para>
            消息分片，它的构成是由起始帧(FIN为0，opcode非0)，然后若干(0个或多个)帧(FIN为0，opcode为0)，然后结束帧(FIN为1，opcode为0)
            </para>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.SubpackageSend(System.Byte[],System.Int32)">
            <summary>
            分包发送。
            <para>
            消息分片，它的构成是由起始帧(FIN为0，opcode非0)，然后若干(0个或多个)帧(FIN为0，opcode为0)，然后结束帧(FIN为1，opcode为0)
            </para>
            </summary>
            <param name="buffer"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.SubpackageSend(RRQMCore.ByteManager.ByteBlock,System.Int32)">
            <summary>
            分包发送。
            <para>
            消息分片，它的构成是由起始帧(FIN为0，opcode非0)，然后若干(0个或多个)帧(FIN为0，opcode为0)，然后结束帧(FIN为1，opcode为0)
            </para>
            </summary>
            <param name="byteBlock"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.SubpackageSendAsync(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            分包发送。
            <para>
            消息分片，它的构成是由起始帧(FIN为0，opcode非0)，然后若干(0个或多个)帧(FIN为0，opcode为0)，然后结束帧(FIN为1，opcode为0)
            </para>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.SubpackageSendAsync(System.Byte[],System.Int32)">
            <summary>
            分包发送。
            <para>
            消息分片，它的构成是由起始帧(FIN为0，opcode非0)，然后若干(0个或多个)帧(FIN为0，opcode为0)，然后结束帧(FIN为1，opcode为0)
            </para>
            </summary>
            <param name="buffer"></param>
            <param name="packageSize"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.IWSClient.SubpackageSendAsync(RRQMCore.ByteManager.ByteBlock,System.Int32)">
            <summary>
            分包发送。
            <para>
            消息分片，它的构成是由起始帧(FIN为0，opcode非0)，然后若干(0个或多个)帧(FIN为0，opcode为0)，然后结束帧(FIN为1，opcode为0)
            </para>
            </summary>
            <param name="byteBlock"></param>
            <param name="packageSize"></param>
        </member>
        <member name="T:RRQMSocket.WebSocket.Plugins.WebSocketPluginBase">
            <summary>
            WS插件基类
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.Plugins.WebSocketPluginBase.OnHandshaking(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            表示在即将握手连接时。
            <para>在此处拒绝操作，则会返回403 Forbidden。</para>
            <para>也可以向<see cref="P:RRQMSocket.Http.HttpContextEventArgs.Response"/>注入更多信息。</para>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.Plugins.WebSocketPluginBase.OnHandshaked(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            表示完成握手后。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.Plugins.WebSocketPluginBase.OnHandleWSDataFrame(RRQMSocket.ITcpClientBase,RRQMSocket.WebSocket.WSDataFrameEventArgs)">
            <summary>
            处理WS数据帧。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.WebSocket.Plugins.WSCommandLinePlugin">
            <summary>
            WS命令行插件。
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.Plugins.WSCommandLinePlugin.Converter">
            <summary>
            字符串转换器，默认支持基础类型和Json。可以自定义。
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.Plugins.WSCommandLinePlugin.ReturnException">
            <summary>
            是否返回执行异常。
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.Plugins.WSCommandLinePlugin.NoReturnException">
            <summary>
            当有执行异常时，不返回异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.Plugins.WSCommandLinePlugin.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.Plugins.WSCommandLinePlugin.OnHandleWSDataFrame(RRQMSocket.ITcpClientBase,RRQMSocket.WebSocket.WSDataFrameEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.WebSocket.WebSocketServerPlugin">
            <summary>
            基于Http的WebSocket的扩展。
            <para>此组件只能挂载在<see cref="T:RRQMSocket.Http.HttpService"/>中</para>
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WebSocketServerPlugin.HandshakedProperty">
            <summary>
            表示是否完成WS握手
            </summary>
        </member>
        <member name="F:RRQMSocket.WebSocket.WebSocketServerPlugin.WebSocketVersionProperty">
            <summary>
            表示WebSocketVersion
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WebSocketServerPlugin.HandleWSDataFrameCallback">
            <summary>
            处理WS数据的回调
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WebSocketServerPlugin.Timeout">
            <summary>
            连接验证超时时间。默认10*1000 ms
            </summary>
        </member>
        <member name="P:RRQMSocket.WebSocket.WebSocketServerPlugin.WSUrl">
            <summary>
            用于WebSocket连接的路径，默认为“/ws”
            <para>如果设置为null或空，则意味着所有的连接都将解释为WS</para>
            </summary>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketServerPlugin.SetCallback(System.Action{RRQMSocket.ITcpClientBase,RRQMSocket.WebSocket.WSDataFrameEventArgs})">
            <summary>
            设置处理WS数据的回调。
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketServerPlugin.SetTimeout(System.Int32)">
            <summary>
            设置连接验证超时时间
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketServerPlugin.SetWSUrl(System.String)">
            <summary>
            用于WebSocket连接的路径，默认为“/ws”
            <para>如果设置为null或空，则意味着所有的连接都将解释为WS</para>
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketServerPlugin.OnConnected(RRQMSocket.ITcpClientBase,RRQMCore.RRQMEventArgs)">
            <summary>
            <inheritdoc/>
            <para>WS设置连接计时器</para>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketServerPlugin.OnGet(RRQMSocket.ITcpClientBase,RRQMSocket.Http.HttpContextEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketServerPlugin.OnHandleWSDataFrame(RRQMSocket.ITcpClientBase,RRQMSocket.WebSocket.WSDataFrameEventArgs)">
            <summary>
            处理WS数据帧。覆盖父类方法将不会触发<see cref="P:RRQMSocket.WebSocket.WebSocketServerPlugin.HandleWSDataFrameCallback"/>回调和插件。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.WebSocket.WebSocketServerPlugin.OnReceivedData(RRQMSocket.ITcpClientBase,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.BaseSocket">
            <summary>
            通讯基类
            </summary>
        </member>
        <member name="P:RRQMSocket.BaseSocket.BufferLength">
            <summary>
            数据交互缓存池限制，min=1024 byte
            </summary>
        </member>
        <member name="P:RRQMSocket.BaseSocket.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="T:RRQMSocket.Channel">
            <summary>
            通道
            </summary>
        </member>
        <member name="M:RRQMSocket.Channel.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:RRQMSocket.Channel.Available">
            <summary>
            是否具有数据可读
            </summary>
        </member>
        <member name="P:RRQMSocket.Channel.CacheCapacity">
            <summary>
            缓存容量
            </summary>
        </member>
        <member name="P:RRQMSocket.Channel.CanMoveNext">
            <summary>
            判断当前通道能否调用<see cref="M:RRQMSocket.Channel.MoveNext(System.Int32)"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.Channel.CanWrite">
            <summary>
            能否写入
            </summary>
        </member>
        <member name="P:RRQMSocket.Channel.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="P:RRQMSocket.Channel.LastOperationMes">
            <summary>
            最后一次操作时显示消息
            </summary>
        </member>
        <member name="P:RRQMSocket.Channel.MaxSpeed">
            <summary>
            通道传输速度限制
            </summary>
        </member>
        <member name="P:RRQMSocket.Channel.Status">
            <summary>
            状态
            </summary>
        </member>
        <member name="P:RRQMSocket.Channel.TargetClientID">
            <summary>
            目的ID地址。
            </summary>
        </member>
        <member name="M:RRQMSocket.Channel.Cancel(System.String)">
            <summary>
            取消
            </summary>
        </member>
        <member name="M:RRQMSocket.Channel.CancelAsync(System.String)">
            <summary>
            异步取消
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.Complete(System.String)">
            <summary>
            完成操作
            </summary>
        </member>
        <member name="M:RRQMSocket.Channel.CompleteAsync(System.String)">
            <summary>
            异步完成操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:RRQMSocket.Channel.DisposeAsync">
            <summary>
            异步释放
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.GetCurrent">
            <summary>
            获取当前的数据
            </summary>
        </member>
        <member name="M:RRQMSocket.Channel.GetCurrentByteBlock">
            <summary>
            获取当前数据的存储块，设置pos=6，调用ReadBytesPackage获取数据。
            使用完成后的数据必须调用SetHolding(false)进行释放。
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.HoldOn(System.String)">
            <summary>
            继续。
            <para>调用该指令时，接收方会跳出接收，但是通道依然可用，所以接收方需要重新调用<see cref="M:RRQMSocket.Channel.MoveNext(System.Int32)"/></para>
            </summary>
            <param name="operationMes"></param>
        </member>
        <member name="M:RRQMSocket.Channel.HoldOnAsync(System.String)">
            <summary>
            异步调用继续
            </summary>
            <param name="operationMes"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.MoveNext(System.Int32)">
            <summary>
            转向下个元素
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.MoveNextAsync(System.Int32)">
            <summary>
            转向下个元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.ReadAsync(System.Int32)">
            <summary>
            阻塞读取数据，直到有数据，或者超时。
            </summary>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.TryWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
            尝试写入。
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.TryWrite(System.Byte[])">
            <summary>
            尝试写入
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.TryWriteAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            异步尝试写入
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.TryWriteAsync(System.Byte[])">
            <summary>
            异步尝试写入
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Channel.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入通道
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.Channel.Write(System.Byte[])">
            <summary>
            写入通道
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:RRQMSocket.Channel.WriteAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            写入通道
            </summary>
            <param name="data"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.Channel.WriteAsync(System.Byte[])">
            <summary>
            写入通道
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:RRQMSocket.ChannelData">
            <summary>
            通道数据
            </summary>
        </member>
        <member name="P:RRQMSocket.ChannelData.Size">
            <summary>
            通道数据长度
            </summary>
        </member>
        <member name="T:RRQMSocket.EventBus">
            <summary>
            事件总线
            </summary>
        </member>
        <member name="M:RRQMSocket.EventBus.#ctor(RRQMSocket.IEventObject)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.EventBus.Clear">
            <summary>
            清除所有事件
            </summary>
        </member>
        <member name="M:RRQMSocket.EventBus.AddEvent(System.String,System.String,RRQMSocket.AccessType)">
            <summary>
            添加事件
            </summary>
            <param name="publisherID"></param>
            <param name="accessType"></param>
            <param name="eventName"></param>
            <exception cref="T:System.ArgumentNullException">参数为空</exception>
            <exception cref="T:RRQMSocket.EventNameException">事件已存在</exception>
        </member>
        <member name="M:RRQMSocket.EventBus.RemoveEvent(System.String,System.String)">
            <summary>
            移除事件
            </summary>
            <param name="publisherID"></param>
            <param name="eventName"></param>
            <exception cref="T:System.ArgumentNullException">参数为空</exception>
            <exception cref="T:RRQMSocket.EventNameException">事件名不存在</exception>
            <exception cref="T:RRQMSocket.EventAccessException">没有事件访问权限</exception>
        </member>
        <member name="M:RRQMSocket.EventBus.ContainsEvent(System.String)">
            <summary>
            是否包含该事件
            </summary>
            <param name="eventName"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.EventBus.UnsubscribeEvent(System.String,System.String)">
            <summary>
            移除订阅
            </summary>
            <param name="eventName"></param>
            <param name="id"></param>
        </member>
        <member name="M:RRQMSocket.EventBus.SubscribeEvent(System.String,System.String)">
            <summary>
            订阅事件
            </summary>
            <param name="eventName"></param>
            <param name="id"></param>
        </member>
        <member name="M:RRQMSocket.EventBus.GetEvents">
            <summary>
            获取所有事件名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.EventBus.CanRaiseEvent(System.String,System.String,RRQMSocket.EventUnit@)">
            <summary>
            是否有权限触发事件。
            </summary>
            <param name="publisherID"></param>
            <param name="eventName"></param>
            <param name="eventUnit"></param>
        </member>
        <member name="T:RRQMSocket.EventBusTriggers">
            <summary>
            事件触发器
            </summary>
        </member>
        <member name="T:RRQMSocket.EventContext">
            <summary>
            事件容器
            </summary>
        </member>
        <member name="T:RRQMSocket.EventSender">
            <summary>
            事件参数触发
            </summary>
        </member>
        <member name="M:RRQMSocket.EventSender.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.EventSender.#ctor(System.String,RRQMSocket.RaiseSourceType,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventName"></param>
            <param name="raiseSourceType"></param>
            <param name="iD"></param>
        </member>
        <member name="P:RRQMSocket.EventSender.RaiseSourceType">
            <summary>
            事件触发源类型
            </summary>
        </member>
        <member name="P:RRQMSocket.EventSender.ID">
            <summary>
            当触发源为<see cref="F:RRQMSocket.RaiseSourceType.Client"/>或<see cref="F:RRQMSocket.RaiseSourceType.SocketClient"/>时，传递由哪个客户端触发。
            </summary>
        </member>
        <member name="P:RRQMSocket.EventSender.EventName">
            <summary>
            事件名称
            </summary>
        </member>
        <member name="T:RRQMSocket.EventUnit">
            <summary>
            事件单元
            </summary>
        </member>
        <member name="M:RRQMSocket.EventUnit.#ctor(RRQMSocket.AccessType)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.EventUnit.AccessType">
            <summary>
            操作权限
            </summary>
        </member>
        <member name="P:RRQMSocket.EventUnit.EventName">
            <summary>
            事件名称
            </summary>
        </member>
        <member name="P:RRQMSocket.EventUnit.PublisherID">
            <summary>
            发布者
            </summary>
        </member>
        <member name="P:RRQMSocket.EventUnit.Subscribers">
            <summary>
            订阅者
            </summary>
        </member>
        <member name="T:RRQMSocket.AsyncSender">
            <summary>
            异步独立线程发送器
            </summary>
        </member>
        <member name="P:RRQMSocket.AsyncSender.CacheLength">
            <summary>
            缓存发送池尺寸，
            默认100*1024*1024字节
            </summary>
        </member>
        <member name="M:RRQMSocket.AsyncSender.ProcessSend(System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
            发送完成时处理函数
            </summary>
            <param name="e">与发送完成操作相关联的SocketAsyncEventArg对象</param>
        </member>
        <member name="T:RRQMSocket.ClientSslOption">
            <summary>
            客户端Ssl验证
            </summary>
        </member>
        <member name="M:RRQMSocket.ClientSslOption.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.ClientSslOption.TargetHost">
            <summary>
            目标Host
            </summary>
        </member>
        <member name="P:RRQMSocket.ClientSslOption.ClientCertificates">
            <summary>
            验证组合
            </summary>
        </member>
        <member name="T:RRQMSocket.CreateOption">
            <summary>
            创建设置
            </summary>
        </member>
        <member name="P:RRQMSocket.CreateOption.ID">
            <summary>
            获取或设置该T的ID
            </summary>
        </member>
        <member name="T:RRQMSocket.FlowGate">
            <summary>
            流量控制
            </summary>
        </member>
        <member name="M:RRQMSocket.FlowGate.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.FlowGate.Maximum">
            <summary>
            最大值
            </summary>
        </member>
        <member name="M:RRQMSocket.FlowGate.AddLength(System.Int32)">
            <summary>
            添加增量
            </summary>
            <param name="increment"></param>
        </member>
        <member name="M:RRQMSocket.FlowGate.CheckWait">
            <summary>
            检测等待
            </summary>
        </member>
        <member name="M:RRQMSocket.FlowGate.GetNowTick">
            <summary>
            获取当前时间帧
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.IPHost">
            <summary>
            IP解析映射
            </summary>
        </member>
        <member name="M:RRQMSocket.IPHost.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="host">可以输入类似“127.0.0.1:7789”、“http://baidu.com”类型的参数</param>
        </member>
        <member name="M:RRQMSocket.IPHost.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            从IPAddress和端口号
            </summary>
            <param name="iPAddress"></param>
            <param name="port"></param>
        </member>
        <member name="M:RRQMSocket.IPHost.#ctor(System.Int32)">
            <summary>
            从端口号创建
            </summary>
            <param name="port"></param>
        </member>
        <member name="P:RRQMSocket.IPHost.Host">
            <summary>
            具有端口信息的host
            </summary>
        </member>
        <member name="P:RRQMSocket.IPHost.AddressFamily">
            <summary>
            寻址方案
            </summary>
        </member>
        <member name="P:RRQMSocket.IPHost.EndPoint">
            <summary>
            终结点
            </summary>
        </member>
        <member name="P:RRQMSocket.IPHost.IP">
            <summary>
            IP
            </summary>
        </member>
        <member name="P:RRQMSocket.IPHost.IsUri">
            <summary>
            是否为Uri
            </summary>
        </member>
        <member name="P:RRQMSocket.IPHost.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:RRQMSocket.IPHost.Uri">
            <summary>
            统一资源标识
            </summary>
        </member>
        <member name="M:RRQMSocket.IPHost.GetUrlPath">
            <summary>
            获取Url全路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.IPHost.ToString">
            <summary>
            返回EndPoint字符串
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.KeepAliveValue">
            <summary>
            保活机制
            </summary>
        </member>
        <member name="P:RRQMSocket.KeepAliveValue.KeepAliveTime">
            <summary>
            保活机制
            </summary>
        </member>
        <member name="P:RRQMSocket.KeepAliveValue.Enable">
            <summary>
            是否启用保活。默认为True。
            </summary>
        </member>
        <member name="P:RRQMSocket.KeepAliveValue.Interval">
            <summary>
            发送间隔，默认20*1000ms
            </summary>
        </member>
        <member name="P:RRQMSocket.KeepAliveValue.AckInterval">
            <summary>
            确认间隔，默认2*1000ms
            </summary>
        </member>
        <member name="T:RRQMSocket.NetworkMonitor">
            <summary>
            网络监听器
            </summary>
        </member>
        <member name="M:RRQMSocket.NetworkMonitor.#ctor(RRQMSocket.IPHost,System.Net.Sockets.Socket)">
            <summary>
            构造函数
            </summary>
            <param name="iPHost"></param>
            <param name="socket"></param>
        </member>
        <member name="P:RRQMSocket.NetworkMonitor.IPHost">
            <summary>
            监听地址组
            </summary>
        </member>
        <member name="P:RRQMSocket.NetworkMonitor.Socket">
            <summary>
            Socket组件
            </summary>
        </member>
        <member name="T:RRQMSocket.Protocol">
            <summary>
            协议类
            </summary>
        </member>
        <member name="F:RRQMSocket.Protocol.value">
            <summary>
            值
            </summary>
        </member>
        <member name="F:RRQMSocket.Protocol.None">
            <summary>
            表示无协议
            </summary>
        </member>
        <member name="F:RRQMSocket.Protocol.Http">
            <summary>
            获取http协议
            </summary>
        </member>
        <member name="F:RRQMSocket.Protocol.TCP">
            <summary>
            TCP协议
            </summary>
        </member>
        <member name="F:RRQMSocket.Protocol.UDP">
            <summary>
            UDP协议
            </summary>
        </member>
        <member name="F:RRQMSocket.Protocol.RRQMToken">
            <summary>
            RRQM验证协议
            </summary>
        </member>
        <member name="F:RRQMSocket.Protocol.RRQMProtocol">
            <summary>
            RRQM自定义协议
            </summary>
        </member>
        <member name="F:RRQMSocket.Protocol.WebSocket">
            <summary>
            获取WebSocket协议
            </summary>
        </member>
        <member name="M:RRQMSocket.Protocol.#ctor(System.String)">
            <summary>       
            表示
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:RRQMSocket.Protocol.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Protocol.GetHashCode">
            <summary>
            获取哈希码
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Protocol.Equals(System.Object)">
            <summary>
            比较是否和目标相等
            </summary>
            <param name="obj">目标</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Protocol.op_Equality(RRQMSocket.Protocol,RRQMSocket.Protocol)">
            <summary>
            等于
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Protocol.op_Inequality(RRQMSocket.Protocol,RRQMSocket.Protocol)">
            <summary>
            不等于
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.Common.RRQMSocketUtility">
            <summary>
            RRQMSocketTools
            </summary>
        </member>
        <member name="M:RRQMSocket.Common.RRQMSocketUtility.IsURL(System.String)">
            <summary>
            判断输入的字符串是否是一个超链接
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Common.RRQMSocketUtility.IsIPv4(System.String)">
            <summary>
            判断输入的字符串是否是表示一个IP地址
            </summary>
            <param name="input">被比较的字符串</param>
            <returns>是IP地址则为True</returns>
        </member>
        <member name="M:RRQMSocket.Common.RRQMSocketUtility.IsIPV6(System.String)">
            <summary>
            判断输入的字符串是否是合法的IPV6 地址
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.ServiceSslOption">
            <summary>
            服务器Ssl设置
            </summary>
        </member>
        <member name="P:RRQMSocket.ServiceSslOption.Certificate">
            <summary>
            证书
            </summary>
        </member>
        <member name="P:RRQMSocket.ServiceSslOption.ClientCertificateRequired">
            <summary>
            该值指定是否向客户端请求证书用于进行身份验证。 请注意，这只是一个请求 - 如果没有提供任何证书，服务器仍然可接受连接请求
            </summary>
        </member>
        <member name="T:RRQMSocket.SocketClientCollection">
            <summary>
            客户端集合
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClientCollection.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="M:RRQMSocket.SocketClientCollection.GetIDs">
            <summary>
            获取ID集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.SocketClientCollection.GetClients">
            <summary>
            获取所有的客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.SocketClientCollection.TryGetSocketClient(System.String,RRQMSocket.ISocketClient@)">
            <summary>
            尝试获取实例
            </summary>
            <param name="id"></param>
            <param name="socketClient"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.SocketClientCollection.TryGetSocketClient``1(System.String,``0@)">
            <summary>
            尝试获取实例
            </summary>
            <typeparam name="TClient"></typeparam>
            <param name="id"></param>
            <param name="socketClient"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.SocketClientCollection.SocketClientExist(System.String)">
            <summary>
            根据ID判断SocketClient是否存在
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="P:RRQMSocket.SocketClientCollection.Item(System.String)">
            <summary>
            获取SocketClient
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.SslOption">
            <summary>
            Ssl配置
            </summary>
        </member>
        <member name="P:RRQMSocket.SslOption.SslProtocols">
            <summary>
            协议版本
            </summary>
        </member>
        <member name="P:RRQMSocket.SslOption.CheckCertificateRevocation">
            <summary>
            该值指定身份验证期间是否检查证书吊销列表
            </summary>
        </member>
        <member name="P:RRQMSocket.SslOption.CertificateValidationCallback">
            <summary>
            SSL验证回调。
            </summary>
        </member>
        <member name="T:RRQMSocket.TransferByte">
            <summary>
            传输字节
            </summary>
        </member>
        <member name="M:RRQMSocket.TransferByte.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.TransferByte.#ctor(System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="P:RRQMSocket.TransferByte.Buffer">
            <summary>
            数据内存
            </summary>
        </member>
        <member name="P:RRQMSocket.TransferByte.Offset">
            <summary>
            偏移
            </summary>
        </member>
        <member name="P:RRQMSocket.TransferByte.Length">
            <summary>
            长度
            </summary>
        </member>
        <member name="T:RRQMSocket.WaitCreateChannel">
            <summary>
            创建通道
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitCreateChannel.RandomID">
            <summary>
            随机ID
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitCreateChannel.ChannelID">
            <summary>
            通道ID
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitCreateChannel.ClientID">
            <summary>
            客户端ID
            </summary>
        </member>
        <member name="T:RRQMSocket.WaitSetID">
            <summary>
            设置ID
            </summary>
        </member>
        <member name="M:RRQMSocket.WaitSetID.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="oldID"></param>
            <param name="newID"></param>
        </member>
        <member name="M:RRQMSocket.WaitSetID.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitSetID.OldID">
            <summary>
            旧ID
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitSetID.NewID">
            <summary>
            新ID
            </summary>
        </member>
        <member name="T:RRQMSocket.WaitVerify">
            <summary>
            验证消息
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitVerify.Token">
            <summary>
            令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitVerify.ID">
            <summary>
            ID
            </summary>
        </member>
        <member name="T:RRQMSocket.EventBusClient">
            <summary>
            事务总线客户端
            </summary>
        </member>
        <member name="M:RRQMSocket.EventBusClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.EventBusClient.PublisherID">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.EventBusClient.GetAllEvents">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.EventBusClient.PublishEvent(System.String,RRQMSocket.AccessType)">
            <summary>
            发布事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="accessType">访问权限</param>
            <exception cref="T:System.ArgumentNullException">参数为空</exception>
            <exception cref="T:RRQMSocket.EventNameException">事件已存在</exception>
            <exception cref="T:System.TimeoutException">操作超时</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.EventBusClient.RaiseEvent``1(System.String,``0)">
            <summary>
            触发事件
            </summary>
            <param name="eventName">事件名</param>
            <param name="arg">事件参数</param>
        </member>
        <member name="M:RRQMSocket.EventBusClient.SubscribeEvent``1(System.String,System.Action{RRQMSocket.EventSender,``0})">
            <summary>
            订阅事件
            </summary>
            <param name="eventName"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMSocket.EventBusClient.UnpublishEvent(System.String)">
            <summary>
            取消发布事件
            </summary>
            <param name="eventName">事件名称</param>
        </member>
        <member name="M:RRQMSocket.EventBusClient.UnsubscribeEvent(System.String)">
            <summary>
             <inheritdoc/>
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="M:RRQMSocket.EventBusClient.HandleEventBusDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            处理EventBus协议未处理的数据。
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.EventBusClient.HandleProtocolData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMSocket.EventBusService`1">
            <summary>
            事务总线服务器
            </summary>
            <typeparam name="TClient"></typeparam>
        </member>
        <member name="M:RRQMSocket.EventBusService`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.EventBusService`1.EventBus">
            <summary>
            事务总线
            </summary>
        </member>
        <member name="P:RRQMSocket.EventBusService`1.PublisherID">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.EventBusService`1.OnConnecting(`0,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.EventBusService`1.GetAllEvents">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.EventBusService`1.PublishEvent(System.String,RRQMSocket.AccessType)">
            <summary>
            发布事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="accessType">访问权限</param>
            <exception cref="T:System.ArgumentNullException">参数为空</exception>
            <exception cref="T:RRQMSocket.EventNameException">事件已存在</exception>
        </member>
        <member name="M:RRQMSocket.EventBusService`1.RaiseEvent``1(System.String,``0)">
            <summary>
            触发事件
            </summary>
            <param name="eventName"></param>
            <param name="arg"></param>
        </member>
        <member name="M:RRQMSocket.EventBusService`1.SubscribeEvent``1(System.String,System.Action{RRQMSocket.EventSender,``0})">
            <summary>
            订阅事件
            </summary>
            <param name="eventName"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMSocket.EventBusService`1.UnpublishEvent(System.String)">
            <summary>
            取消发布事件
            </summary>
            <param name="eventName">事件名称</param>
        </member>
        <member name="M:RRQMSocket.EventBusService`1.UnsubscribeEvent(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="T:RRQMSocket.EventBusSocketClient">
            <summary>
            事务总线服务器辅助类
            </summary>
        </member>
        <member name="M:RRQMSocket.EventBusSocketClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.EventBusSocketClient.PublisherID">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.EventBusSocketClient.GetAllEvents">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.EventBusSocketClient.PublishEvent(System.String,RRQMSocket.AccessType)">
            <summary>
            发布事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="accessType">访问权限</param>
            <exception cref="T:System.ArgumentNullException">参数为空</exception>
            <exception cref="T:RRQMSocket.EventNameException">事件已存在</exception>
        </member>
        <member name="M:RRQMSocket.EventBusSocketClient.RaiseEvent``1(System.String,``0)">
            <summary>
            触发事件
            </summary>
            <param name="eventName"></param>
            <param name="arg"></param>
        </member>
        <member name="M:RRQMSocket.EventBusSocketClient.SubscribeEvent``1(System.String,System.Action{RRQMSocket.EventSender,``0})">
            <summary>
            订阅事件
            </summary>
            <param name="eventName"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMSocket.EventBusSocketClient.UnpublishEvent(System.String)">
            <summary>
            取消发布事件
            </summary>
            <param name="eventName">事件名称</param>
        </member>
        <member name="M:RRQMSocket.EventBusSocketClient.UnsubscribeEvent(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="M:RRQMSocket.EventBusSocketClient.HandleProtocolData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.EventBusSocketClient.HandleEventBusDefaultData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            处理EventBus协议未处理的数据。
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMSocket.NATService">
            <summary>
            TCP端口转发服务器
            </summary>
        </member>
        <member name="M:RRQMSocket.NATService.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="serviceConfig"></param>
        </member>
        <member name="M:RRQMSocket.NATService.OnConnecting(RRQMSocket.NATSocketClient,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.NATSocketClient">
            <summary>
            端口转发辅助
            </summary>
        </member>
        <member name="P:RRQMSocket.NATSocketClient.CanSetDataHandlingAdapter">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.NATSocketClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.NATSocketClient.HandleReceivedDataFromTarget(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            处理从目标服务器接收的数据。
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.NATSocketClient.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.NATSocketClient.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:RRQMSocket.ProtocolClient">
            <summary>
            协议客户端
            </summary>
        </member>
        <member name="E:RRQMSocket.ProtocolClient.Received">
            <summary>
            接收到数据
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolClient.HandleProtocolData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClient.OnReceived(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            触发Received事件
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMSocket.ProtocolClientBase">
            <summary>
            协议客户端基类
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:RRQMSocket.ProtocolClientBase.StreamTransfered">
            <summary>
            流数据处理，用户需要在此事件中对e.Bucket手动释放。
            </summary>
        </member>
        <member name="E:RRQMSocket.ProtocolClientBase.StreamTransfering">
            <summary>
            即将接收流数据，用户需要在此事件中对e.Bucket初始化。
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.AddProtocolSubscriber(RRQMSocket.SubscriberBase)">
            <summary>
            添加协议订阅
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.ChannelExisted(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.CreateChannel">
            <summary>
            创建通道
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.CreateChannel(System.Int32)">
            <summary>
            创建通道
            </summary>
            <param name="id">指定ID</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.CreateChannel(System.String,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="clientID"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.CreateChannel(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="clientID"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.RemoveProtocolSubscriber(RRQMSocket.SubscriberBase)">
            <summary>
            移除协议订阅
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.ResetID(System.String)">
            <summary>
            重新设置ID,并且同步到服务器
            </summary>
            <param name="id"></param>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.ResetID(System.String,System.Threading.CancellationToken)">
            <summary>
            重新设置ID,并且同步到服务器
            </summary>
            <param name="id"></param>
            <param name="cancellationToken"></param>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.TrySubscribeChannel(System.Int32,RRQMSocket.Channel@)">
            <summary>
            订阅通道
            </summary>
            <param name="id"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.AddUsedProtocol(System.Int16,System.String)">
            <summary>
            添加已被使用的协议
            </summary>
            <param name="protocol"></param>
            <param name="describe"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.HandleProtocolData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            收到协议数据，由于性能考虑，
            byteBlock数据源并未剔除协议数据，
            所以真实数据起点为2，
            长度为Length-2。
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.HandleTokenReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            密封方法
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.OnConnecting(RRQMSocket.ClientConnectingEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.OnDisconnected(RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.OnHandshaked(RRQMSocket.MesEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.OnPong">
            <summary>
            收到服务器回应
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.OnStreamTransfered(RRQMSocket.StreamStatusEventArgs)">
            <summary>
            流数据处理，用户需要在此事件中对e.Bucket手动释放。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.OnStreamTransfering(RRQMSocket.StreamOperationEventArgs)">
            <summary>
            即将接收流数据，用户需要在此事件中对e.Bucket初始化。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            以-1协议，<inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.Send(System.Byte[])">
            <summary>
            以-1协议，<inheritdoc/>
            </summary>
            <param name="buffer"><inheritdoc/></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.Send(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            以-1协议，<inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.Send(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            以-1协议，<inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendAsync(System.Byte[])">
            <summary>
            以-1协议，<inheritdoc/>
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            以-1协议，<inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            以-1协议，<inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendAsync(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            以-1协议，<inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.Send(System.Int16)">
            <summary>
            发送协议状态
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.Send(System.Int16,System.Byte[])">
            <summary>
            发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.Send(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.Send(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            发送协议流
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendAsync(System.Int16)">
            <summary>
            异步发送协议状态
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendAsync(System.Int16,System.Byte[])">
            <summary>
            异步发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendAsync(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            异步发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendAsync(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            异步发送协议流
            </summary>
            <param name="protocol"></param>
            <param name="dataByteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.InternalSend(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.InternalSend(System.Int16,System.Byte[])">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.InternalSend(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.InternalSendAsync(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.InternalSendAsync(System.Int16,System.Byte[])">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.InternalSendAsync(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendStream(System.IO.Stream,RRQMSocket.StreamOperator,RRQMCore.Metadata)">
            <summary>
            发送流数据
            </summary>
            <param name="stream"></param>
            <param name="streamOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolClientBase.SendStreamAsync(System.IO.Stream,RRQMSocket.StreamOperator,RRQMCore.Metadata)">
            <summary>
            发送流数据
            </summary>
            <param name="stream"></param>
            <param name="streamOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.ProtocolService`1">
            <summary>
            协议服务器
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolService`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:RRQMSocket.ProtocolService`1.StreamTransfered">
            <summary>
            流数据处理，用户需要在此事件中对e.Bucket手动释放。
            </summary>
        </member>
        <member name="E:RRQMSocket.ProtocolService`1.StreamTransfering">
            <summary>
            即将接收流数据，用户需要在此事件中对e.Bucket初始化。
            </summary>
        </member>
        <member name="E:RRQMSocket.ProtocolService`1.Received">
            <summary>
            处理协议数据
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolService`1.ProtocolCanUse(System.Int16)">
            <summary>
            判断协议是否能被使用
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolService`1.ResetID(RRQMSocket.WaitSetID)">
            <summary>
            重置ID
            </summary>
            <param name="waitSetID"></param>
            <exception cref="T:RRQMSocket.ClientNotFindException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.ProtocolService`1.AddUsedProtocol(System.Int16,System.String)">
            <summary>
            添加已被使用的协议
            </summary>
            <param name="protocol"></param>
            <param name="describe"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolService`1.OnConnecting(`0,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolService`1.OnStreamTransfered(`0,RRQMSocket.StreamStatusEventArgs)">
            <summary>
            流数据处理，用户需要在此事件中对e.Bucket手动释放。覆盖父类方法将不会触发事件和插件。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolService`1.OnStreamTransfering(`0,RRQMSocket.StreamOperationEventArgs)">
            <summary>
            即将接收流数据，用户需要在此事件中对e.Bucket初始化。覆盖父类方法将不会触发事件和插件。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.ProtocolService">
            <summary>
            简单协议服务器
            </summary>
        </member>
        <member name="T:RRQMSocket.ProtocolSocketClient">
            <summary>
            协议辅助类
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.Send(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"><inheritdoc/></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.Send(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.Send(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendAsync(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendAsync(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.Send(System.Int16)">
            <summary>
            发送协议状态
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.Send(System.Int16,System.Byte[])">
            <summary>
            发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.Send(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.Send(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            发送协议流
            </summary>
            <param name="protocol"></param>
            <param name="dataByteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendAsync(System.Int16)">
            <summary>
            异步发送协议状态
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendAsync(System.Int16,System.Byte[])">
            <summary>
            异步发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendAsync(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            异步发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendAsync(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            异步发送协议流
            </summary>
            <param name="protocol"></param>
            <param name="dataByteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.InternalSend(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.InternalSend(System.Int16,System.Byte[])">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.InternalSend(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.InternalSendAsync(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.InternalSendAsync(System.Int16,System.Byte[])">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.InternalSendAsync(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            内部发送，不会检测用户协议
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendStream(System.IO.Stream,RRQMSocket.StreamOperator,RRQMCore.Metadata)">
            <summary>
            发送流数据
            </summary>
            <param name="stream"></param>
            <param name="streamOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.SendStreamAsync(System.IO.Stream,RRQMSocket.StreamOperator,RRQMCore.Metadata)">
            <summary>
            发送流数据
            </summary>
            <param name="stream"></param>
            <param name="streamOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.AddProtocolSubscriber(RRQMSocket.SubscriberBase)">
            <summary>
            添加协议订阅
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.CreateChannel">
            <summary>
            创建通道
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.CreateChannel(System.Int32)">
            <summary>
            创建通道
            </summary>
            <param name="id">指定ID</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.RemoveProtocolSubscriber(RRQMSocket.SubscriberBase)">
            <summary>
            移除协议订阅
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.TrySubscribeChannel(System.Int32,RRQMSocket.Channel@)">
            <summary>
            订阅通道
            </summary>
            <param name="id"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.HandleTokenData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            密封方法
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.OnReceived(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            触发Received事件
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.HandleProtocolData(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            收到协议数据，由于性能考虑，
            byteBlock数据源并未剔除协议数据，
            所以真实数据起点为2，
            长度为Length-2。
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.OnStreamTransfered(RRQMSocket.StreamStatusEventArgs)">
            <summary>
            流数据处理，用户需要在此事件中对e.Bucket手动释放。覆盖父类方法将不会触发事件和插件。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.OnStreamTransfering(RRQMSocket.StreamOperationEventArgs)">
            <summary>
            即将接收流数据，用户需要在此事件中对e.Bucket初始化。覆盖父类方法将不会触发事件和插件。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.OnDisconnected(RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.OnPing">
            <summary>
            在收到心跳
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.Pong">
            <summary>
            向客户端回应Pong
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.OnConnecting(RRQMSocket.ClientOperationEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.ResetID(RRQMSocket.WaitSetID)">
            <summary>
            重新设置ID
            </summary>
            <param name="waitSetID"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSocketClient.ChannelExisted(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.SocketClient">
            <summary>
            服务器辅助类
            </summary>
        </member>
        <member name="M:RRQMSocket.SocketClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.MaxPackageSize">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.Container">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.Protocol">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.CanSetDataHandlingAdapter">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.ClearType">
            <summary>
            选择清理类型
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.DataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.ID">
            <summary>
            用于索引的ID
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.IP">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.MainSocket">
            <summary>
            主通信器
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.Online">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.PluginsManager">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.Port">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.ReceiveType">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.Service">
            <summary>
            端口号
            </summary>
            <summary>
            包含此辅助类的主服务器类
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.Config">
            <summary>
            服务配置
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.UsePlugin">
            <summary>
            是否已启动插件
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.UseSsl">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.SocketClient.CanSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="E:RRQMSocket.SocketClient.Disconnected">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="M:RRQMSocket.SocketClient.Close">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.SocketClient.Close(System.String)">
            <summary>
            中断终端，传递中断消息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.GetStream">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.SocketClient.ResetID(System.String)">
            <summary>
            重新设置ID
            </summary>
            <param name="newID"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.SetDataHandlingAdapter(RRQMSocket.DataHandlingAdapter)">
            <summary>
            设置数据处理适配器
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            禁用发送或接收
            </summary>
            <param name="how"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.LoadSocketAndReadIpPort(System.Net.Sockets.Socket)">
            <summary>
            读取IP、Port
            </summary>
        </member>
        <member name="M:RRQMSocket.SocketClient.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理已接收到的数据。如果覆盖父类方法，则不会触发服务器方法和插件。
            <para>根据不同的数据处理适配器，会传递不同的数据</para>
            </summary>
            <param name="byteBlock">以二进制流形式传递</param>
            <param name="requestInfo">以解析的数据对象传递</param>
        </member>
        <member name="M:RRQMSocket.SocketClient.HandleSendingData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            当即将发送时，如果覆盖父类方法，则不会触发插件。
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <returns>返回值表示是否允许发送</returns>
        </member>
        <member name="M:RRQMSocket.SocketClient.OnClose">
            <summary>
            一旦断开TCP连接，该方法则必被调用。
            </summary>
        </member>
        <member name="M:RRQMSocket.SocketClient.OnConnected(RRQMCore.RRQMEventArgs)">
            <summary>
            当客户端完整建立TCP连接，如果覆盖父类方法，则不会触发插件。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.OnConnecting(RRQMSocket.ClientOperationEventArgs)">
            <summary>
            客户端正在连接，如果覆盖父类方法，则不会触发插件。
            </summary>
        </member>
        <member name="M:RRQMSocket.SocketClient.OnDisconnected(RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            客户端已断开连接，如果从Connecting中拒绝连接，则不会触发。如果覆盖父类方法，则不会触发插件。
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.OnHandleBuffer(RRQMCore.ByteManager.ByteBlock)">
            <summary>
             处理收到的最原始数据，该方法在适配器之前调用
            </summary>
            <param name="byteBlock"></param>
            <returns>返回值标识该数据是否继续向下执行</returns>
        </member>
        <member name="M:RRQMSocket.SocketClient.ResetID(RRQMSocket.WaitSetID)">
            <summary>
            重新设置ID
            </summary>
            <param name="waitSetID"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.SetAdapter(RRQMSocket.DataHandlingAdapter)">
            <summary>
            设置适配器，该方法不会检验<see cref="P:RRQMSocket.SocketClient.CanSetDataHandlingAdapter"/>的值。
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.HandleBuffer(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            处理数据
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.SocketSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            绕过适配器直接发送。<see cref="P:RRQMCore.ByteManager.ByteBlock.Buffer"/>作为数据时，仅可同步发送。
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="isAsync">是否异步发送</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.DefaultSend(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.DefaultSend(System.Byte[])">
             <summary>
            <inheritdoc/>
             </summary>
             <param name="buffer"></param>
             <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
             <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
             <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.DefaultSend(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.DefaultSendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"><inheritdoc/></param>
            <param name="offset"><inheritdoc/></param>
            <param name="length"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.DefaultSendAsync(System.Byte[])">
             <summary>
            <inheritdoc/>
             </summary>
             <param name="buffer"><inheritdoc/></param>
             <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
             <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
             <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.DefaultSendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.Send(System.Byte[])">
            <summary>
            发送字节流
            </summary>
            <param name="buffer"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送字节流
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.Send(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            发送流中的有效数据
            </summary>
            <param name="byteBlock"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.Send(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            IOCP发送
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.SendAsync(System.Byte[])">
            <summary>
            IOCP发送
            </summary>
            <param name="buffer"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.SendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            IOCP发送流中的有效数据
            </summary>
            <param name="byteBlock"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.SendAsync(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
        </member>
        <member name="M:RRQMSocket.SocketClient.Send(System.String,System.Byte[])">
            <summary>
            发送字节流
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="buffer"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.Send(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送字节流
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.Send(System.String,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            发送流中的有效数据
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="byteBlock"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.SendAsync(System.String,System.Byte[])">
            <summary>
            发送字节流
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="buffer"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.SendAsync(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送字节流
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.SocketClient.SendAsync(System.String,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            发送流中的有效数据
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="byteBlock"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="T:RRQMSocket.TcpClient">
            <summary>
            简单TCP客户端
            </summary>
        </member>
        <member name="E:RRQMSocket.TcpClient.Received">
            <summary>
            接收到数据
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpClient.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            接收数据
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="T:RRQMSocket.TcpClientBase">
            <summary>
            TCP客户端
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="E:RRQMSocket.TcpClientBase.Connected">
            <summary>
            成功连接到服务器
            </summary>
        </member>
        <member name="E:RRQMSocket.TcpClientBase.Connecting">
            <summary>
            准备连接的时候，此时已初始化Socket，但是并未建立Tcp连接
            </summary>
        </member>
        <member name="E:RRQMSocket.TcpClientBase.Disconnected">
            <summary>
            断开连接。在客户端未设置连接状态时，不会触发
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.OnConnected(RRQMSocket.MesEventArgs)">
            <summary>
            已经建立Tcp连接
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.OnConnecting(RRQMSocket.ClientConnectingEventArgs)">
            <summary>
            准备连接的时候，此时已初始化Socket，但是并未建立Tcp连接
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.OnDisconnected(RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            断开连接。在客户端未设置连接状态时，不会触发
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.Container">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.CanSetDataHandlingAdapter">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.Config">
            <summary>
            客户端配置
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.DataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.IP">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.MainSocket">
            <summary>
            主通信器
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.CanSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.Online">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.PluginsManager">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.ReceiveType">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.SeparateThreadSend">
            <summary>
            在异步发送时，使用独立线程发送
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.UsePlugin">
            <summary>
            是否已启用插件
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.UseSsl">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.Protocol">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.MaxPackageSize">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpClientBase.RemoteIPHost">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Close">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Close(System.String)">
            <summary>
            中断终端，传递中断消息。
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            禁用发送或接收
            </summary>
            <param name="how"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.AddPlugin``1">
            <summary>
            添加插件
            </summary>
            <typeparam name="TPlugin">插件类型</typeparam>
            <returns>插件类型实例</returns>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.AddPlugin(RRQMSocket.IPlugin)">
            <summary>
            添加插件
            </summary>
            <param name="plugin">插件</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.ClearPlugins">
            <summary>
            清空插件
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.RemovePlugin(RRQMSocket.IPlugin)">
            <summary>
            移除插件
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.RemovePlugin``1">
            <summary>
            移除插件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Connect(System.Int32)">
            <summary>
            请求连接到服务器。
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.ConnectAsync(System.Int32)">
            <summary>
            异步连接服务器
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.GetStream">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.SetDataHandlingAdapter(RRQMSocket.DataHandlingAdapter)">
            <summary>
            设置数据处理适配器
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Setup(System.String)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="ipHost"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Setup(RRQMSocket.RRQMConfig)">
            <summary>
            配置服务器
            </summary>
            <param name="clientConfig"></param>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理已接收到的数据。覆盖父类方法，将不会触发插件。
            </summary>
            <param name="byteBlock">以二进制流形式传递</param>
            <param name="requestInfo">以解析的数据对象传递</param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.HandleSendingData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            当即将发送时，如果覆盖父类方法，则不会触发插件。
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <returns>返回值表示是否允许发送</returns>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            加载配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.OnHandleBuffer(RRQMCore.ByteManager.ByteBlock)">
            <summary>
             处理收到的最原始数据，该方法在适配器之前调用
            </summary>
            <param name="byteBlock"></param>
            <returns>返回值标识该数据是否继续向下执行</returns>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.OnSeparateThreadSendError(System.Exception)">
            <summary>
            在独立发送线程中发生错误
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.SetAdapter(RRQMSocket.DataHandlingAdapter)">
            <summary>
            设置适配器，该方法不会检验<see cref="P:RRQMSocket.TcpClientBase.CanSetDataHandlingAdapter"/>的值。
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.HandleBuffer(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            处理数据
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Send(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Send(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"><inheritdoc/></param>
            <param name="offset"><inheritdoc/></param>
            <param name="length"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.Send(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"><inheritdoc/></param>
            <param name="offset"><inheritdoc/></param>
            <param name="length"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.SendAsync(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.SendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.SendAsync(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.DefaultSend(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"><inheritdoc/></param>
            <param name="offset"><inheritdoc/></param>
            <param name="length"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.DefaultSend(System.Byte[])">
             <summary>
            <inheritdoc/>
             </summary>
             <param name="buffer"><inheritdoc/></param>
             <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
             <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
             <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.DefaultSend(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.DefaultSendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"><inheritdoc/></param>
            <param name="offset"><inheritdoc/></param>
            <param name="length"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.DefaultSendAsync(System.Byte[])">
             <summary>
            <inheritdoc/>
             </summary>
             <param name="buffer"><inheritdoc/></param>
             <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
             <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
             <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.DefaultSendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"><inheritdoc/></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"><inheritdoc/></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"><inheritdoc/></exception>
            <exception cref="T:RRQMCore.RRQMException"><inheritdoc/></exception>
        </member>
        <member name="M:RRQMSocket.TcpClientBase.SocketSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            绕过适配器直接发送。<see cref="P:RRQMCore.ByteManager.ByteBlock.Buffer"/>作为数据时，仅可同步发送。
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="isAsync">是否异步发送</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="T:RRQMSocket.TcpService`1">
            <summary>
            TCP泛型服务器，由客户自己指定<see cref="T:RRQMSocket.SocketClient"/>类型。
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpService`1.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.ClearInterval">
            <summary>
            获取清理无数据交互的SocketClient，默认60。如果不想清除，可使用-1。
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.ClearType">
            <summary>
            清理类型
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.Config">
            <summary>
            获取服务器配置
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.Container">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.MaxCount">
            <summary>
            最大可连接数
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.Monitors">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.PluginsManager">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.ServerName">
            <summary>
            服务器名称
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.ServerState">
            <summary>
            服务器状态
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.SocketClients">
            <summary>
            获取当前连接的所有客户端
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.UsePlugin">
            <summary>
            是否已启动插件
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpService`1.UseSsl">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="E:RRQMSocket.TcpService`1.Connected">
            <summary>
            用户连接完成
            </summary>
        </member>
        <member name="E:RRQMSocket.TcpService`1.Connecting">
            <summary>
            有用户连接的时候
            </summary>
        </member>
        <member name="E:RRQMSocket.TcpService`1.Disconnected">
            <summary>
            有用户断开连接
            </summary>
        </member>
        <member name="E:RRQMSocket.TcpService`1.IDChanged">
            <summary>
            当客户端ID被修改时触发。
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpService`1.OnClientConnected(RRQMSocket.ISocketClient,RRQMCore.RRQMEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.OnClientConnecting(RRQMSocket.ISocketClient,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.OnClientDisconnected(RRQMSocket.ISocketClient,RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.OnClientReceivedData(RRQMSocket.ISocketClient,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.OnConnected(`0,RRQMCore.RRQMEventArgs)">
            <summary>
            客户端连接完成，覆盖父类方法将不会触发事件。
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.OnConnecting(`0,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            客户端请求连接，覆盖父类方法将不会触发事件。
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.OnDisconnected(`0,RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            客户端断开连接，覆盖父类方法将不会触发事件。
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.OnIDChanged(`0,RRQMCore.RRQMEventArgs)">
            <summary>
            当客户端ID被修改时触发，覆盖父类方法将不会触发事件和插件。
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.OnReceived(`0,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            当收到适配器数据，父类方法为空。
            </summary>
            <param name="socketClient"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.AddPlugin``1">
            <summary>
            添加插件
            </summary>
            <typeparam name="TPlugin">插件类型</typeparam>
            <returns>插件类型实例</returns>
        </member>
        <member name="M:RRQMSocket.TcpService`1.AddPlugin(RRQMSocket.IPlugin)">
            <summary>
            添加插件
            </summary>
            <param name="plugin">插件</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpService`1.ClearPlugins">
            <summary>
            清空插件
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpService`1.RemovePlugin(RRQMSocket.IPlugin)">
            <summary>
            移除插件
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.RemovePlugin``1">
            <summary>
            移除插件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMSocket.TcpService`1.Clear">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpService`1.GetClients">
            <summary>
            获取当前在线的所有客户端
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpService`1.GetDefaultNewID">
            <summary>
            获取默认的新ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpService`1.ResetID(RRQMSocket.WaitSetID)">
            <summary>
             重新设置ID
            </summary>
            <param name="waitSetID"></param>
            <exception cref="T:RRQMSocket.ClientNotFindException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpService`1.ResetID(System.String,System.String)">
            <summary>
            重置ID
            </summary>
            <param name="oldID"></param>
            <param name="newID"></param>
            <exception cref="T:RRQMSocket.ClientNotFindException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpService`1.Setup(RRQMSocket.RRQMConfig)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="serviceConfig"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.Setup(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.SocketClientExist(System.String)">
             <summary>
            <inheritdoc/>
             </summary>
             <param name="id"></param>
             <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpService`1.Start">
            <summary>
            <inheritdoc/>
            </summary>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:RRQMSocket.TcpService`1.Stop">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpService`1.TryGetSocketClient(System.String,`0@)">
            <summary>
            尝试获取TClient
            </summary>
            <param name="id">ID</param>
            <param name="socketClient">TClient</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpService`1.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.GetClientInstence">
            <summary>
            初始化客户端实例，默认实现为<see cref="M:RRQMCore.Dependency.Container.Resolve``1"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpService`1.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            加载配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:RRQMSocket.TcpService`1.PreviewBind(System.Net.Sockets.Socket)">
            <summary>
            在Socket初始化对象后，Bind之前调用。
            可用于设置Socket参数。
            父类方法可覆盖。
            </summary>
            <param name="socket"></param>
        </member>
        <member name="T:RRQMSocket.TcpService">
            <summary>
            TCP服务器
            </summary>
        </member>
        <member name="E:RRQMSocket.TcpService.Received">
            <summary>
            处理数据
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpService.OnReceived(RRQMSocket.SocketClient,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="socketClient"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="T:RRQMSocket.TcpServiceBase">
            <summary>
            Tcp服务器基类
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpServiceBase.Monitors">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpServiceBase.ServerName">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpServiceBase.ServerState">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpServiceBase.Config">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpServiceBase.SocketClients">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpServiceBase.UseSsl">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpServiceBase.PluginsManager">
            <summary>
            插件管理器
            </summary>
        </member>
        <member name="P:RRQMSocket.TcpServiceBase.Container">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.Clear">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.GetIDs">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.ResetID(RRQMSocket.WaitSetID)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="waitSetID"></param>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.Setup(RRQMSocket.RRQMConfig)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="serverConfig"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.Setup(System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="port"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.Start">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.Stop">
            <summary>
            <inheritdoc/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.OnClientConnected(RRQMSocket.ISocketClient,RRQMCore.RRQMEventArgs)">
            <summary>
            客户端连接完成
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.OnClientConnecting(RRQMSocket.ISocketClient,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            客户端请求连接
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.OnClientDisconnected(RRQMSocket.ISocketClient,RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            客户端断开连接
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.OnClientReceivedData(RRQMSocket.ISocketClient,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            收到数据时
            </summary>
            <param name="socketClient"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.Send(System.String,System.Byte[])">
            <summary>
            发送字节流
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="buffer"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.Send(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送字节流
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.Send(System.String,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            发送流中的有效数据
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="byteBlock"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.SendAsync(System.String,System.Byte[])">
            <summary>
            发送字节流
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="buffer"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.SendAsync(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送字节流
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.TcpServiceBase.SendAsync(System.String,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            发送流中的有效数据
            </summary>
            <param name="id">用于检索TcpSocketClient</param>
            <param name="byteBlock"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="T:RRQMSocket.WaitingTcpClient">
            <summary>
            发送并等待结果返回的TCP客户端
            </summary>
        </member>
        <member name="M:RRQMSocket.WaitingTcpClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.WaitingTcpClient.SendThenReturn(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitingTcpClient.SendThenReturn(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitingTcpClient.SendThenReturn(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送流中的有效数据
            </summary>
            <param name="byteBlock">数据块载体</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitingTcpClient.SendThenReturnAsync(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitingTcpClient.SendThenReturnAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitingTcpClient.SendThenReturnAsync(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="byteBlock">数据块载体</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitingTcpClient.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="T:RRQMSocket.TokenClient">
            <summary>
            需要Token验证的TCP客户端
            </summary>
        </member>
        <member name="E:RRQMSocket.TokenClient.Received">
            <summary>
            接收到数据
            </summary>
        </member>
        <member name="M:RRQMSocket.TokenClient.HandleTokenReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            接收数据
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="T:RRQMSocket.TokenClientBase">
            <summary>
            需要Token验证的TCP客户端基类
            </summary>
        </member>
        <member name="M:RRQMSocket.TokenClientBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.TokenClientBase.WaitHandlePool">
            <summary>
            等待返回池
            </summary>
        </member>
        <member name="P:RRQMSocket.TokenClientBase.ID">
            <summary>
            获取服务器分配的ID
            </summary>
        </member>
        <member name="P:RRQMSocket.TokenClientBase.IsHandshaked">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.TokenClientBase.ResetID(System.String)">
            <summary>
            重新设置ID,但是不会同步到服务器
            </summary>
            <param name="newID"></param>
        </member>
        <member name="M:RRQMSocket.TokenClientBase.Connect(System.Int32)">
            <summary>
            连接到服务器
            </summary>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <exception cref="T:RRQMSocket.RRQMTokenVerifyException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="M:RRQMSocket.TokenClientBase.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理接收数据
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.TokenClientBase.HandleTokenReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理Token数据，覆盖父类方法将不会触发事件和插件。
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.TokenClientBase.Connect(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
            连接到服务器
            </summary>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <exception cref="T:RRQMSocket.RRQMTokenVerifyException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
        </member>
        <member name="E:RRQMSocket.TokenClientBase.Handshaked">
            <summary>
            在完成握手连接时
            </summary>
        </member>
        <member name="M:RRQMSocket.TokenClientBase.OnHandshaked(RRQMSocket.MesEventArgs)">
            <summary>
            在完成握手连接时，覆盖父类方法将不会触发插件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TokenClientBase.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            加载配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:RRQMSocket.TokenClientBase.OnDisconnected(RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.TokenService`1">
            <summary>
            Token服务器
            </summary>
        </member>
        <member name="P:RRQMSocket.TokenService`1.VerifyTimeout">
            <summary>
            验证超时时间,默认为3000ms
            </summary>
        </member>
        <member name="P:RRQMSocket.TokenService`1.VerifyToken">
            <summary>
            连接令箭
            </summary>
        </member>
        <member name="E:RRQMSocket.TokenService`1.Handshaked">
            <summary>
            在完成握手连接时
            </summary>
        </member>
        <member name="M:RRQMSocket.TokenService`1.OnHandshaked(`0,RRQMSocket.MesEventArgs)">
            <summary>
            在完成握手连接时
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TokenService`1.OnVerifyToken(`0,RRQMSocket.VerifyOptionEventArgs)">
            <summary>
            在验证Token时
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.TokenService`1.OnAbnormalVerify(`0,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            收到非正常连接。
            一般地，这是由其他类型客户端发起的连接。
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.TokenService`1.HandleTokenData(`0,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理Token收到的数据
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.TokenService`1.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            载入配置
            </summary>
            <param name="RRQMConfig"></param>
        </member>
        <member name="M:RRQMSocket.TokenService`1.OnConnecting(`0,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            客户端请求连接
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.TokenService">
            <summary>
            简单Token服务器
            </summary>
        </member>
        <member name="E:RRQMSocket.TokenService.Received">
            <summary>
            收到数据
            </summary>
        </member>
        <member name="M:RRQMSocket.TokenService.HandleTokenData(RRQMSocket.TokenSocketClient,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="T:RRQMSocket.TokenSocketClient">
            <summary>
            令箭辅助类
            </summary>
        </member>
        <member name="M:RRQMSocket.TokenSocketClient.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.TokenSocketClient.VerifyTimeout">
            <summary>
            验证超时时间,默认为3000ms
            </summary>
        </member>
        <member name="P:RRQMSocket.TokenSocketClient.VerifyToken">
            <summary>
            连接令箭
            </summary>
        </member>
        <member name="P:RRQMSocket.TokenSocketClient.WaitHandlePool">
            <summary>
            等待返回池
            </summary>
        </member>
        <member name="P:RRQMSocket.TokenSocketClient.IsHandshaked">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.TokenSocketClient.HandleReceivedData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理接收数据
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.TokenSocketClient.OnHandshaked(RRQMSocket.MesEventArgs)">
            <summary>
            在完成握手连接时
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TokenSocketClient.HandleTokenData(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理Token数据，覆盖父类方法将不会触发事件和插件。
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="M:RRQMSocket.TokenSocketClient.OnAbnormalVerify(RRQMSocket.ReceivedDataEventArgs)">
             <summary>
             收到非正常连接。覆盖父类方法将不会触发事件和插件。
            <para> 一般地，这是由普通TCP发起的连接请求。</para>
             </summary>
             <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TokenSocketClient.OnVerifyToken(RRQMSocket.VerifyOptionEventArgs)">
            <summary>
            当验证Token时，覆盖父类方法将不会触发事件和插件。
            </summary>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.TokenSocketClient.OnConnected(RRQMCore.RRQMEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.TokenSocketClient.OnClose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:RRQMSocket.UdpSession">
            <summary>
            简单UDP会话。
            </summary>
        </member>
        <member name="E:RRQMSocket.UdpSession.Received">
            <summary>
            当收到数据时
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpSession.HandleReceivedData(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="T:RRQMSocket.UdpSessionBase">
            <summary>
            UDP基类服务器。
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.CanSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.CanSetDataHandlingAdapter">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.Config">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.Container">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.DataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.MaxPackageSize">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.Monitor">
            <summary>
            监听器
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.PluginsManager">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.Protocol">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.RemoteIPHost">
            <summary>
            默认远程节点
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.ServerName">
            <summary>
            服务器名称
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.ServerState">
            <summary>
            获取服务器状态
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpSessionBase.UsePlugin">
            <summary>
            是否已启用插件
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DropMulticastGroup(System.Net.IPAddress)">
            <summary>
            退出组播
            </summary>
            <param name="multicastAddr"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.JoinMulticastGroup(System.Net.IPAddress)">
            <summary>
            加入组播。
            <para>组播地址为 224.0.0.0 ~ 239.255.255.255，其中 224.0.0.0~224.255.255.255 不建议在用户程序中使用，因为它们一般都有特殊用途。</para>
            </summary>
            <param name="multicastAddr"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SetDataHandlingAdapter(RRQMSocket.UdpDataHandlingAdapter)">
            <summary>
            设置数据处理适配器
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Setup(RRQMSocket.RRQMConfig)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="serverConfig"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Setup(System.Int32)">
            <summary>
            通过端口配置
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Start">
            <summary>
            启动服务
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.AddPlugin``1">
            <summary>
            添加插件
            </summary>
            <typeparam name="TPlugin">插件类型</typeparam>
            <returns>插件类型实例</returns>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.AddPlugin(RRQMSocket.IPlugin)">
            <summary>
            添加插件
            </summary>
            <param name="plugin">插件</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.ClearPlugins">
            <summary>
            清空插件
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.RemovePlugin(RRQMSocket.IPlugin)">
            <summary>
            移除插件
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.RemovePlugin``1">
            <summary>
            移除插件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Stop">
            <summary>
            停止服务器
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Dispose(System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.HandleReceivedData(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理已接收到的数据。
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock">以二进制流形式传递</param>
            <param name="requestInfo">以解析的数据对象传递</param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.HandleSendingData(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            当即将发送时，如果覆盖父类方法，则不会触发插件。
            </summary>
            <param name="endPoint"></param>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <returns>返回值表示是否允许发送</returns>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.LoadConfig(RRQMSocket.RRQMConfig)">
            <summary>
            加载配置
            </summary>
            <param name="config"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.PreviewBind(System.Net.Sockets.Socket)">
            <summary>
            在Socket初始化对象后，Bind之前调用。
            可用于设置Socket参数。
            父类方法可覆盖。
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SetAdapter(RRQMSocket.UdpDataHandlingAdapter)">
            <summary>
            设置适配器，该方法不会检验<see cref="P:RRQMSocket.UdpSessionBase.CanSetDataHandlingAdapter"/>的值。
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SocketSend(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            绕过适配器直接发送。<see cref="P:RRQMCore.ByteManager.ByteBlock.Buffer"/>作为数据时，仅可同步发送。
            </summary>
            <param name="endPoint"></param>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="isAsync">是否异步发送</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            向默认终结点发送
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Send(System.Byte[])">
            <summary>
            向默认终结点发送
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Send(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            向默认终结点发送
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            IOCP发送
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SendAsync(System.Byte[])">
            <summary>
            IOCP发送
            </summary>
            <param name="buffer"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            IOCP发送流中的有效数据
            </summary>
            <param name="byteBlock"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Send(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            向设置的远程同步发送
            </summary>
            <param name="remoteEP"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Send(System.Net.EndPoint,System.Byte[])">
            <summary>
            向设置的远程同步发送
            </summary>
            <param name="remoteEP"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Send(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            向设置的远程同步发送
            </summary>
            <param name="remoteEP"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SendAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            向设置的远程异步发送
            </summary>
            <param name="remoteEP"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException"></exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException"></exception>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SendAsync(System.Net.EndPoint,System.Byte[])">
            <summary>
            向设置的远程异步发送
            </summary>
            <param name="remoteEP"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SendAsync(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            向设置的远程异步发送
            </summary>
            <param name="remoteEP"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSend(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSend(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSend(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSend(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSend(System.Net.EndPoint,System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSend(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSendAsync(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSendAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSendAsync(System.Net.EndPoint,System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.DefaultSendAsync(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Send(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.Send(System.Net.EndPoint,System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="transferBytes"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SendAsync(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
        </member>
        <member name="M:RRQMSocket.UdpSessionBase.SendAsync(System.Net.EndPoint,System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="transferBytes"></param>
        </member>
        <member name="T:RRQMSocket.RRQMConfig">
            <summary>
            配置文件基类
            </summary>
        </member>
        <member name="P:RRQMSocket.RRQMConfig.BufferLength">
            <summary>
            接收缓存容量，默认1024*10，其作用有两个：
            <list type="number">
            <item>指示单次可接受的最大数据量</item>
            <item>指示常规申请内存块的长度</item>
            </list>
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfig.SetBufferLength(System.Int32)">
            <summary>
            接收缓存容量，默认1024*10，其作用有两个：
            <list type="number">
            <item>指示单次可接受的最大数据量</item>
            <item>指示常规申请内存块的长度</item>
            </list>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfig.BufferLengthProperty">
            <summary>
            接收缓存容量，默认1024*10，其作用有两个：
            <list type="number">
            <item>指示单次可接受的最大数据量</item>
            <item>指示常规申请内存块的长度</item>
            </list>
            所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="P:RRQMSocket.RRQMConfig.ReceiveType">
            <summary>
            接收类型，默认为<see cref="F:RRQMSocket.ReceiveType.Auto"/>
            <para><see cref="F:RRQMSocket.ReceiveType.Auto"/>为自动接收数据，然后主动触发。</para>
            <para><see cref="F:RRQMSocket.ReceiveType.None"/>为不投递IO接收申请，用户可通过<see cref="M:RRQMSocket.ITcpClientBase.GetStream"/>，获取到流以后，自己处理接收。注意：连接端不会感知主动断开</para>
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfig.SetReceiveType(RRQMSocket.ReceiveType)">
            <summary>
            接收类型，默认为<see cref="F:RRQMSocket.ReceiveType.Auto"/>
            <para><see cref="F:RRQMSocket.ReceiveType.Auto"/>为自动接收数据，然后主动触发。</para>
            <para><see cref="F:RRQMSocket.ReceiveType.None"/>为不投递IO接收申请，用户可通过<see cref="M:RRQMSocket.ITcpClientBase.GetStream"/>，获取到流以后，自己处理接收。注意：连接端不会感知主动断开</para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfig.ReceiveTypeProperty">
            <summary>
            接收类型，默认为<see cref="F:RRQMSocket.ReceiveType.Auto"/>
            <para><see cref="F:RRQMSocket.ReceiveType.Auto"/>为自动接收数据，然后主动触发。</para>
            <para><see cref="F:RRQMSocket.ReceiveType.None"/>为不投递IO接收申请，用户可通过<see cref="M:RRQMSocket.ITcpClientBase.GetStream"/>，获取到流以后，自己处理接收。注意：连接端不会感知主动断开</para>
            所需类型<see cref="T:RRQMSocket.ReceiveType"/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfig.SetLicenceKey(System.String)">
            <summary>
            设置商业版许可证。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfig.LicenceKeyProperty">
            <summary>
            许可密钥
            </summary>
        </member>
        <member name="P:RRQMSocket.RRQMConfig.IsUsePlugin">
            <summary>
            使用插件
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfig.UsePlugin">
            <summary>
            启用插件
            </summary>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfig.IsUsePluginProperty">
            <summary>
            使用插件,
            所需类型<see cref="T:System.Boolean"></see>
            </summary>
        </member>
        <member name="T:RRQMSocket.RRQMConfigExtensions">
            <summary>
            RRQMConfig配置扩展
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.NATModeProperty">
            <summary>
            转发的类型，
            所需类型<see cref="T:RRQMSocket.NATMode"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.TargetIPHostsProperty">
            <summary>
            转发的目标地址集合，
            所需类型<see cref="T:RRQMSocket.IPHost"/>数组
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetNATMode(RRQMSocket.RRQMConfig,RRQMSocket.NATMode)">
            <summary>
             转发的类型
             <para>仅适用于<see cref="T:RRQMSocket.NATService"/>及派生类</para>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetTargetIPHosts(RRQMSocket.RRQMConfig,RRQMSocket.IPHost[])">
            <summary>
            转发的目标地址集合。
            <para>仅适用于<see cref="T:RRQMSocket.NATService"/>及派生类</para>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.HeartbeatFrequencyProperty">
            <summary>
            心跳频率，默认为-1。（设置为-1时禁止心跳），
             所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetHeartbeatFrequency(RRQMSocket.RRQMConfig,System.Int32)">
            <summary>
            心跳频率，默认为-1。（设置为-1时禁止心跳）
            <para>仅适用于<see cref="T:RRQMSocket.ProtocolClientBase"/>及派生类</para>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.ServerNameProperty">
            <summary>
            服务名称，用于标识，无实际意义，所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.ThreadCountProperty">
            <summary>
            多线程数量，默认为10。
            <para>TCP模式中，该值等效于<see cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)"/></para>
            <para>UDP模式中，该值为重叠IO并发数</para>
            所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetServerName(RRQMSocket.RRQMConfig,System.String)">
            <summary>
            服务名称，用于标识，无实际意义
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetThreadCount(RRQMSocket.RRQMConfig,System.Int32)">
            <summary>
            多线程数量，默认为10。
            <para>TCP模式中，该值等效于<see cref="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)"/></para>
            <para>UDP模式中，该值为重叠IO并发数</para>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.BindIPHostProperty">
            <summary>
            TCP固定端口绑定，
            所需类型<see cref="T:RRQMSocket.IPHost"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.KeepAliveValueProperty">
            <summary>
            在Socket配置KeepAlive属性，
            所需类型<see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.MaxPackageSizeProperty">
            <summary>
            数据包最大值。该值会在适当时间，直接作用于<see cref="P:RRQMSocket.DataHandlingAdapter.MaxPackageSize"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.NoDelayProperty">
            <summary>
            设置Socket不使用Delay算法，
            所需类型<see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.RemoteIPHostProperty">
            <summary>
            远程目标地址，所需类型<see cref="T:RRQMSocket.IPHost"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.SeparateThreadSendProperty">
            <summary>
            在异步发送时，使用独立线程发送，所需类型<see cref="T:System.Boolean"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.SslOptionProperty">
            <summary>
            Ssl配置，为Null时则不启用
            所需类型<see cref="T:RRQMSocket.SslOption"/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetKeepAliveValue(RRQMSocket.RRQMConfig,RRQMSocket.KeepAliveValue)">
            <summary>
            在Socket的KeepAlive属性。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetBindIPHost(RRQMSocket.RRQMConfig,RRQMSocket.IPHost)">
            <summary>
            固定端口绑定。
            <para>在<see cref="T:RRQMSocket.UdpSessionBase"/>中表示本地监听地址</para>
            <para>在<see cref="T:RRQMSocket.TcpClientBase"/>中表示固定客户端端口号。</para>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetClientSslOption(RRQMSocket.RRQMConfig,RRQMSocket.ClientSslOption)">
            <summary>
            设置客户端Ssl配置，为Null时则不启用。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetMaxPackageSize(RRQMSocket.RRQMConfig,System.Int32)">
            <summary>
            数据包最大值，默认1024*1024*10。该值会在适当时间，直接作用于<see cref="P:RRQMSocket.DataHandlingAdapter.MaxPackageSize"/>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetRemoteIPHost(RRQMSocket.RRQMConfig,RRQMSocket.IPHost)">
            <summary>
            设置远程目标地址。在<see cref="T:RRQMSocket.UdpSessionBase"/>中，表示默认发送时的目标地址。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.UseNoDelay(RRQMSocket.RRQMConfig)">
            <summary>
            设置Socket的NoDelay属性，默认false。
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.UseSeparateThreadSend(RRQMSocket.RRQMConfig)">
            <summary>
            在异步发送时，使用独立线程发送。
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.BacklogProperty">
            <summary>
            挂起连接队列的最大长度，所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.ClearIntervalProperty">
            <summary>
            获取或设置清理无数据交互的SocketClient，默认60*1000 ms。如果不想清除，可使用-1。
            所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.ClearTypeProperty">
            <summary>
            清理统计类型。
            <para><see cref="F:RRQMSocket.ClearType.Receive"/>为在收到数据时，刷新统计，如果一直有数据接收，则不会被主动清理断开</para>
            <para><see cref="F:RRQMSocket.ClearType.Send"/>为在发送数据时，刷新统计，如果一直有数据发送，则不会被主动清理断开</para>
            <para>二者可叠加使用。</para>
            所需类型<see cref="T:RRQMSocket.ClearType"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.ListenIPHostsProperty">
            <summary>
            服务器负责监听的地址组。所需类型<see cref="T:RRQMSocket.IPHost"/>数组
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.MaxCountProperty">
            <summary>
            最大可连接数，默认为10000，所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetBacklog(RRQMSocket.RRQMConfig,System.Int32)">
            <summary>
            挂起连接队列的最大长度，默认100。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetClearInterval(RRQMSocket.RRQMConfig,System.Int32)">
            <summary>
            设置清理无数据交互的SocketClient，默认60*1000 ms。如果不想清除，可使用-1
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetClearType(RRQMSocket.RRQMConfig,RRQMSocket.ClearType)">
            <summary>
            清理统计类型。
            <para><see cref="F:RRQMSocket.ClearType.Receive"/>为在收到数据时，刷新统计，如果一直有数据接收，则不会被主动清理断开</para>
            <para><see cref="F:RRQMSocket.ClearType.Send"/>为在发送数据时，刷新统计，如果一直有数据发送，则不会被主动清理断开</para>
            <para>二者可叠加使用。</para>
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetListenIPHosts(RRQMSocket.RRQMConfig,RRQMSocket.IPHost[])">
            <summary>
            服务器负责监听的地址组。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetMaxCount(RRQMSocket.RRQMConfig,System.Int32)">
            <summary>
            最大可连接数，默认为10000。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetServiceSslOption(RRQMSocket.RRQMConfig,RRQMSocket.ServiceSslOption)">
            <summary>
            设置客户端Ssl配置，为Null时则不启用。
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.VerifyTimeoutProperty">
            <summary>
            验证超时时间,默认为3000ms, 所需类型<see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.VerifyTokenProperty">
            <summary>
            连接令箭,当为null或空时，重置为默认值“rrqm”, 所需类型<see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetVerifyTimeout(RRQMSocket.RRQMConfig,System.Int32)">
            <summary>
            验证超时时间,默认为3000ms
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.SetVerifyToken(RRQMSocket.RRQMConfig,System.String)">
            <summary>
            连接令箭，当为null或空时，重置为默认值“rrqm”
            </summary>
            <param name="config"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="F:RRQMSocket.RRQMConfigExtensions.EnableBroadcastProperty">
            <summary>
            该值指定 System.Net.Sockets.Socket可以发送或接收广播数据包。
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMConfigExtensions.UseBroadcast(RRQMSocket.RRQMConfig)">
            <summary>
            该值指定 System.Net.Sockets.Socket可以发送或接收广播数据包。
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.CustomDataHandlingAdapter`1">
            <summary>
            用户自定义数据处理适配器，使用该适配器时，接收方收到的数据中，<see cref="T:RRQMCore.ByteManager.ByteBlock"/>将为null，
            同时<see cref="T:RRQMSocket.IRequestInfo"/>将实现为TRequest，发送数据直接发送。
            <para>此处设计思路借鉴SuperSocket。</para>
            </summary>
        </member>
        <member name="F:RRQMSocket.CustomDataHandlingAdapter`1.tempByteBlock">
            <summary>
            缓存数据，如果需要手动释放，请先判断，然后到调用<see cref="M:RRQMCore.ByteManager.ByteBlock.Dispose(System.Boolean)"/>后，再置空；
            </summary>
        </member>
        <member name="P:RRQMSocket.CustomDataHandlingAdapter`1.CanSplicingSend">
            <summary>
            默认不支持拼接发送
            </summary>
        </member>
        <member name="M:RRQMSocket.CustomDataHandlingAdapter`1.Filter(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Boolean,`0@)">
            <summary>
            筛选解析数据。实例化的TRequest会一直保存，直至解析成功，或手动清除。
            <para>当不满足解析条件时，请返回<see cref="F:RRQMSocket.FilterResult.Cache"/>，此时会保存<see cref="P:RRQMCore.ByteManager.ByteBlock.CanReadLen"/>的数据</para>
            <para>当数据部分异常时，请移动<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>到指定位置，然后返回<see cref="F:RRQMSocket.FilterResult.GoOn"/></para>
            <para>当完全满足解析条件时，请返回<see cref="F:RRQMSocket.FilterResult.Success"/>最后将<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>移至指定位置。</para>
            </summary>
            <param name="byteBlock">字节块</param>
            <param name="length">剩余有效数据长度，计算实质为:ByteBlock.Len和ByteBlock.Pos的差值。</param>
            <param name="beCached">是否为上次遗留对象，当该参数为True时，request也将是上次实例化的对象。</param>
            <param name="request">对象。</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.CustomDataHandlingAdapter`1.PreviewReceived(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.CustomDataHandlingAdapter`1.PreviewSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.CustomDataHandlingAdapter`1.PreviewSend(System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="F:RRQMSocket.CustomDataHandlingAdapter`1.tempRequest">
            <summary>
            缓存对象。
            </summary>
        </member>
        <member name="M:RRQMSocket.CustomDataHandlingAdapter`1.OnReceivedSuccess(`0)">
            <summary>
            成功执行接收以后。
            </summary>
            <param name="request"></param>
        </member>
        <member name="M:RRQMSocket.CustomDataHandlingAdapter`1.Reset">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:RRQMSocket.CustomFixedHeaderDataHandlingAdapter`1">
            <summary>
            用户自定义固定包头解析器，使用该适配器时，接收方收到的数据中，<see cref="T:RRQMCore.ByteManager.ByteBlock"/>将为null，同时<see cref="T:RRQMSocket.IRequestInfo"/>将实现为TFixedHeaderRequestInfo。
            </summary>
        </member>
        <member name="P:RRQMSocket.CustomFixedHeaderDataHandlingAdapter`1.HeaderLength">
            <summary>
            固定包头的长度。
            </summary>
        </member>
        <member name="M:RRQMSocket.CustomFixedHeaderDataHandlingAdapter`1.Filter(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Boolean,`0@)">
            <summary>
            筛选解析数据。实例化的TRequest会一直保存，直至解析成功，或手动清除。
            <para>当不满足解析条件时，请返回<see cref="F:RRQMSocket.FilterResult.Cache"/>，此时会保存<see cref="P:RRQMCore.ByteManager.ByteBlock.CanReadLen"/>的数据</para>
            <para>当数据部分异常时，请移动<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>到指定位置，然后返回<see cref="F:RRQMSocket.FilterResult.GoOn"/></para>
            <para>当完全满足解析条件时，请返回<see cref="F:RRQMSocket.FilterResult.Success"/>最后将<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>移至指定位置。</para>
            </summary>
            <param name="byteBlock">字节块</param>
            <param name="length">剩余有效数据长度，计算实质为:ByteBlock.Len和ByteBlock.Pos的差值。</param>
            <param name="beCached">是否为上次遗留对象，当该参数为True时，request也将是上次实例化的对象。</param>
            <param name="request">对象。</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.CustomFixedHeaderDataHandlingAdapter`1.GetInstance">
            <summary>
            获取泛型实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.CustomUnfixedHeaderDataHandlingAdapter`1">
            <summary>
            用户自定义固定包头解析器，使用该适配器时，接收方收到的数据中，<see cref="T:RRQMCore.ByteManager.ByteBlock"/>将为null，同时<see cref="T:RRQMSocket.IRequestInfo"/>将实现为TUnfixedHeaderRequestInfo。
            </summary>
        </member>
        <member name="M:RRQMSocket.CustomUnfixedHeaderDataHandlingAdapter`1.Filter(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Boolean,`0@)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
            <param name="length"></param>
            <param name="beCached"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.CustomUnfixedHeaderDataHandlingAdapter`1.GetInstance">
            <summary>
            获取泛型实例。
            </summary>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.DataAdapterTester">
            <summary>
            数据处理适配器测试
            </summary>
        </member>
        <member name="M:RRQMSocket.DataAdapterTester.CreateTester(RRQMSocket.DataHandlingAdapter,System.Int32,System.Action{RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo})">
            <summary>
            获取测试器
            </summary>
            <param name="adapter">待测试适配器</param>
            <param name="receivedCallBack">收到数据回调</param>
            <param name="bufferLength">缓存数据长度</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.DataAdapterTester.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:RRQMSocket.DataAdapterTester.Run(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            模拟测试运行发送
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="testCount">测试次数</param>
            <param name="expectedCount">期待测试次数</param>
            <param name="timeout">超时</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.DataAdapterTester.Run(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            模拟发送
            </summary>
            <param name="buffer"></param>
            <param name="testCount">测试次数</param>
            <param name="expectedCount">期待测试次数</param>
            <param name="timeout">超时</param>
        </member>
        <member name="T:RRQMSocket.UdpDataAdapterTester">
            <summary>
            Udp数据处理适配器测试
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpDataAdapterTester.CreateTester(RRQMSocket.UdpDataHandlingAdapter,System.Int32,System.Action{RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo})">
            <summary>
            获取测试器
            </summary>
            <param name="adapter">待测试适配器</param>
            <param name="multiThread">并发多线程数量</param>
            <param name="receivedCallBack">收到数据回调</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.UdpDataAdapterTester.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpDataAdapterTester.Run(System.Byte[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            模拟测试运行发送
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="testCount">测试次数</param>
            <param name="expectedCount">期待测试次数</param>
            <param name="timeout">超时</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.UdpDataAdapterTester.Run(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            模拟发送
            </summary>
            <param name="buffer"></param>
            <param name="testCount">测试次数</param>
            <param name="expectedCount">期待测试次数</param>
            <param name="timeout">超时</param>
        </member>
        <member name="T:RRQMSocket.DataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="P:RRQMSocket.DataHandlingAdapter.CanSplicingSend">
            <summary>
            拼接发送
            </summary>
        </member>
        <member name="P:RRQMSocket.DataHandlingAdapter.MaxPackageSize">
            <summary>
            获取或设置适配器能接收的最大数据包长度。默认1024*1024 Byte。
            </summary>
        </member>
        <member name="P:RRQMSocket.DataHandlingAdapter.Client">
            <summary>
            适配器拥有者。
            </summary>
        </member>
        <member name="P:RRQMSocket.DataHandlingAdapter.ReceivedCallBack">
            <summary>
            当接收数据处理完成后，回调该函数执行接收
            </summary>
        </member>
        <member name="P:RRQMSocket.DataHandlingAdapter.SendCallBack">
            <summary>
            当接收数据处理完成后，回调该函数执行发送
            </summary>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.ReceivedInput(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            收到数据的切入点，该方法由框架自动调用。
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.SendInput(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            发送数据的切入点，该方法由框架自动调用。
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.SendInput(System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            发送数据的切入点，该方法由框架自动调用。
            </summary>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.GoReceived(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理已经经过预先处理后的数据
            </summary>
            <param name="byteBlock">以二进制形式传递</param>
            <param name="requestInfo">以解析实例传递</param>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.GoSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            发送已经经过预先处理后的数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync">是否使用IOCP发送</param>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.OnError(System.String,System.Boolean,System.Boolean)">
            <summary>
            在解析时发生错误。
            </summary>
            <param name="error">错误异常</param>
            <param name="reset">是否调用<see cref="M:RRQMSocket.DataHandlingAdapter.Reset"/></param>
            <param name="log">是否记录日志</param>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.PreviewReceived(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            当接收到数据后预先处理数据,然后调用<see cref="M:RRQMSocket.DataHandlingAdapter.GoReceived(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)"/>处理数据
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.PreviewSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            当发送数据前预先处理数据
            </summary>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="isAsync">是否使用IOCP发送</param>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.PreviewSend(System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            组合发送预处理数据，
            当属性SplicingSend实现为True时，系统才会调用该方法。
            </summary>
            <param name="transferBytes">代发送数据组合</param>
            <param name="isAsync">是否使用IOCP发送</param>
        </member>
        <member name="M:RRQMSocket.DataHandlingAdapter.Reset">
            <summary>
            重置解析器到初始状态，一般在<see cref="M:RRQMSocket.DataHandlingAdapter.OnError(System.String,System.Boolean,System.Boolean)"/>被触发时，由返回值指示是否调用。
            </summary>
        </member>
        <member name="T:RRQMSocket.FixedHeaderPackageAdapter">
            <summary>
            固定包头数据包处理适配器，支持Byte、UShort、Int三种类型作为包头。使用<see cref="P:RRQMCore.RRQMBitConverter.DefaultEndianType"/>大小端设置。
            </summary>
        </member>
        <member name="M:RRQMSocket.FixedHeaderPackageAdapter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.FixedHeaderPackageAdapter.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.FixedHeaderPackageAdapter.FixedHeaderType">
            <summary>
            设置包头类型，默认为int
            </summary>
        </member>
        <member name="P:RRQMSocket.FixedHeaderPackageAdapter.MinPackageSize">
            <summary>
            获取或设置包数据的最小值（默认为0）
            </summary>
        </member>
        <member name="M:RRQMSocket.FixedHeaderPackageAdapter.PreviewReceived(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            当接收到数据时处理数据
            </summary>
            <param name="byteBlock">数据流</param>
        </member>
        <member name="M:RRQMSocket.FixedHeaderPackageAdapter.PreviewSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            当发送数据前处理数据
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.FixedHeaderPackageAdapter.PreviewSend(System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.FixedHeaderPackageAdapter.Reset">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.FixedHeaderPackageAdapter.SeamPackage(System.Byte[],System.Int32)">
            <summary>
            缝合包
            </summary>
            <param name="buffer"></param>
            <param name="r"></param>
        </member>
        <member name="M:RRQMSocket.FixedHeaderPackageAdapter.SplitPackage(System.Byte[],System.Int32,System.Int32)">
            <summary>
            分解包
            </summary>
            <param name="dataBuffer"></param>
            <param name="index"></param>
            <param name="r"></param>
        </member>
        <member name="T:RRQMSocket.FixedSizePackageAdapter">
            <summary>
            固定长度数据包处理适配器。
            </summary>
        </member>
        <member name="F:RRQMSocket.FixedSizePackageAdapter.surPlusLength">
            <summary>
            包剩余长度
            </summary>
        </member>
        <member name="F:RRQMSocket.FixedSizePackageAdapter.tempByteBlock">
            <summary>
            临时包
            </summary>
        </member>
        <member name="M:RRQMSocket.FixedSizePackageAdapter.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="fixedSize">数据包的长度</param>
        </member>
        <member name="P:RRQMSocket.FixedSizePackageAdapter.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.FixedSizePackageAdapter.FixedSize">
            <summary>
            获取已设置的数据包的长度
            </summary>
        </member>
        <member name="M:RRQMSocket.FixedSizePackageAdapter.PreviewReceived(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            预处理
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.FixedSizePackageAdapter.PreviewSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            预处理
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.FixedSizePackageAdapter.PreviewSend(System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.FixedSizePackageAdapter.Reset">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:RRQMSocket.NormalDataHandlingAdapter">
            <summary>
            普通TCP数据处理器，该适配器不对数据做任何处理。
            </summary>
        </member>
        <member name="P:RRQMSocket.NormalDataHandlingAdapter.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.NormalDataHandlingAdapter.PreviewReceived(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            当接收到数据时处理数据
            </summary>
            <param name="byteBlock">数据流</param>
        </member>
        <member name="M:RRQMSocket.NormalDataHandlingAdapter.PreviewSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.NormalDataHandlingAdapter.PreviewSend(System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.NormalDataHandlingAdapter.Reset">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:RRQMSocket.NormalUdpDataHandlingAdapter">
            <summary>
            常规UDP数据处理适配器
            </summary>
        </member>
        <member name="P:RRQMSocket.NormalUdpDataHandlingAdapter.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.NormalUdpDataHandlingAdapter.PreviewReceived(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.NormalUdpDataHandlingAdapter.PreviewSend(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.NormalUdpDataHandlingAdapter.PreviewSend(System.Net.EndPoint,System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.NormalUdpDataHandlingAdapter.Reset">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:RRQMSocket.TerminatorPackageAdapter">
            <summary>
            终止字符数据包处理适配器，支持以任意字符、字节数组结尾的数据包。
            </summary>
        </member>
        <member name="M:RRQMSocket.TerminatorPackageAdapter.#ctor(System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="maxSize"></param>
            <param name="terminator"></param>
        </member>
        <member name="M:RRQMSocket.TerminatorPackageAdapter.#ctor(System.Int32,System.String,System.Text.Encoding)">
            <summary>
            构造函数
            </summary>
            <param name="maxSize"></param>
            <param name="terminator"></param>
            <param name="encoding"></param>
        </member>
        <member name="M:RRQMSocket.TerminatorPackageAdapter.#ctor(System.Int32,System.Int32,System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="maxSize"></param>
            <param name="minSize"></param>
            <param name="terminatorCode"></param>
        </member>
        <member name="P:RRQMSocket.TerminatorPackageAdapter.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.TerminatorPackageAdapter.MinSize">
            <summary>
            即使找到了终止因子，也不会结束，默认0
            </summary>
        </member>
        <member name="P:RRQMSocket.TerminatorPackageAdapter.ReserveTerminatorCode">
            <summary>
            保留终止因子
            </summary>
        </member>
        <member name="M:RRQMSocket.TerminatorPackageAdapter.PreviewReceived(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            预处理
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.TerminatorPackageAdapter.PreviewSend(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            预处理
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.TerminatorPackageAdapter.PreviewSend(System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.TerminatorPackageAdapter.Reset">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:RRQMSocket.UdpDataHandlingAdapter">
            <summary>
            Udp数据处理适配器
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpDataHandlingAdapter.CanSplicingSend">
            <summary>
            拼接发送
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpDataHandlingAdapter.MaxPackageSize">
            <summary>
            获取或设置适配器能接收的最大数据包长度。默认1024*1024 Byte。
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpDataHandlingAdapter.Owner">
            <summary>
            适配器拥有者。
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpDataHandlingAdapter.ReceivedCallBack">
            <summary>
            当接收数据处理完成后，回调该函数执行接收
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpDataHandlingAdapter.SendCallBack">
            <summary>
            当接收数据处理完成后，回调该函数执行发送
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.ReceivedInput(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            收到数据的切入点，该方法由框架自动调用。
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.SendInput(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            发送数据的切入点，该方法由框架自动调用。
            </summary>
            <param name="endPoint"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.SendInput(System.Net.EndPoint,System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            发送数据的切入点，该方法由框架自动调用。
            </summary>
            <param name="endPoint"></param>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.GoReceived(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            处理已经经过预先处理后的数据
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock">以二进制形式传递</param>
            <param name="requestInfo">以解析实例传递</param>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.GoSend(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            发送已经经过预先处理后的数据
            </summary>
            <param name="endPoint"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync">是否使用IOCP发送</param>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.OnError(System.String,System.Boolean,System.Boolean)">
            <summary>
            在解析时发生错误。
            </summary>
            <param name="error">错误异常</param>
            <param name="reset">是否调用<see cref="M:RRQMSocket.UdpDataHandlingAdapter.Reset"/></param>
            <param name="log">是否记录日志</param>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.PreviewReceived(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            当接收到数据后预先处理数据,然后调用<see cref="M:RRQMSocket.UdpDataHandlingAdapter.GoReceived(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)"/>处理数据
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.PreviewSend(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            当发送数据前预先处理数据
            </summary>
            <param name="endPoint"></param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="isAsync">是否使用IOCP发送</param>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.PreviewSend(System.Net.EndPoint,System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            组合发送预处理数据，
            当属性SplicingSend实现为True时，系统才会调用该方法。
            </summary>
            <param name="endPoint"></param>
            <param name="transferBytes">代发送数据组合</param>
            <param name="isAsync">是否使用IOCP发送</param>
        </member>
        <member name="M:RRQMSocket.UdpDataHandlingAdapter.Reset">
            <summary>
            重置解析器到初始状态，一般在<see cref="M:RRQMSocket.UdpDataHandlingAdapter.OnError(System.String,System.Boolean,System.Boolean)"/>被触发时，由返回值指示是否调用。
            </summary>
        </member>
        <member name="T:RRQMSocket.UdpFrame">
            <summary>
            UDP数据帧
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpFrame.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpFrame.Crc">
            <summary>
            Crc校验
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpFrame.FIN">
            <summary>
            是否为终结帧
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpFrame.ID">
            <summary>
            数据ID
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpFrame.SN">
            <summary>
            帧序号
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpFrame.Parse(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解析
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.UdpPackage">
            <summary>
            UDP数据包
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpPackage.#ctor(System.Int64,System.Int32,System.Collections.Concurrent.ConcurrentDictionary{System.Int64,RRQMSocket.UdpPackage})">
            <summary>
            构造函数
            </summary>
            <param name="id"></param>
            <param name="timeout"></param>
            <param name="revStore"></param>
        </member>
        <member name="P:RRQMSocket.UdpPackage.Count">
            <summary>
            当前长度
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpPackage.ID">
            <summary>
            包唯一标识
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpPackage.IsComplated">
            <summary>
            是否已完成
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpPackage.TotalCount">
            <summary>
            总长度，在收到最后一帧之前，为-1。
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpPackage.Crc">
            <summary>
            Crc
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpPackage.MTU">
            <summary>
            MTU
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpPackage.Length">
            <summary>
            当前数据长度
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpPackage.Add(RRQMSocket.UdpFrame)">
            <summary>
            添加帧
            </summary>
            <param name="frame"></param>
        </member>
        <member name="M:RRQMSocket.UdpPackage.TryGetData(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            获得数据
            </summary>
            <param name="byteBlock"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.UdpPackageAdapter">
            <summary>
            UDP数据包的适配器
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpPackageAdapter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpPackageAdapter.Timeout">
            <summary>
            接收超时时间，默认5000ms
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpPackageAdapter.CanSplicingSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.UdpPackageAdapter.MTU">
            <summary>
            最大传输单元
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpPackageAdapter.PreviewReceived(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="remoteEndPoint"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.UdpPackageAdapter.PreviewSend(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.UdpPackageAdapter.PreviewSend(System.Net.EndPoint,System.Collections.Generic.IList{RRQMSocket.TransferByte},System.Boolean)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="endPoint"></param>
            <param name="transferBytes"></param>
            <param name="isAsync"></param>
        </member>
        <member name="M:RRQMSocket.UdpPackageAdapter.Reset">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="T:RRQMSocket.AccessType">
            <summary>
            操作权限
            </summary>
        </member>
        <member name="F:RRQMSocket.AccessType.Owner">
            <summary>
            所有者可操作
            </summary>
        </member>
        <member name="F:RRQMSocket.AccessType.Service">
            <summary>
            服务器可操作
            </summary>
        </member>
        <member name="F:RRQMSocket.AccessType.Everyone">
            <summary>
            任何人可操作
            </summary>
        </member>
        <member name="T:RRQMSocket.RaiseSourceType">
            <summary>
            触发事件源类型
            </summary>
        </member>
        <member name="F:RRQMSocket.RaiseSourceType.Service">
            <summary>
            由服务器触发
            </summary>
        </member>
        <member name="F:RRQMSocket.RaiseSourceType.SocketClient">
            <summary>
            由服务器辅助类触发
            </summary>
        </member>
        <member name="F:RRQMSocket.RaiseSourceType.Client">
            <summary>
            由客户端触发
            </summary>
        </member>
        <member name="T:RRQMSocket.ChannelStatus">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:RRQMSocket.ChannelStatus.Default">
            <summary>
            默认
            </summary>
        </member>
        <member name="F:RRQMSocket.ChannelStatus.Moving">
            <summary>
            继续下移
            </summary>
        </member>
        <member name="F:RRQMSocket.ChannelStatus.Overtime">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:RRQMSocket.ChannelStatus.HoldOn">
            <summary>
            继续
            </summary>
        </member>
        <member name="F:RRQMSocket.ChannelStatus.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="F:RRQMSocket.ChannelStatus.Completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:RRQMSocket.ChannelStatus.Disposed">
            <summary>
            已释放
            </summary>
        </member>
        <member name="T:RRQMSocket.ClearType">
            <summary>
            清理统计类型
            </summary>
        </member>
        <member name="F:RRQMSocket.ClearType.Send">
            <summary>
            从发送统计
            </summary>
        </member>
        <member name="F:RRQMSocket.ClearType.Receive">
            <summary>
            从接收统计
            </summary>
        </member>
        <member name="T:RRQMSocket.FilterResult">
            <summary>
            过滤结果
            </summary>
        </member>
        <member name="F:RRQMSocket.FilterResult.Cache">
            <summary>
            缓存后续所有<see cref="P:RRQMCore.ByteManager.ByteBlock.CanReadLen"/>数据。
            </summary>
        </member>
        <member name="F:RRQMSocket.FilterResult.Success">
            <summary>
            操作成功
            </summary>
        </member>
        <member name="F:RRQMSocket.FilterResult.GoOn">
            <summary>
            继续操作，一般原因是本次数据有部分无效，但已经调整了<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>属性，所以继续后续解析。
            <para>或者想放弃当前数据的操作，直接设置<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>与<see cref="P:RRQMCore.ByteManager.ByteBlock.Len"/>相等即可。</para>
            </summary>
        </member>
        <member name="T:RRQMSocket.FixedHeaderType">
            <summary>
            固定包头类型
            </summary>
        </member>
        <member name="F:RRQMSocket.FixedHeaderType.Byte">
            <summary>
            以1Byte标识长度，最长接收255
            </summary>
        </member>
        <member name="F:RRQMSocket.FixedHeaderType.Ushort">
            <summary>
            以2Byte标识长度，最长接收65535
            </summary>
        </member>
        <member name="F:RRQMSocket.FixedHeaderType.Int">
            <summary>
            以4Byte标识长度，最长接收2147483647
            </summary>
        </member>
        <member name="T:RRQMSocket.ReceiveType">
            <summary>
            接收类型
            </summary>
        </member>
        <member name="F:RRQMSocket.ReceiveType.Auto">
            <summary>
            该模式下会自动接收数据，然后主动触发。
            </summary>
        </member>
        <member name="F:RRQMSocket.ReceiveType.None">
            <summary>
            在该模式下，不会投递接收申请，用户可通过<see cref="M:RRQMSocket.ITcpClientBase.GetStream"/>，获取到流以后，自己处理接收。
            <para>注意：连接端不会感知主动断开</para>
            </summary>
        </member>
        <member name="T:RRQMSocket.ServerState">
            <summary>
            服务器状态
            </summary>
        </member>
        <member name="F:RRQMSocket.ServerState.None">
            <summary>
            无状态，指示为初建
            </summary>
        </member>
        <member name="F:RRQMSocket.ServerState.Running">
            <summary>
            正在运行
            </summary>
        </member>
        <member name="F:RRQMSocket.ServerState.Stopped">
            <summary>
            已停止
            </summary>
        </member>
        <member name="F:RRQMSocket.ServerState.Disposed">
            <summary>
            已释放
            </summary>
        </member>
        <member name="T:RRQMSocket.NATMode">
            <summary>
            转发工作模式
            </summary>
        </member>
        <member name="F:RRQMSocket.NATMode.TwoWay">
            <summary>
            双向转发
            </summary>
        </member>
        <member name="F:RRQMSocket.NATMode.OneWay">
            <summary>
            仅由监听地址向目标地址单向转发
            </summary>
        </member>
        <member name="F:RRQMSocket.NATMode.OneWayToListen">
            <summary>
            仅由目标地址向监听地址单向转发
            </summary>
        </member>
        <member name="T:RRQMSocket.ByteBlockEventArgs">
            <summary>
            字节事件
            </summary>
        </member>
        <member name="M:RRQMSocket.ByteBlockEventArgs.#ctor(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.ByteBlockEventArgs.ByteBlock">
            <summary>
            数据块
            </summary>
        </member>
        <member name="T:RRQMSocket.BytesEventArgs">
            <summary>
            字节事件
            </summary>
        </member>
        <member name="M:RRQMSocket.BytesEventArgs.#ctor(System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="data"></param>
        </member>
        <member name="P:RRQMSocket.BytesEventArgs.ReceivedDataBytes">
            <summary>
            字节数组
            </summary>
        </member>
        <member name="T:RRQMSocket.ClientConnectingEventArgs">
            <summary>
            客户端连接事件。
            </summary>
        </member>
        <member name="M:RRQMSocket.ClientConnectingEventArgs.#ctor(System.Net.Sockets.Socket)">
            <summary>
            构造函数
            </summary>
            <param name="socket"></param>
        </member>
        <member name="P:RRQMSocket.ClientConnectingEventArgs.Socket">
            <summary>
            新初始化的通信器
            </summary>
        </member>
        <member name="T:RRQMSocket.ClientDisconnectedEventArgs">
            <summary>
            断开连接事件参数
            </summary>
        </member>
        <member name="M:RRQMSocket.ClientDisconnectedEventArgs.#ctor(System.Boolean,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="manual"></param>
            <param name="mes"></param>
        </member>
        <member name="P:RRQMSocket.ClientDisconnectedEventArgs.Manual">
            <summary>
            是否为主动行为。
            </summary>
        </member>
        <member name="T:RRQMSocket.ClientOperationEventArgs">
            <summary>
            Client消息操作事件
            </summary>
        </member>
        <member name="M:RRQMSocket.ClientOperationEventArgs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.ClientOperationEventArgs.DataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="P:RRQMSocket.ClientOperationEventArgs.ID">
            <summary>
            客户端ID
            </summary>
        </member>
        <member name="T:RRQMSocket.MesEventArgs">
            <summary>
            消息事件
            </summary>
        </member>
        <member name="M:RRQMSocket.MesEventArgs.#ctor(System.String)">
            <summary>
             构造函数
            </summary>
            <param name="mes"></param>
        </member>
        <member name="M:RRQMSocket.MesEventArgs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RRQMSocket.MesEventArgs.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="T:RRQMSocket.ProtocolDataEventArgs">
            <summary>
            协议数据事件
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolDataEventArgs.#ctor(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构造函数
            </summary>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="P:RRQMSocket.ProtocolDataEventArgs.Protocol">
            <summary>
            协议
            </summary>
        </member>
        <member name="P:RRQMSocket.ProtocolDataEventArgs.ByteBlock">
            <summary>
            数据流，实际解析时应当偏移两个字节
            </summary>
        </member>
        <member name="T:RRQMSocket.ProtocolSubscriberEventArgs">
            <summary>
            协议订阅事件
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolSubscriberEventArgs.#ctor(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            构造函数
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMSocket.ReceivedDataEventArgs">
            <summary>
            插件处理事件
            </summary>
        </member>
        <member name="M:RRQMSocket.ReceivedDataEventArgs.#ctor(RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            构造函数
            </summary>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="P:RRQMSocket.ReceivedDataEventArgs.ByteBlock">
            <summary>
            数据载体
            </summary>
        </member>
        <member name="P:RRQMSocket.ReceivedDataEventArgs.RequestInfo">
            <summary>
            对象载体
            </summary>
        </member>
        <member name="T:RRQMSocket.SendingEventArgs">
            <summary>
            发送事件
            </summary>
        </member>
        <member name="M:RRQMSocket.SendingEventArgs.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="P:RRQMSocket.SendingEventArgs.Buffer">
            <summary>
            数据缓存区，该属性获取来自于内存池，所以最好不要引用该对象，可以同步使用该对象
            </summary>
        </member>
        <member name="P:RRQMSocket.SendingEventArgs.Offset">
            <summary>
            缓存偏移
            </summary>
        </member>
        <member name="P:RRQMSocket.SendingEventArgs.Length">
            <summary>
            数据长度
            </summary>
        </member>
        <member name="T:RRQMSocket.StreamEventArgs">
            <summary>
            流事件参数
            </summary>
        </member>
        <member name="M:RRQMSocket.StreamEventArgs.#ctor(RRQMCore.Metadata,RRQMSocket.StreamInfo)">
            <summary>
            构造函数
            </summary>
            <param name="metadata"></param>
            <param name="streamInfo"></param>
        </member>
        <member name="P:RRQMSocket.StreamEventArgs.Bucket">
            <summary>
            用于接收流的容器
            </summary>
        </member>
        <member name="P:RRQMSocket.StreamEventArgs.Metadata">
            <summary>
            用于可传输的元数据
            </summary>
        </member>
        <member name="P:RRQMSocket.StreamEventArgs.StreamInfo">
            <summary>
            流信息
            </summary>
        </member>
        <member name="T:RRQMSocket.StreamOperationEventArgs">
            <summary>
            接收流数据
            </summary>
        </member>
        <member name="M:RRQMSocket.StreamOperationEventArgs.#ctor(RRQMSocket.StreamOperator,RRQMCore.Metadata,RRQMSocket.StreamInfo)">
            <summary>
            构造函数
            </summary>
            <param name="streamOperator"></param>
            <param name="metadata"></param>
            <param name="streamInfo"></param>
        </member>
        <member name="P:RRQMSocket.StreamOperationEventArgs.StreamOperator">
            <summary>
            流操作
            </summary>
        </member>
        <member name="T:RRQMSocket.StreamStatusEventArgs">
            <summary>
            具有返回状态的流
            </summary>
        </member>
        <member name="P:RRQMSocket.StreamStatusEventArgs.Result">
            <summary>
            结果
            </summary>
        </member>
        <member name="M:RRQMSocket.StreamStatusEventArgs.#ctor(RRQMCore.Result,RRQMCore.Metadata,RRQMSocket.StreamInfo)">
            <summary>
            构造函数
            </summary>
            <param name="result"></param>
            <param name="metadata"></param>
            <param name="streamInfo"></param>
        </member>
        <member name="T:RRQMSocket.UdpReceivedDataEventArgs">
            <summary>
            Udp接收消息
            </summary>
        </member>
        <member name="M:RRQMSocket.UdpReceivedDataEventArgs.#ctor(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock,RRQMSocket.IRequestInfo)">
            <summary>
            构造函数
            </summary>
            <param name="endPoint"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="P:RRQMSocket.UdpReceivedDataEventArgs.EndPoint">
            <summary>
            接收终结点
            </summary>
        </member>
        <member name="T:RRQMSocket.VerifyOptionEventArgs">
            <summary>
            Token连接验证
            </summary>
        </member>
        <member name="P:RRQMSocket.VerifyOptionEventArgs.Token">
            <summary>
            令箭
            </summary>
        </member>
        <member name="M:RRQMSocket.VerifyOptionEventArgs.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="token"></param>
        </member>
        <member name="T:RRQMSocket.EventNameException">
            <summary>
            事件名称异常
            </summary>
        </member>
        <member name="M:RRQMSocket.EventNameException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.EventNameException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.EventNameException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.EventNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.EventAccessException">
            <summary>
            事件访问异常
            </summary>
        </member>
        <member name="M:RRQMSocket.EventAccessException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.EventAccessException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.EventAccessException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.EventAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RRQMNotConnectedException">
            <summary>
            未连接异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMNotConnectedException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMNotConnectedException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RRQMNotConnectedException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RRQMNotConnectedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RRQMOverlengthException">
            <summary>
            超长异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMOverlengthException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMOverlengthException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RRQMOverlengthException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RRQMOverlengthException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.RRQMTokenVerifyException">
            <summary>
            Token验证异常
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMTokenVerifyException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMTokenVerifyException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.RRQMTokenVerifyException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.RRQMTokenVerifyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.ClientNotFindException">
            <summary>
            没有找到ID对应的客户端
            </summary>
        </member>
        <member name="M:RRQMSocket.ClientNotFindException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.ClientNotFindException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.ClientNotFindException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.ClientNotFindException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.ProtocolException">
            <summary>
            协议异常
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolException.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolException.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="message"></param>
            <param name="inner"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:RRQMSocket.Extensions.OtherExtensions">
            <summary>
            其他扩展
            </summary>
        </member>
        <member name="M:RRQMSocket.Extensions.OtherExtensions.ToResultCode(RRQMSocket.ChannelStatus)">
            <summary>
            转为ResultCode
            </summary>
            <param name="channelStatus"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Extensions.OtherExtensions.GetIP(System.Net.EndPoint)">
            <summary>
            从<see cref="T:System.Net.EndPoint"/>中获得IP地址。
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Extensions.OtherExtensions.GetPort(System.Net.EndPoint)">
            <summary>
            从<see cref="T:System.Net.EndPoint"/>中获得Port。
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.RRQMClientExtensions">
            <summary>
            客户端扩展类
            </summary>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.UseReconnection``1(``0,System.Int32,System.Boolean,System.Int32,System.Action{``0})">
            <summary>
            使用断线重连。
            </summary>
            <param name="client">客户端</param>
            <param name="successCallback">成功回调函数</param>
            <param name="tryCount">尝试重连次数，设为-1时则永远尝试连接</param>
            <param name="printLog">是否输出日志。</param>
            <param name="sleepTime">失败时，停留时间</param>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.Send``1(``0,System.String)">
            <summary>
            发送字符串
            </summary>
            <param name="client"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.SendAsync``1(``0,System.String)">
            <summary>
            发送字符串
            </summary>
            <param name="client"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.Send``1(``0,System.String,System.String)">
            <summary>
            发送字符串
            </summary>
            <param name="client"></param>
            <param name="id"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.SendAsync``1(``0,System.String,System.String)">
            <summary>
            发送字符串
            </summary>
            <param name="client"></param>
            <param name="id"></param>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.TrySendAsync``1(``0,System.Byte[],System.Int32,System.Int32)">
            <summary>
            尝试异步发送数据。
            <para>当客户端使用独立线程发送时，会永远返回True</para>
            </summary>
            <typeparam name="T">客户端类型</typeparam>
            <param name="client">客户端</param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <returns>是否完成发送</returns>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.TrySendAsync``1(``0,System.Byte[])">
            <summary>
            尝试发送数据
            </summary>
            <typeparam name="T">客户端类型</typeparam>
            <param name="client">客户端</param>
            <param name="buffer">数据</param>
            <returns>是否完成发送</returns>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.TrySendAsync``1(``0,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            尝试发送数据
            </summary>
            <typeparam name="T">客户端类型</typeparam>
            <param name="client">客户端</param>
            <param name="byteBlock">数据</param>
            <returns>是否完成发送</returns>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.TrySend``1(``0,System.Byte[],System.Int32,System.Int32)">
            <summary>
            尝试发送数据
            </summary>
            <typeparam name="T">客户端类型</typeparam>
            <param name="client">客户端</param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <returns>是否完成发送</returns>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.TrySend``1(``0,System.Byte[])">
            <summary>
            尝试发送数据
            </summary>
            <typeparam name="T">客户端类型</typeparam>
            <param name="client">客户端</param>
            <param name="buffer">数据</param>
            <returns>是否完成发送</returns>
        </member>
        <member name="M:RRQMSocket.RRQMClientExtensions.TrySend``1(``0,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            尝试发送数据
            </summary>
            <typeparam name="T">客户端类型</typeparam>
            <param name="client">客户端</param>
            <param name="byteBlock">数据</param>
            <returns>是否完成发送</returns>
        </member>
        <member name="M:RRQMSocket.IEventRaise.RaiseEvent(System.String,System.String,System.Byte[],RRQMSocket.EventSender)">
            <summary>
            触发事件
            </summary>
            <param name="publisherID"></param>
            <param name="eventName"></param>
            <param name="data"></param>
            <param name="eventSender"></param>
        </member>
        <member name="T:RRQMSocket.IEventObject">
            <summary>
            事件对象
            </summary>
        </member>
        <member name="M:RRQMSocket.IEventObject.RaiseEvent``1(System.String,``0)">
            <summary>
            触发事件
            </summary>
            <typeparam name="T"></typeparam>
            <param name="eventName"></param>
            <param name="arg"></param>
        </member>
        <member name="M:RRQMSocket.IEventObject.SubscribeEvent``1(System.String,System.Action{RRQMSocket.EventSender,``0})">
            <summary>
            订阅事件
            </summary>
            <param name="eventName"></param>
            <param name="action"></param>
        </member>
        <member name="M:RRQMSocket.IEventObject.UnsubscribeEvent(System.String)">
            <summary>
            取消订阅事件
            </summary>
            <param name="eventName"></param>
        </member>
        <member name="M:RRQMSocket.IEventObject.PublishEvent(System.String,RRQMSocket.AccessType)">
            <summary>
            发布事件
            </summary>
            <param name="eventName">事件名称</param>
            <param name="accessType">访问权限</param>
            <exception cref="T:System.ArgumentNullException">参数为空</exception>
            <exception cref="T:RRQMSocket.EventNameException">事件已存在</exception>
        </member>
        <member name="M:RRQMSocket.IEventObject.UnpublishEvent(System.String)">
            <summary>
            取消发布事件
            </summary>
            <param name="eventName"></param>
            <exception cref="T:System.ArgumentNullException">参数为空</exception>
        </member>
        <member name="M:RRQMSocket.IEventObject.GetAllEvents">
            <summary>
            获取所有事件名称
            </summary>
            <returns></returns>
        </member>
        <member name="P:RRQMSocket.IEventObject.PublisherID">
            <summary>
            发布者ID，用于验证事件的绝对操作权限
            </summary>
        </member>
        <member name="T:RRQMSocket.IEventBusClientBase">
            <summary>
            事件客户端接口基类
            </summary>
        </member>
        <member name="T:RRQMSocket.IEventBusClient">
            <summary>
            事件客户端接口
            </summary>
        </member>
        <member name="T:RRQMSocket.IClient">
            <summary>
            终端接口
            </summary>
        </member>
        <member name="P:RRQMSocket.IClient.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="P:RRQMSocket.IClient.Protocol">
            <summary>
            终端协议
            </summary>
        </member>
        <member name="P:RRQMSocket.IClient.Container">
            <summary>
            简单IOC容器
            </summary>
        </member>
        <member name="T:RRQMSocket.IProtocolClient">
            <summary>
            自定义协议的客户端终端接口
            </summary>
        </member>
        <member name="M:RRQMSocket.IProtocolClient.CreateChannel(System.String)">
            <summary>
            创建一个和其他客户端的通道
            </summary>
            <param name="clientID"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.IProtocolClient.CreateChannel(System.String,System.Int32)">
            <summary>
            创建一个和其他客户端的通道
            </summary>
            <param name="clientID"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.IProtocolClientBase">
            <summary>
            自定义协议的终端基础接口
            </summary>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.AddProtocolSubscriber(RRQMSocket.SubscriberBase)">
            <summary>
            添加协议订阅
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.ChannelExisted(System.Int32)">
            <summary>
            判断使用该ID的Channel是否存在。
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.CreateChannel">
            <summary>
            创建通道
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.CreateChannel(System.Int32)">
            <summary>
            创建通道
            </summary>
            <param name="id">指定ID</param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.RemoveProtocolSubscriber(RRQMSocket.SubscriberBase)">
            <summary>
            移除协议订阅
            </summary>
            <param name="subscriber"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.Send(System.Int16,System.Byte[])">
            <summary>
            发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.Send(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.Send(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            发送协议流
            </summary>
            <param name="protocol"></param>
            <param name="dataByteBlock"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.Send(System.Int16)">
            <summary>
            发送协议状态
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.SendAsync(System.Int16,System.Byte[])">
            <summary>
            发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.SendAsync(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            发送字节
            </summary>
            <param name="protocol"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.SendAsync(System.Int16,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            发送协议流
            </summary>
            <param name="protocol"></param>
            <param name="dataByteBlock"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.SendAsync(System.Int16)">
            <summary>
            发送协议状态
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.SendStream(System.IO.Stream,RRQMSocket.StreamOperator,RRQMCore.Metadata)">
            <summary>
            发送流数据
            </summary>
            <param name="stream"></param>
            <param name="streamOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.SendStreamAsync(System.IO.Stream,RRQMSocket.StreamOperator,RRQMCore.Metadata)">
            <summary>
            异步发送流数据
            </summary>
            <param name="stream"></param>
            <param name="streamOperator"></param>
            <param name="metadata"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.IProtocolClientBase.TrySubscribeChannel(System.Int32,RRQMSocket.Channel@)">
            <summary>
            订阅通道
            </summary>
            <param name="id"></param>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.ISocketClient">
            <summary>
            服务器辅助类接口
            </summary>
        </member>
        <member name="P:RRQMSocket.ISocketClient.ID">
            <summary>
            用于索引的ID
            </summary>
        </member>
        <member name="P:RRQMSocket.ISocketClient.Service">
            <summary>
            包含此辅助类的主服务器类
            </summary>
        </member>
        <member name="T:RRQMSocket.ITcpClient">
            <summary>
            TCP客户端终端接口
            </summary>
        </member>
        <member name="E:RRQMSocket.ITcpClient.Connected">
            <summary>
            成功连接到服务器
            </summary>
        </member>
        <member name="E:RRQMSocket.ITcpClient.Connecting">
            <summary>
            准备连接的时候
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClient.RemoteIPHost">
            <summary>
            远程IPHost。
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClient.Config">
            <summary>
            客户端配置
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClient.SeparateThreadSend">
            <summary>
            独立线程发送
            </summary>
        </member>
        <member name="M:RRQMSocket.ITcpClient.Connect(System.Int32)">
            <summary>
            连接服务器
            </summary>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.ITcpClient.ConnectAsync(System.Int32)">
            <summary>
            异步连接服务器
            </summary>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.ITcpClient.Setup(RRQMSocket.RRQMConfig)">
            <summary>
            配置服务器
            </summary>
            <param name="clientConfig"></param>
            <exception cref="T:RRQMCore.RRQMException"></exception>
        </member>
        <member name="M:RRQMSocket.ITcpClient.Setup(System.String)">
            <summary>
            配置服务器
            </summary>
            <param name="ipHost"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.ITcpClientBase">
            <summary>
            TCP终端基础接口
            </summary>
        </member>
        <member name="E:RRQMSocket.ITcpClientBase.Disconnected">
            <summary>
            断开连接
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.BufferLength">
            <summary>
            缓存池大小
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.MaxPackageSize">
            <summary>
            适配器能接收的最大数据包长度。
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.CanSetDataHandlingAdapter">
            <summary>
            是否允许自由调用<see cref="M:RRQMSocket.ITcpClientBase.SetDataHandlingAdapter(RRQMSocket.DataHandlingAdapter)"/>进行赋值。
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.DataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.IP">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.MainSocket">
            <summary>
            主通信器
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.Online">
            <summary>
            判断是否在线
            <para>该属性仅表示TCP状态是否在线</para>
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.ReceiveType">
            <summary>
            接收模式
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpClientBase.UseSsl">
            <summary>
            使用Ssl加密
            </summary>
        </member>
        <member name="M:RRQMSocket.ITcpClientBase.Close">
            <summary>
            关闭Socket信道，并随后释放资源
            </summary>
        </member>
        <member name="M:RRQMSocket.ITcpClientBase.Close(System.String)">
            <summary>
            中断终端，传递中断消息
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:RRQMSocket.ITcpClientBase.GetStream">
            <summary>
            获取流，在正常模式下为<see cref="T:System.Net.Sockets.NetworkStream"/>，在Ssl模式下为<see cref="T:System.Net.Security.SslStream"/>。
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ITcpClientBase.SetDataHandlingAdapter(RRQMSocket.DataHandlingAdapter)">
            <summary>
            设置数据处理适配器
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:RRQMSocket.ITcpClientBase.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            禁用发送或接收
            </summary>
            <param name="how"></param>
        </member>
        <member name="T:RRQMSocket.ITokenClient">
            <summary>
            具有Token验证功能的终端接口
            </summary>
        </member>
        <member name="M:RRQMSocket.ITokenClient.Connect(System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
            连接到服务器
            </summary>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <exception cref="T:RRQMSocket.RRQMTokenVerifyException"></exception>
            <exception cref="T:System.TimeoutException"></exception>
            <param name="verifyToken"></param>
            <param name="token"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.ITokenClientBase">
            <summary>
            具有Token验证功能的终端基础接口
            </summary>
        </member>
        <member name="P:RRQMSocket.ITokenClientBase.WaitHandlePool">
            <summary>
            等待返回池
            </summary>
        </member>
        <member name="P:RRQMSocket.ITokenClientBase.IsHandshaked">
            <summary>
            是否已完成握手
            </summary>
        </member>
        <member name="T:RRQMSocket.IFixedHeaderRequestInfo">
            <summary>
            用户自定义固定包头请求
            </summary>
        </member>
        <member name="P:RRQMSocket.IFixedHeaderRequestInfo.BodyLength">
            <summary>
            数据体长度
            </summary>
        </member>
        <member name="M:RRQMSocket.IFixedHeaderRequestInfo.OnParsingHeader(System.Byte[])">
            <summary>
            当收到数据，由框架封送固定协议头。
            <para>您需要在此函数中，解析自己的固定包头，并且对<see cref="P:RRQMSocket.IFixedHeaderRequestInfo.BodyLength"/>赋值后续数据的长度，然后返回True。</para>
            <para>如果返回false，则意味着放弃本次解析</para>
            </summary>
            <param name="header"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.IFixedHeaderRequestInfo.OnParsingBody(System.Byte[])">
            <summary>
            当收到数据，由框架封送有效载荷数据。
            <para>如果返回false，意味着放弃本次解析的所有数据，包括已经解析完成的Header</para>
            </summary>
            <param name="body">载荷数据</param>
            <returns>是否成功有效</returns>
        </member>
        <member name="T:RRQMSocket.IPlguinObject">
            <summary>
            具有插件功能的对象
            </summary>
        </member>
        <member name="P:RRQMSocket.IPlguinObject.Container">
            <summary>
            内置IOC容器
            </summary>
        </member>
        <member name="P:RRQMSocket.IPlguinObject.PluginsManager">
            <summary>
            插件管理器
            </summary>
        </member>
        <member name="P:RRQMSocket.IPlguinObject.UsePlugin">
            <summary>
            是否已启用插件
            </summary>
        </member>
        <member name="M:RRQMSocket.IPlguinObject.AddPlugin``1">
            <summary>
            添加插件
            </summary>
            <typeparam name="TPlugin">插件类型</typeparam>
            <returns>插件类型实例</returns>
        </member>
        <member name="M:RRQMSocket.IPlguinObject.AddPlugin(RRQMSocket.IPlugin)">
            <summary>
            添加插件
            </summary>
            <param name="plugin">插件</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMSocket.IPlguinObject.ClearPlugins">
            <summary>
            清空插件
            </summary>
        </member>
        <member name="M:RRQMSocket.IPlguinObject.RemovePlugin(RRQMSocket.IPlugin)">
            <summary>
            移除插件
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:RRQMSocket.IPlguinObject.RemovePlugin``1">
            <summary>
            移除插件
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:RRQMSocket.IPlugin">
            <summary>
            插件接口
            </summary>
        </member>
        <member name="P:RRQMSocket.IPlugin.Order">
            <summary>
            插件执行顺序
            <para>该属性值越小，越靠前执行。值相等时，按添加先后顺序</para>
            <para>该属性效果，仅在<see cref="M:RRQMSocket.IPluginsManager.Add(RRQMSocket.IPlugin)"/>之前设置有效。</para>
            </summary>
        </member>
        <member name="P:RRQMSocket.IPlugin.Logger">
            <summary>
            日志记录器。
            <para>在<see cref="M:RRQMSocket.IPluginsManager.Add(RRQMSocket.IPlugin)"/>之前如果没有赋值的话，随后会用<see cref="M:RRQMCore.Dependency.IContainer.Resolve``1"/>填值</para>
            </summary>
        </member>
        <member name="P:RRQMSocket.IPlugin.PluginsManager">
            <summary>
            包含此插件的插件管理器
            </summary>
        </member>
        <member name="T:RRQMSocket.IUdpSessionPlugin">
            <summary>
            Udp会话插件
            </summary>
        </member>
        <member name="M:RRQMSocket.IUdpSessionPlugin.OnReceivedData(RRQMSocket.IUdpSession,RRQMSocket.UdpReceivedDataEventArgs)">
            <summary>
            在收到数据时触发
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="T:RRQMSocket.ITcpPlugin">
            <summary>
            Tcp系插件接口
            </summary>
        </member>
        <member name="M:RRQMSocket.ITcpPlugin.OnConnected(RRQMSocket.ITcpClientBase,RRQMCore.RRQMEventArgs)">
            <summary>
            客户端连接成功后触发    
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.ITcpPlugin.OnConnecting(RRQMSocket.ITcpClientBase,RRQMSocket.ClientOperationEventArgs)">
             <summary>
            在即将完成连接时触发。
             </summary>
             <param name="client">客户端</param>
             <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.ITcpPlugin.OnDisconnected(RRQMSocket.ITcpClientBase,RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            会话断开后触发
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.ITcpPlugin.OnReceivedData(RRQMSocket.ITcpClientBase,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            在收到数据时触发
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.ITcpPlugin.OnSendingData(RRQMSocket.ITcpClientBase,RRQMSocket.SendingEventArgs)">
            <summary>
            当即将发送数据时，调用该方法在适配器之后，接下来即会发送数据。
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.ITcpPlugin.OnIDChanged(RRQMSocket.ITcpClientBase,RRQMCore.RRQMEventArgs)">
            <summary>
            当Client的ID被更改后触发
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.ITokenPlugin">
            <summary>
            Token系插件接口
            </summary>
        </member>
        <member name="M:RRQMSocket.ITokenPlugin.OnHandleTokenData(RRQMSocket.ITcpClientBase,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            在收到Token数据时触发
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.ITokenPlugin.OnHandshaked(RRQMSocket.ITcpClientBase,RRQMSocket.MesEventArgs)">
            <summary>
            在完成握手连接时。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.ITokenPlugin.OnVerifyToken(RRQMSocket.ITcpClientBase,RRQMSocket.VerifyOptionEventArgs)">
            <summary>
            在验证Token时
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.ITokenPlugin.OnAbnormalVerify(RRQMSocket.ITcpClientBase,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            收到非正常连接。
            一般地，这是由其他类型客户端发起的连接。
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="T:RRQMSocket.IProtocolPlugin">
            <summary>
            Protocol系插件接口
            </summary>
        </member>
        <member name="M:RRQMSocket.IProtocolPlugin.OnHandleProtocolData(RRQMSocket.ITcpClientBase,RRQMSocket.ProtocolDataEventArgs)">
            <summary>
            收到协议数据
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolPlugin.OnStreamTransfering(RRQMSocket.ITcpClientBase,RRQMSocket.StreamOperationEventArgs)">
            <summary>
            即将接收流数据，用户需要在此事件中对e.Bucket初始化。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.IProtocolPlugin.OnStreamTransfered(RRQMSocket.ITcpClientBase,RRQMSocket.StreamStatusEventArgs)">
            <summary>
            流数据处理，用户需要在此事件中对e.Bucket手动释放。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.IPluginsManager">
            <summary>
            插件管理器接口
            </summary>
        </member>
        <member name="P:RRQMSocket.IPluginsManager.Container">
            <summary>
            注入容器
            </summary>
        </member>
        <member name="M:RRQMSocket.IPluginsManager.Add(RRQMSocket.IPlugin)">
            <summary>
            添加插件
            </summary>
            <param name="plugin">插件</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMSocket.IPluginsManager.Remove(RRQMSocket.IPlugin)">
            <summary>
            移除插件
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:RRQMSocket.IPluginsManager.Remove(System.Type)">
            <summary>
            移除插件
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:RRQMSocket.IPluginsManager.Clear">
            <summary>
            清除所有插件
            </summary>
        </member>
        <member name="M:RRQMSocket.IPluginsManager.Raise``1(System.String,System.Object[])">
            <summary>
            触发对应方法
            </summary>
            <typeparam name="TPlugin">接口类型</typeparam>
            <param name="name">触发名称</param>
            <param name="params">参数</param>
        </member>
        <member name="T:RRQMSocket.IRequestInfo">
             <summary>
             请求解析对象接口。
            <para>此处接口设计借鉴SuperSocket，只为大家更好理解</para>
             </summary>
        </member>
        <member name="T:RRQMSocket.IClientSender">
            <summary>
            客户端发送接口
            </summary>
        </member>
        <member name="M:RRQMSocket.IClientSender.Send(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            同步组合发送数据。
            <para>内部已经封装Ssl和发送长度检测，即：调用完成即表示数据全部发送完毕。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="transferBytes">组合数据</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IClientSender.SendAsync(System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            异步组合发送数据。
            <para>在<see cref="T:RRQMSocket.ITcpClient"/>时，如果使用独立线程发送，则不会触发异常。</para>
            <para>在<see cref="T:RRQMSocket.ITcpClientBase"/>时，相当于<see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)"/>。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="transferBytes">组合数据</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="T:RRQMSocket.IUdpClientSender">
            <summary>
            具有Udp终结点的发送
            </summary>
        </member>
        <member name="M:RRQMSocket.IUdpClientSender.Send(System.Net.EndPoint,System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            同步组合发送数据。
            <para>内部已经封装Ssl和发送长度检测，即：调用完成即表示数据全部发送完毕。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="endPoint">远程终结点</param>
            <param name="transferBytes">组合数据</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IUdpClientSender.SendAsync(System.Net.EndPoint,System.Collections.Generic.IList{RRQMSocket.TransferByte})">
            <summary>
            异步组合发送数据。
            <para>在<see cref="T:RRQMSocket.ITcpClient"/>时，如果使用独立线程发送，则不会触发异常。</para>
            <para>在<see cref="T:RRQMSocket.ITcpClientBase"/>时，相当于<see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)"/>。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="endPoint">远程终结点</param>
            <param name="transferBytes">组合数据</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="T:RRQMSocket.IDefaultSender">
            <summary>
            具有直接发送功能
            </summary>
        </member>
        <member name="M:RRQMSocket.IDefaultSender.DefaultSend(System.Byte[],System.Int32,System.Int32)">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移量</param>
            <param name="length">数据长度</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IDefaultSender.DefaultSend(System.Byte[])">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IDefaultSender.DefaultSend(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="byteBlock">数据块载体</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IDefaultSender.DefaultSendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移量</param>
            <param name="length">数据长度</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IDefaultSender.DefaultSendAsync(System.Byte[])">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IDefaultSender.DefaultSendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="byteBlock">数据块载体</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="T:RRQMSocket.IUdpDefaultSender">
            <summary>
            具有直接发送功能
            </summary>
        </member>
        <member name="M:RRQMSocket.IUdpDefaultSender.DefaultSend(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="endPoint">目的终结点</param>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移量</param>
            <param name="length">数据长度</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IUdpDefaultSender.DefaultSend(System.Net.EndPoint,System.Byte[])">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="endPoint">目的终结点</param>
            <param name="buffer">数据缓存区</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IUdpDefaultSender.DefaultSend(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="endPoint">目的终结点</param>
            <param name="byteBlock">数据块载体</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IUdpDefaultSender.DefaultSendAsync(System.Net.EndPoint,System.Byte[],System.Int32,System.Int32)">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="endPoint">目的终结点</param>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移量</param>
            <param name="length">数据长度</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IUdpDefaultSender.DefaultSendAsync(System.Net.EndPoint,System.Byte[])">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="endPoint">目的终结点</param>
            <param name="buffer">数据缓存区</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IUdpDefaultSender.DefaultSendAsync(System.Net.EndPoint,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            绕过适配器，直接发送字节流
            </summary>
            <param name="endPoint">目的终结点</param>
            <param name="byteBlock">数据块载体</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="T:RRQMSocket.ISendBase">
            <summary>
            具有发送动作的基类。
            </summary>
        </member>
        <member name="P:RRQMSocket.ISendBase.CanSend">
            <summary>
            表示对象能否顺利执行发送操作。
            <para>不一定完全能执行。</para>
            </summary>
        </member>
        <member name="T:RRQMSocket.ISend">
            <summary>
            具有发送功能的接口
            </summary>
        </member>
        <member name="M:RRQMSocket.ISend.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            同步发送数据。
            <para>内部已经封装Ssl和发送长度检测，即：调用完成即表示数据全部发送完毕。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移量</param>
            <param name="length">数据长度</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.ISend.Send(System.Byte[])">
            <summary>
            同步发送数据。
            <para>内部已经封装Ssl和发送长度检测，即：调用完成即表示数据全部发送完毕。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="buffer">数据缓存区</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.ISend.Send(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            同步发送数据。
            <para>内部已经封装Ssl和发送长度检测，即：调用完成即表示数据全部发送完毕。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="byteBlock">数据块</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.ISend.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            异步发送数据。
            <para>在<see cref="T:RRQMSocket.ITcpClient"/>时，如果使用独立线程发送，则不会触发异常。</para>
            <para>在<see cref="T:RRQMSocket.ITcpClientBase"/>时，相当于<see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)"/>。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移量</param>
            <param name="length">数据长度</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.ISend.SendAsync(System.Byte[])">
            <summary>
            异步发送数据。
            <para>在<see cref="T:RRQMSocket.ITcpClient"/>时，如果使用独立线程发送，则不会触发异常。</para>
            <para>在<see cref="T:RRQMSocket.ITcpClientBase"/>时，相当于<see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)"/>。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="buffer">数据缓存区</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.ISend.SendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            异步发送数据。
            <para>在<see cref="T:RRQMSocket.ITcpClient"/>时，如果使用独立线程发送，则不会触发异常。</para>
            <para>在<see cref="T:RRQMSocket.ITcpClientBase"/>时，相当于<see cref="M:System.Net.Sockets.Socket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@,System.AsyncCallback,System.Object)"/>。</para>
            <para>该发送会经过适配器封装，具体封装内容由适配器决定。</para>
            </summary>
            <param name="byteBlock">数据块</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="T:RRQMSocket.IIDSender">
            <summary>
            通过ID发送
            </summary>
        </member>
        <member name="M:RRQMSocket.IIDSender.Send(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            向对应ID的客户端发送
            </summary>
            <param name="id">目标ID</param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">未连接异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">未找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IIDSender.Send(System.String,System.Byte[])">
            <summary>
            向对应ID的客户端发送
            </summary>
            <param name="id">目标ID</param>
            <param name="buffer">数据</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">未连接异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">未找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IIDSender.Send(System.String,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            向对应ID的客户端发送
            </summary>
            <param name="id">目标ID</param>
            <param name="byteBlock">数据</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">未连接异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">未找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IIDSender.SendAsync(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            向对应ID的客户端发送
            </summary>
            <param name="id">目标ID</param>
            <param name="buffer">数据</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">未连接异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">未找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IIDSender.SendAsync(System.String,System.Byte[])">
            <summary>
            向对应ID的客户端发送
            </summary>
            <param name="id">目标ID</param>
            <param name="buffer">数据</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">未连接异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">未找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="M:RRQMSocket.IIDSender.SendAsync(System.String,RRQMCore.ByteManager.ByteBlock)">
            <summary>
            向对应ID的客户端发送
            </summary>
            <param name="id">目标ID</param>
            <param name="byteBlock">数据</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">未连接异常</exception>
            <exception cref="T:RRQMSocket.ClientNotFindException">未找到ID对应的客户端</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
        </member>
        <member name="T:RRQMSocket.IWaitSender">
            <summary>
            发送等待接口
            </summary>
        </member>
        <member name="M:RRQMSocket.IWaitSender.SendThenReturn(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.IWaitSender.SendThenReturn(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.IWaitSender.SendThenReturn(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送流中的有效数据
            </summary>
            <param name="byteBlock">数据块载体</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.IWaitSender.SendThenReturnAsync(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.IWaitSender.SendThenReturnAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.IWaitSender.SendThenReturnAsync(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="byteBlock">数据块载体</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="T:RRQMSocket.ITcpServiceBase">
            <summary>
            TCP服务器辅助接口
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpServiceBase.Container">
            <summary>
            内置IOC容器
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpServiceBase.UseSsl">
            <summary>
            使用Ssl加密
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpServiceBase.SocketClients">
            <summary>
            获取当前连接的所有客户端
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpServiceBase.Monitors">
            <summary>
            网络监听集合
            </summary>
        </member>
        <member name="M:RRQMSocket.ITcpServiceBase.ResetID(RRQMSocket.WaitSetID)">
            <summary>
            重新设置ID
            </summary>
            <param name="waitSetID"></param>
        </member>
        <member name="M:RRQMSocket.ITcpServiceBase.GetIDs">
            <summary>
            获取当前在线的所有ID集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ITcpServiceBase.Clear">
            <summary>
            清理当前已连接的所有客户端
            </summary>
        </member>
        <member name="T:RRQMSocket.ITcpService`1">
            <summary>
            TCP系列服务器接口
            </summary>
        </member>
        <member name="E:RRQMSocket.ITcpService`1.Connected">
            <summary>
            用户连接完成
            </summary>
        </member>
        <member name="E:RRQMSocket.ITcpService`1.Connecting">
            <summary>
            有用户连接的时候
            </summary>
        </member>
        <member name="E:RRQMSocket.ITcpService`1.Disconnected">
            <summary>
            有用户断开连接
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpService`1.MaxCount">
            <summary>
            获取最大可连接数
            </summary>
        </member>
        <member name="P:RRQMSocket.ITcpService`1.ClearInterval">
            <summary>
            获取清理无数据交互的SocketClient，默认60。如果不想清除，可使用-1。
            </summary>
        </member>
        <member name="M:RRQMSocket.ITcpService`1.SocketClientExist(System.String)">
            <summary>
            根据ID判断SocketClient是否存在
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.ITcpService`1.TryGetSocketClient(System.String,`0@)">
            <summary>
            尝试获取TClient
            </summary>
            <param name="id">ID</param>
            <param name="socketClient">TClient</param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.IService">
            <summary>
            服务器接口
            </summary>
        </member>
        <member name="P:RRQMSocket.IService.ServerState">
            <summary>
            服务器状态
            </summary>
        </member>
        <member name="P:RRQMSocket.IService.Config">
            <summary>
            获取服务器配置
            </summary>
        </member>
        <member name="P:RRQMSocket.IService.ServerName">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:RRQMSocket.IService.Setup(RRQMSocket.RRQMConfig)">
            <summary>
            配置服务器
            </summary>
            <param name="serverConfig">配置</param>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns>设置的服务实例</returns>
        </member>
        <member name="M:RRQMSocket.IService.Setup(System.Int32)">
            <summary>
            配置服务器
            </summary>
            <param name="port"></param>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns>设置的服务实例</returns>
        </member>
        <member name="M:RRQMSocket.IService.Start">
            <summary>
            启动
            </summary>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Exception"></exception>
            <returns>设置的服务实例</returns>
        </member>
        <member name="M:RRQMSocket.IService.Stop">
            <summary>
            停止
            </summary>
            <exception cref="T:RRQMCore.RRQMException"></exception>
            <returns>设置的服务实例</returns>
        </member>
        <member name="T:RRQMSocket.ISocket">
            <summary>
            Socket基接口
            </summary>
        </member>
        <member name="P:RRQMSocket.ISocket.BufferLength">
            <summary>
            数据交互缓存池限制
            </summary>
        </member>
        <member name="P:RRQMSocket.ISocket.Logger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="T:RRQMSocket.ISubscriber">
            <summary>
            订阅接口
            </summary>
        </member>
        <member name="P:RRQMSocket.ISubscriber.Client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="P:RRQMSocket.ISubscriber.CanUse">
            <summary>
            能否使用
            </summary>
        </member>
        <member name="P:RRQMSocket.ISubscriber.Protocol">
            <summary>
            协议
            </summary>
        </member>
        <member name="T:RRQMSocket.IUdpSession">
            <summary>
            UDP会话
            </summary>
        </member>
        <member name="P:RRQMSocket.IUdpSession.PluginsManager">
            <summary>
            插件管理器
            </summary>
        </member>
        <member name="P:RRQMSocket.IUdpSession.BufferLength">
            <summary>
            缓存池大小
            </summary>
        </member>
        <member name="P:RRQMSocket.IUdpSession.MaxPackageSize">
            <summary>
            适配器能接收的最大数据包长度。
            </summary>
        </member>
        <member name="P:RRQMSocket.IUdpSession.CanSetDataHandlingAdapter">
            <summary>
            是否允许自由调用<see cref="M:RRQMSocket.IUdpSession.SetDataHandlingAdapter(RRQMSocket.UdpDataHandlingAdapter)"/>进行赋值。
            </summary>
        </member>
        <member name="P:RRQMSocket.IUdpSession.DataHandlingAdapter">
            <summary>
            数据处理适配器
            </summary>
        </member>
        <member name="M:RRQMSocket.IUdpSession.SetDataHandlingAdapter(RRQMSocket.UdpDataHandlingAdapter)">
            <summary>
            设置数据处理适配器
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="T:RRQMSocket.IUnfixedHeaderRequestInfo">
            <summary>
            用户自定义不固定包头请求
            </summary>
        </member>
        <member name="P:RRQMSocket.IUnfixedHeaderRequestInfo.BodyLength">
            <summary>
            数据体长度
            </summary>
        </member>
        <member name="M:RRQMSocket.IUnfixedHeaderRequestInfo.OnParsingHeader(RRQMCore.ByteManager.ByteBlock,System.Int32)">
            <summary>
            当收到数据，由框架封送数据，您需要在此函数中，解析自己的数据包头。
            <para>如果满足包头的解析，请返回True，并且递增整个包头的长度到<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>，然后赋值<see cref="P:RRQMSocket.IUnfixedHeaderRequestInfo.BodyLength"/></para>
            <para>如果返回false，意味着缓存剩余数据，此时如果仅仅是因为长度不足，则不必修改其他。</para>
            <para>但是如果是因为数据错误，则需要修改<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>到正确位置，如果都不正确，则设置<see cref="P:RRQMCore.ByteManager.ByteBlock.Pos"/>等于<see cref="P:RRQMCore.ByteManager.ByteBlock.Len"/></para>
            </summary>
            <param name="byteBlock"></param>
            <param name="length"></param>
            <returns>是否满足解析包头</returns>
        </member>
        <member name="M:RRQMSocket.IUnfixedHeaderRequestInfo.OnParsingBody(System.Byte[])">
            <summary>
            当收到数据，由框架封送有效载荷数据。
            <para>如果返回false，意味着放弃本次解析的所有数据，包括已经解析完成的Header</para>
            </summary>
            <param name="body">载荷数据</param>
            <returns>是否成功有效</returns>
        </member>
        <member name="T:RRQMSocket.PluginsManager">
            <summary>
            表示插件管理器。
            </summary>
        </member>
        <member name="M:RRQMSocket.PluginsManager.#ctor(RRQMCore.Dependency.IContainer)">
            <summary>
            构造函数
            </summary>
            <param name="container"></param>
        </member>
        <member name="P:RRQMSocket.PluginsManager.Container">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.PluginsManager.RRQMSocket#IPluginsManager#Add(RRQMSocket.IPlugin)">
            <summary>
            添加插件
            </summary>
            <param name="plugin">插件</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:RRQMSocket.PluginsManager.RRQMSocket#IPluginsManager#Clear">
            <summary>
            清除所有插件
            </summary>
        </member>
        <member name="M:RRQMSocket.PluginsManager.RRQMSocket#IPluginsManager#Raise``1(System.String,System.Object[])">
            <summary>
            触发对应方法
            </summary>
            <typeparam name="TPlugin">接口类型，此处也必须是接口类型</typeparam>
            <param name="name">触发名称</param>
            <param name="params">参数</param>
        </member>
        <member name="M:RRQMSocket.PluginsManager.RRQMSocket#IPluginsManager#Remove(RRQMSocket.IPlugin)">
            <summary>
            移除插件
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:RRQMSocket.PluginsManager.RRQMSocket#IPluginsManager#Remove(System.Type)">
            <summary>
            移除插件
            </summary>
            <param name="type"></param>
        </member>
        <member name="T:RRQMSocket.Plugins.TcpPluginBase">
            <summary>
            插件实现基类
            </summary>
        </member>
        <member name="F:RRQMSocket.Plugins.TcpPluginBase.disposedValue">
            <summary>
            表示是否已释放
            </summary>
        </member>
        <member name="P:RRQMSocket.Plugins.TcpPluginBase.Order">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.Plugins.TcpPluginBase.PluginsManager">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.Plugins.TcpPluginBase.Logger">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpPluginBase.OnConnected(RRQMSocket.ITcpClientBase,RRQMCore.RRQMEventArgs)">
            <summary>
            成功建立连接
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpPluginBase.OnConnecting(RRQMSocket.ITcpClientBase,RRQMSocket.ClientOperationEventArgs)">
            <summary>
            在请求连接时
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpPluginBase.OnDisconnected(RRQMSocket.ITcpClientBase,RRQMSocket.ClientDisconnectedEventArgs)">
            <summary>
            在断开连接时
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpPluginBase.OnIDChanged(RRQMSocket.ITcpClientBase,RRQMCore.RRQMEventArgs)">
            <summary>
            当Client的ID被更改后触发
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpPluginBase.OnReceivedData(RRQMSocket.ITcpClientBase,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            在收到数据时触发
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数，当设置e.Handled=true时，终止向下传递</param>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpPluginBase.OnSending(RRQMSocket.ITcpClientBase,RRQMSocket.SendingEventArgs)">
            <summary>
            当即将发送数据时，调用该方法在适配器之后，接下来即会发送数据。
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数，当设置e.IsPermitOperation=false时，中断发送。</param>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpPluginBase.Dispose(System.Boolean)">
            <summary>
            释放
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpPluginBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:RRQMSocket.Plugins.UdpSessionPluginBase">
            <summary>
            Udp插件实现类
            </summary>
        </member>
        <member name="F:RRQMSocket.Plugins.UdpSessionPluginBase.disposedValue">
            <summary>
            判断是否已释放
            </summary>
        </member>
        <member name="P:RRQMSocket.Plugins.UdpSessionPluginBase.Order">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.Plugins.UdpSessionPluginBase.Logger">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="P:RRQMSocket.Plugins.UdpSessionPluginBase.PluginsManager">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.Plugins.UdpSessionPluginBase.RRQMSocket#IUdpSessionPlugin#OnReceivedData(RRQMSocket.IUdpSession,RRQMSocket.UdpReceivedDataEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.UdpSessionPluginBase.OnReceivedData(RRQMSocket.IUdpSession,RRQMSocket.UdpReceivedDataEventArgs)">
            <summary>
            收到数据
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.UdpSessionPluginBase.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.UdpSessionPluginBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:RRQMSocket.Plugins.TokenPluginBase">
            <summary>
            Token系插件接口
            </summary>
        </member>
        <member name="M:RRQMSocket.Plugins.TokenPluginBase.OnAbnormalVerify(RRQMSocket.ITcpClientBase,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            收到非正常连接。
            一般地，这是由其他类型客户端发起的连接。
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.Plugins.TokenPluginBase.OnHandshaked(RRQMSocket.ITcpClientBase,RRQMSocket.MesEventArgs)">
            <summary>
            在完成握手连接时。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.TokenPluginBase.OnVerifyToken(RRQMSocket.ITcpClientBase,RRQMSocket.VerifyOptionEventArgs)">
            <summary>
            在验证Token时
            </summary>
            <param name="client">客户端</param>
            <param name="e">参数</param>
        </member>
        <member name="M:RRQMSocket.Plugins.TokenPluginBase.OnHandleTokenData(RRQMSocket.ITcpClientBase,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            处理Token收到的数据
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.Plugins.ProtocolPluginBase">
            <summary>
            Protocol系插件接口
            </summary>
        </member>
        <member name="M:RRQMSocket.Plugins.ProtocolPluginBase.OnHandleProtocolData(RRQMSocket.ITcpClientBase,RRQMSocket.ProtocolDataEventArgs)">
            <summary>
            收到协议数据
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.ProtocolPluginBase.OnStreamTransfered(RRQMSocket.ITcpClientBase,RRQMSocket.StreamStatusEventArgs)">
            <summary>
            流数据处理，用户需要在此事件中对e.Bucket手动释放。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="M:RRQMSocket.Plugins.ProtocolPluginBase.OnStreamTransfering(RRQMSocket.ITcpClientBase,RRQMSocket.StreamOperationEventArgs)">
            <summary>
            即将接收流数据，用户需要在此事件中对e.Bucket初始化。
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.Plugins.TcpCommandLinePlugin">
            <summary>
            TCP命令行插件。
            </summary>
        </member>
        <member name="P:RRQMSocket.Plugins.TcpCommandLinePlugin.Converter">
            <summary>
            字符串转换器，默认支持基础类型和Json。可以自定义。
            </summary>
        </member>
        <member name="P:RRQMSocket.Plugins.TcpCommandLinePlugin.ReturnException">
            <summary>
            是否返回执行异常。
            </summary>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpCommandLinePlugin.NoReturnException">
            <summary>
            当有执行异常时，不返回异常。
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpCommandLinePlugin.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RRQMSocket.Plugins.TcpCommandLinePlugin.OnReceivedData(RRQMSocket.ITcpClientBase,RRQMSocket.ReceivedDataEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.StreamInfo">
            <summary>
            流信息
            </summary>
        </member>
        <member name="M:RRQMSocket.StreamInfo.#ctor(System.Int64,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="size"></param>
            <param name="streamType"></param>
        </member>
        <member name="P:RRQMSocket.StreamInfo.Size">
            <summary>
            流长度
            </summary>
        </member>
        <member name="P:RRQMSocket.StreamInfo.StreamType">
            <summary>
            流类型
            </summary>
        </member>
        <member name="T:RRQMSocket.StreamOperator">
            <summary>
            流操作
            </summary>
        </member>
        <member name="F:RRQMSocket.StreamOperator.channel">
            <summary>
            开始的通道
            </summary>
        </member>
        <member name="F:RRQMSocket.StreamOperator.completedLength">
            <summary>
            已完成长度
            </summary>
        </member>
        <member name="F:RRQMSocket.StreamOperator.progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="F:RRQMSocket.StreamOperator.result">
            <summary>
            结果
            </summary>
        </member>
        <member name="F:RRQMSocket.StreamOperator.speedTemp">
            <summary>
            临时速度
            </summary>
        </member>
        <member name="P:RRQMSocket.StreamOperator.CompletedLength">
            <summary>
            已完成长度
            </summary>
            <returns></returns>
        </member>
        <member name="P:RRQMSocket.StreamOperator.MaxSpeed">
            <summary>
            最大传输速度（企业版默认1024*1024字节，开源版不限速，所以此值无效。）
            </summary>
        </member>
        <member name="P:RRQMSocket.StreamOperator.PackageSize">
            <summary>
            包长度，默认512Kb,
            Max=10Mb,Min=1024Byte，可根据网络状况调节。
            </summary>
        </member>
        <member name="P:RRQMSocket.StreamOperator.Progress">
            <summary>
            进度
            </summary>
        </member>
        <member name="P:RRQMSocket.StreamOperator.Result">
            <summary>
            执行结果
            </summary>
        </member>
        <member name="P:RRQMSocket.StreamOperator.Token">
            <summary>
            可取消令箭
            </summary>
        </member>
        <member name="M:RRQMSocket.StreamOperator.SetMaxSpeed(System.Int32)">
            <summary>
            设置最大速度
            </summary>
            <param name="speed"></param>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.StreamOperator.Speed">
            <summary>
            从上次获取到此次获得的速度
            </summary>
            <returns></returns>
        </member>
        <member name="M:RRQMSocket.StreamOperator.SetStreamResult(RRQMCore.Result)">
            <summary>
            设置状态
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:RRQMSocket.WaitStream">
            <summary>
            等待流状态返回
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitStream.Size">
            <summary>
            流长度
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitStream.StreamType">
            <summary>
            流类型
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitStream.Metadata">
            <summary>
            元数据
            </summary>
        </member>
        <member name="P:RRQMSocket.WaitStream.ChannelID">
            <summary>
            开启的通道标识
            </summary>
        </member>
        <member name="T:RRQMSocket.ProtocolSubscriber">
            <summary>
            协议订阅
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolSubscriber.#ctor(System.Int16,System.Action{RRQMSocket.ProtocolSubscriber,RRQMSocket.ProtocolSubscriberEventArgs})">
            <summary>
            构造函数
            </summary>
            <param name="protocol"></param>
            <param name="receivedAction"></param>
        </member>
        <member name="P:RRQMSocket.ProtocolSubscriber.CanSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.ProtocolSubscriber.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSubscriber.Send(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSubscriber.Send(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSubscriber.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSubscriber.SendAsync(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSubscriber.SendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.ProtocolSubscriber.OnReceived(RRQMSocket.ProtocolSubscriberEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.ProtocolSubscriberCollection">
            <summary>
            协议订阅集合
            </summary>
        </member>
        <member name="T:RRQMSocket.SubscriberBase">
            <summary>
            订阅者基类
            </summary>
        </member>
        <member name="F:RRQMSocket.SubscriberBase.client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="F:RRQMSocket.SubscriberBase.protocol">
            <summary>
            协议
            </summary>
        </member>
        <member name="M:RRQMSocket.SubscriberBase.#ctor(System.Int16)">
            <summary>
            构造函数
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="M:RRQMSocket.SubscriberBase.Finalize">
            <summary>
            析构函数
            </summary>
        </member>
        <member name="P:RRQMSocket.SubscriberBase.CanUse">
            <summary>
            能否使用
            </summary>
        </member>
        <member name="P:RRQMSocket.SubscriberBase.Client">
            <summary>
            客户端
            </summary>
        </member>
        <member name="P:RRQMSocket.SubscriberBase.Protocol">
            <summary>
            协议
            </summary>
        </member>
        <member name="M:RRQMSocket.SubscriberBase.Dispose">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.SubscriberBase.OnReceived(RRQMSocket.ProtocolSubscriberEventArgs)">
            <summary>
            接收数据
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.WaitSenderSubscriber">
             <summary>
             协议订阅等待
            <list type="bullet">
             <listheader>
              <term>使用注意事项</term>
              <description><see cref="M:RRQMSocket.WaitSenderSubscriber.SendThenReturn(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)"/>函数在执行时，为Lock同步。
              但是也有可能收到上次未返回的数据。</description>
            </listheader>
            </list>
             </summary>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.#ctor(System.Int16)">
            <summary>
            构造函数
            </summary>
            <param name="protocol"></param>
        </member>
        <member name="P:RRQMSocket.WaitSenderSubscriber.CanSend">
            <summary>
            <inheritdoc/>
            </summary>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.Send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.Send(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.Send(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.SendAsync(System.Byte[],System.Int32,System.Int32)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="length"></param>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.SendAsync(System.Byte[])">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="buffer"></param>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.SendAsync(RRQMCore.ByteManager.ByteBlock)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="byteBlock"></param>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.SendThenReturn(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.SendThenReturn(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送字节流
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.SendThenReturn(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Threading.CancellationToken)">
            <summary>
            发送流中的有效数据
            </summary>
            <param name="byteBlock">数据块载体</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.SendThenReturnAsync(System.Byte[],System.Int32,System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="offset">偏移</param>
            <param name="length">长度</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.SendThenReturnAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="buffer">数据缓存区</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.SendThenReturnAsync(RRQMCore.ByteManager.ByteBlock,System.Int32,System.Threading.CancellationToken)">
            <summary>
            异步发送
            </summary>
            <param name="byteBlock">数据块载体</param>
            <param name="timeout">超时时间</param>
            <param name="token">取消令箭</param>
            <exception cref="T:RRQMSocket.RRQMNotConnectedException">客户端没有连接</exception>
            <exception cref="T:RRQMSocket.RRQMOverlengthException">发送数据超长</exception>
            <exception cref="T:RRQMCore.RRQMException">其他异常</exception>
            <returns>返回的数据</returns>
        </member>
        <member name="M:RRQMSocket.WaitSenderSubscriber.OnReceived(RRQMSocket.ProtocolSubscriberEventArgs)">
            <summary>
            <inheritdoc/>
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:RRQMSocket.EventBusUtility">
            <summary>
            EventBus通用
            </summary>
        </member>
        <member name="F:RRQMSocket.EventBusUtility.PMin">
            <summary>
            最小保留
            </summary>
        </member>
        <member name="F:RRQMSocket.EventBusUtility.PMax">
            <summary>
            最大保留
            </summary>
        </member>
        <member name="F:RRQMSocket.EventBusUtility.P106">
            <summary>
            发布事件
            </summary>
        </member>
        <member name="F:RRQMSocket.EventBusUtility.P107">
            <summary>
            取消发布事件
            </summary>
        </member>
        <member name="F:RRQMSocket.EventBusUtility.P108">
            <summary>
            订阅事件
            </summary>
        </member>
        <member name="F:RRQMSocket.EventBusUtility.P109">
            <summary>
            请求触发事件
            </summary>
        </member>
        <member name="F:RRQMSocket.EventBusUtility.P110">
            <summary>
            分发触发
            </summary>
        </member>
        <member name="F:RRQMSocket.EventBusUtility.P111">
            <summary>
            获取所有事件
            </summary>
        </member>
        <member name="F:RRQMSocket.EventBusUtility.P112">
            <summary>
            请求取消订阅
            </summary>
        </member>
        <member name="T:HttpContextEventHandler`1">
            <summary>
            HTTP上下文事件委托
            </summary>
            <typeparam name="TClient"></typeparam>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMMessageEventHandler`1">
            <summary>
            显示信息
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMEventHandler`1">
            <summary>
            普通通知
            </summary>
            <typeparam name="TClient"></typeparam>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMTcpClientConnectingEventHandler`1">
            <summary>
            客户端连接
            </summary>
            <typeparam name="TClient"></typeparam>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMTcpClientDisconnectedEventHandler`1">
            <summary>
            客户端断开连接
            </summary>
            <typeparam name="TClient"></typeparam>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMClientOperationEventHandler`1">
            <summary>
            正在连接事件
            </summary>
            <typeparam name="TClient"></typeparam>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMProtocolReceivedEventHandler`1">
            <summary>
            协议数据
            </summary>
            <param name="socketClient"></param>
            <param name="protocol"></param>
            <param name="byteBlock"></param>
        </member>
        <member name="T:RRQMPluginReceivedEventHandler`1">
            <summary>
            插件数据
            </summary>
            <param name="client"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMReceivedEventHandler`1">
            <summary>
            普通数据
            </summary>
            <param name="client"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
        <member name="T:RRQMStreamOperationEventHandler`1">
            <summary>
            收到流操作
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMStreamStatusEventHandler`1">
            <summary>
            流状态
            </summary>
            <param name="socketClient"></param>
            <param name="e"></param>
        </member>
        <member name="T:RRQMUDPByteBlockEventHandler">
            <summary>
            UDP接收
            </summary>
            <param name="endpoint"></param>
            <param name="byteBlock"></param>
            <param name="requestInfo"></param>
        </member>
    </members>
</doc>
